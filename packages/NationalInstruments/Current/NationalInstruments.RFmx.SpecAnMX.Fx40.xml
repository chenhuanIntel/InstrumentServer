<doc>
  <assembly ninamespaces="NationalInstruments.RFmx.SpecAnMX|NationalInstruments.RFmx.InstrMX">
    <name>
    </name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSem" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSem" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a spectral emission mask (SEM) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSem.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of spectral emission mask (SEM) measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXSemConfiguration</value>
<lastupdated>1/9/2015 11:51:12 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSem.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve spectral emission mask (SEM) measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXSemResults</value>
<lastupdated>1/9/2015 11:51:18 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSubObject" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSubObject" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents members that are common to all sub-object of RFmxSpecAnMX classes. 
</summary>
<threadsafety safety="safe" />
<remarks>
Contains members that are common to all sub-object of RFmxSpecAnMX classes. For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.
</remarks>
<lastupdated>8/22/2014 2:32:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates the upper offset measurement status based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:42:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the measurement has failed.
</summary>
<lastupdated>7/10/2014 11:45:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the measurement has passed.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<lastupdated>7/8/2014 3:19:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a Gaussian response is applied.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a flat response is applied.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 4-pole synchronously-tuned response is applied.
</summary>
<lastupdated>9/3/2014 9:44:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 5-pole synchronously-tuned response is applied.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdfRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<lastupdated>7/8/2014 3:18:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement does not use any RBW filtering.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter. 
</summary>
<lastupdated>8/12/2014 8:15:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter. 
</summary>
<lastupdated>8/12/2014 8:15:18 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType.Rrc" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rrc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RRC filter with the roll-off specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetRbwFilterRrcAlpha(System.String,System.Double)" crefType="PartiallyQualified" /> is used as the RBW filter.
</summary>
<lastupdated>1/9/2015 1:36:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary> Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>9/11/2015 10:55:06 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3 dB bandwidth of the RBW filter. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType)" crefType="FullyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.FftBased" />, RBW is the 3 dB bandwidth of the window specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 11:42:49 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the bin width of the spectrum computed using an FFT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType)" crefType="FullyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.FftBased" />.
</summary>
<lastupdated>9/11/2015 11:05:18 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFExternalPreampPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether an external preamplifier is present in the signal path.

</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No external preamplifier present in the signal path.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An external preamplifier present in the signal path.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the noise figure (NF) measurement.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement is performed on a single acquisition.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions for each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, over which the NF measurement is averaged.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 11:31:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method specifies the absolute power.
</summary>
<lastupdated>9/11/2015 11:34:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method is relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetReferenceLevel(System.String,System.Double)" /> method.
</summary>
<lastupdated>9/11/2015 11:33:53 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<lastupdated>7/10/2014 11:57:20 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
<lastupdated>7/10/2014 11:57:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
<lastupdated>7/10/2014 11:57:37 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
<lastupdated>7/10/2014 11:57:34 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:22:00 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:22:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the channel power (CHP) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the channel power (CHP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
<param name="averagingCount"> Specifies the number of acquisitions used for averaging when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled)" crefType="PartiallyQualified" />  to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.  </param>
<param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement. Refer to the Averaging section of the  Spectrum  topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 11:41:18 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures window and FFT to obtain a spectrum for the channel power (CHP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="fftWindow">Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the  Spectrum  topic for more information about FFT window types.</param>
<param name="fftPadding">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. This parameter is used only when the acquisition span is less than the device instantaneous bandwidth of the device.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgFFT() function in C.</remarks>
<lastupdated>7/5/2014 2:13:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), over which the measurement integrates the carrier channel power. 
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="integrationBandwidth">Specifies the frequency range, in Hz, over which the measurement integrates the carrier channel power.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/10/2015 2:43:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the  CHP  topic for more details on RBW and sweep time.</param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired signal, when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth)" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />.  </param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 11:41:35 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureRrcFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRrcFilter" nihasget="0" nihasset="0" niparameters="selectorString,rrcFilterEnabled,rrcAlpha" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the root-raised-cosine (RRC) filter to apply on the channel before measuring the channel power.
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="rrcFilterEnabled">Specifies whether to apply the RRC filter on the acquired channel before measuring the channel power.</param>
<param name="rrcAlpha">Specifies the roll-off factor for the RRC filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgRRCFilter() function in C.</remarks>
<lastupdated>8/10/2015 2:43:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSpan" nihasget="0" nihasset="0" niparameters="selectorString,span" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), around the center frequency, to acquire for the channel power (CHP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="span">Specifies the frequency range, in Hz, around the center frequency, to acquire for the measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgSpan() function in C.</remarks>
<lastupdated>6/17/2014 3:26:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time, in seconds, when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto)" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.False" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time.</param>
<param name="sweepTimeInterval">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto)" crefType="PartiallyQualified" />  to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.False" crefType="PartiallyQualified" />.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 11:41:54 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,numberOfCarriers" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of carriers for the CHP measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="numberOfCarriers">Specifies the number of carriers for the CHP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgNumberOfCarriers() function in C.</remarks>
<lastupdated>7/3/2015 11:39:41 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.ConfigureCarrierOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierOffset" nihasget="0" nihasset="0" niparameters="selectorString,carrierFrequency" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the center frequency of the carrier, relative to the RF center frequency.
</summary>
<param name="selectorString">Specifies the carrier number. Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="carrierFrequency">Specifies center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPCfgCarrierOffset() function in C.</remarks>
<lastupdated>7/29/2015 3:39:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetAveragingCount() function in C.</remarks>
<lastupdated>7/5/2014 2:23:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:42:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Indicates whether averaging for the channel power (CHP) measurement is enabled.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains a value that indicates whether averaging for the CHP measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/26/2014 3:01:53 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the channel power (CHP) measurement.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable averaging for the CHP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:35:06 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetAveragingType() function in C.</remarks>
<lastupdated>7/5/2014 2:24:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for channel power (CHP) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for CHP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetAveragingType() function in C.</remarks>
<lastupdated>8/12/2014 10:35:13 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the    power.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the frequency range, in Hz, over which the measurement integrates the power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use GetCarrierIntegrationBandwidth method to get the value. This method maps to the RFmxSpecAn_CHPGetIntegrationBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 2:26:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), over which the measurement integrates the power.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the frequency range, in Hz, over which the measurement integrates the    power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use SetCarrierIntegrationBandwidth method to set the value. This method maps to the               RFmxSpecAn_CHPSetIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 10:35:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.

</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetCarrierFrequency() function in C.</remarks>
<lastupdated>8/10/2015 9:47:22 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetCarrierFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetCarrierFrequency() function in C.</remarks>
<lastupdated>8/7/2015 6:56:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the    power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency range, in Hz, over which the measurement integrates the power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/10/2015 9:47:29 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetCarrierIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), over which the measurement integrates the    power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the frequency range, in Hz, over which the measurement integrates the    power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/7/2015 6:57:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetSpan(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the frequency range, in Hz, around the center frequency, to acquire for the    measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetSpan() function in C.</remarks>
<lastupdated>7/5/2014 2:34:01 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the frequency range, in Hz, around the center frequency, to acquire for the    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetSpan() function in C.</remarks>
<lastupdated>8/12/2014 10:36:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for channel power (CHP) measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for CHP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 2:31:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for channel power (CHP) measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the maximum number of threads used for parallelism for CHP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 10:35:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the channel power (CHP) measurement is enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the CHP measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:49:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the channel power (CHP) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the traces to enable the CHP measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:35:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the channel    power (CHP) measurement are enabled.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the CHP measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:48:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the channel    power (CHP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the CHP measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:16:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetFFTPadding() function in C.</remarks>
<lastupdated>7/5/2014 2:24:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method  is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetFFTPadding() function in C.</remarks>
<lastupdated>8/12/2014 10:35:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the FFT window type used to reduce spectral leakage. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetFFTWindow() function in C.</remarks>
<lastupdated>7/5/2014 2:25:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the FFT window type used to reduce spectral leakage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetFFTWindow() function in C.</remarks>
<lastupdated>8/12/2014 10:35:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 2:32:53 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 10:36:10 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains a value that indicates whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 10:15:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 10:36:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetRBWFilterType() function in C.</remarks>
<lastupdated>7/5/2014 2:33:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 10:36:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 9:02:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 9:03:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRrcFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use GetCarrierRrcFilterAlpha method to get the value. This method maps to the RFmxSpecAn_CHPGetRRCFilterAlpha() function in C.</remarks>
<lastupdated>8/4/2015 2:44:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRrcFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use SetCarrierRrcFilterAlpha method to set the value. This method maps to the RFmxSpecAn_CHPSetRRCFilterAlpha() function in C.</remarks>
<lastupdated>8/12/2014 10:36:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the root-raised-cosine (RRC) filter is applied on the acquired channel after    measuring the channel power.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the RRC filter is applied on the acquired channel after    measuring the channel power.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use GetCarrierRrcFilterEnabled method to get the value. This method maps to the RFmxSpecAn_CHPGetRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:51:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to apply the root-raised-cosine (RRC) filter on the acquired channel after    measuring the channel power.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to apply the RRC filter on the acquired channel after    measuring the channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use SetCarrierRrcFilterEnabled method to set the value. This method maps to the RFmxSpecAn_CHPSetRRCFilterEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:36:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetCarrierRrcFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>8/10/2015 9:47:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetCarrierRrcFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>8/7/2015 6:57:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the root-raised-cosine (RRC) filter is applied on the acquired channel after    measuring the channel power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the RRC filter is applied on the acquired channel after    measuring the channel power.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>8/10/2015 9:48:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to apply the root-raised-cosine (RRC) filter on the acquired channel after    measuring the channel power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether to apply the RRC filter on the acquired channel after    measuring the channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>8/7/2015 6:58:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the sweep time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetSweepTimeInterval() function in C.</remarks>
<lastupdated>7/5/2014 2:35:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.False" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:42:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 10:16:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 10:36:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetNumberOfCarriers(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of carriers.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains a value that indicates the the number of carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetNumberOfCarriers() function in C.</remarks>
<lastupdated>6/19/2015 8:15:29 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of carriers.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the number of carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPSetNumberOfCarriers() function in C.</remarks>
<lastupdated>8/4/2015 9:08:08 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMX" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Defines a root class which is used to identify and control SpecAn signal configuration.
</summary>
<threadsafety safety="safe" />
<remarks>To create a SpecAn signal configuration, instantiate a RFmxInstrMX instance and invoke GetSpecAnSignalConfiguration which returns
a SpecAn signal configuration. For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>9/18/2014 9:47:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAllNamedResultNames(System.String,System.String[]@,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllNamedResultNames" nihasget="0" nihasset="0" niparameters="selectorString,resultNames,defaultResultExists" niparametertypes="System.String,out System.String[],out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>Returns all the named result names of the signal that you specify in the Selector String parameter.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="resultNames">Returns an array of result names.</param>
<param name="defaultResultExists">Indicates whether the default result exists.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureDigitalEdgeTrigger(System.String,System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,digitalEdgeTriggerSource,digitalEdgeTriggerEdge,triggerDelay,enableTrigger" niparametertypes="System.String,System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge,System.Double,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Configures the device to wait for a digital edge trigger and then marks a reference point within the record.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="digitalEdgeTriggerSource">Specifies the source terminal for the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" crefType="PartiallyQualified" />.</param>
<param name="digitalEdgeTriggerEdge"> Specifies the trigger edge to detect.</param>
<param name="triggerDelay">Specifies the trigger delay time, in seconds.</param>
<param name="enableTrigger">
<see langword="True" /> to enable the trigger; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgDigitalEdgeTrigger() function in C.</remarks>
<lastupdated>1/9/2015 11:22:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureIQPowerEdgeTrigger(System.String,System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIQPowerEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,iqPowerEdgeTriggerSource,iqPowerEdgeTriggerLevel,iqPowerEdgeSlope,triggerDelay,minimumQuietTimeMode,minimumQuietTimeDuration,enableTrigger" niparametertypes="System.String,System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode,System.Double,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Configures the device to wait for the complex power of the I/Q data to cross the specified threshold and then marks a reference point within the record.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="iqPowerEdgeTriggerSource">Specifies the channel from which the device monitors the trigger.</param>
<param name="iqPowerEdgeTriggerLevel"> Specifies the power level, in dBm, at which the device triggers. The device asserts the trigger when the signal exceeds the level specified by the value of this parameter, taking into consideration the specified slope.  </param>
<param name="iqPowerEdgeSlope"> Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify.</param>
<param name="triggerDelay">Specifies the trigger delay time, in seconds. </param>
<param name="minimumQuietTimeMode">Specifies whether the measurement computes the minimum quiet time used for triggering.</param>
<param name="minimumQuietTimeDuration">Specifies the duration, in seconds, for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. If you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet when it is below the trigger level. </param>
<param name="enableTrigger">
<see langword="True" /> to enable the trigger; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgIQPowerEdgeTrigger() function in C.</remarks>
<lastupdated>6/29/2015 2:24:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureSoftwareEdgeTrigger(System.String,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSoftwareEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,triggerDelay,enableTrigger" niparametertypes="System.String,System.Double,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Configures the device to wait for a Software Trigger and then marks a reference point within the record.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="triggerDelay">Specifies the trigger delay time, in seconds.</param>
<param name="enableTrigger">Specifies whether to enable the trigger.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgSoftwareEdgeTrigger() function in C.</remarks>
<lastupdated>7/4/2014 9:23:16 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureRF(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRF" nihasget="0" nihasset="0" niparameters="selectorString,centerFrequency,referenceLevel,externalAttenuation" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the RF properties of the signal specified by the selector string.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="centerFrequency">Specifies the expected carrier frequency, in hertz (Hz), of the RF signal to acquire. The signal analyzer tunes to this frequency.</param>
<param name="referenceLevel"> Specifies the reference level, in dBm, which represents the maximum expected power of an RF input signal.</param>
<param name="externalAttenuation"> Specifies the attenuation, in dB, of a switch (or cable) connected to the RF IN connector of the signal analyzer. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the NI RF Vector Signal Analyzers Help.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgRF() function in C.</remarks>
<lastupdated>7/3/2014 4:20:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureReferenceLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,referenceLevel" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the reference level, which represents the maximum expected power of an RF input signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="referenceLevel">Specifies the reference level, in dBm, which represents the maximum expected power of an RF input signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgReferenceLevel() function in C.</remarks>
<lastupdated>7/3/2014 4:12:57 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureExternalAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,externalAttenuation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Specifies the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="externalAttenuation">Specifies the attenuation, in dB, of a switch (or cable) connected to the RF IN connector of the signal analyzer. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgExternalAttenuation() function in C.</remarks>
<lastupdated>9/16/2014 1:29:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequency" nihasget="0" nihasset="0" niparameters="selectorString,centerFrequency" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the expected carrier frequency of the RF signal to acquire. The signal analyzer tunes to this frequency.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="centerFrequency">Specifies the expected carrier frequency, in hertz (Hz), of the RF signal to acquire. The signal analyzer tunes to this frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CfgFrequency() function in C.</remarks>
<lastupdated>7/28/2014 12:07:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the RF vector signal analyzer detects a <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Falling" crefType="PartiallyQualified" /> on the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" crefType="PartiallyQualified" /> signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains a value that indicates whether the RF vector signal analyzer detects a <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Falling" crefType="PartiallyQualified" /> on the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" crefType="PartiallyQualified" /> signal.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition. </returns>
<remarks>This method maps to the RFmxSpecAn_GetDigitalEdgeTriggerEdge() function in C.</remarks>
<lastupdated>1/9/2015 11:24:13 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the RF vector signal analyzer detects a <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Falling" crefType="PartiallyQualified" /> on the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" crefType="PartiallyQualified" /> signal. This is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether the RF vector signal analyzer detects a rising or falling edge on the Digital    Edge Trigger signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetDigitalEdgeTriggerEdge() function in C.</remarks>
<lastupdated>1/9/2015 11:25:03 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetIQPowerEdgeTriggerLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" /> and in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope.  </summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" /> and in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetIQPowerEdgeTriggerLevel() function in C.</remarks>
<lastupdated>9/11/2015 10:12:03 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" /> and in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" /> and in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetIQPowerEdgeTriggerLevel() function in C.</remarks>
<lastupdated>9/11/2015 10:34:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetIQPowerEdgeTriggerSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Gets the channel from which the device monitors the trigger.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the channel from which the device monitors the trigger. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetIQPowerEdgeTriggerSource() function in C.</remarks>
<lastupdated>7/4/2014 9:48:09 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">
      <summary>
Sets the channel from which the device monitors the trigger. This is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the channel from which the device monitors the trigger. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetIQPowerEdgeTriggerSource() function in C.</remarks>
<lastupdated>1/9/2015 11:27:38 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetDigitalEdgeTriggerSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Returns  the source terminal for the digital-edge trigger.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the source terminal for the digital-edge trigger. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetDigitalEdgeTriggerSource() function in C.</remarks>
<lastupdated>7/17/2014 11:19:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetDigitalEdgeTriggerSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">
      <summary>
Sets the source terminal for the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" crefType="PartiallyQualified" />. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the source terminal for the Digital-Edge Trigger. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetDigitalEdgeTriggerSource() function in C.</remarks>
<lastupdated>1/9/2015 11:25:33 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetIQPowerEdgeTriggerLevelType() function in C.</remarks>
<lastupdated>9/11/2015 10:28:00 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetIQPowerEdgeTriggerLevelType() function in C.</remarks>
<lastupdated>9/11/2015 10:35:50 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the device asserts the trigger when the signal power is rising or falling.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the device asserts the trigger when the signal power is rising or falling.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetIQPowerEdgeTriggerSlope() function in C.</remarks>
<lastupdated>8/12/2014 8:34:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the device asserts the Trigger when the signal power is rising or falling. When    you set the 
<see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />, the device asserts the trigger when the    signal power exceeds the specified level with the slope you specify.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether the device asserts the trigger when the signal power is rising or falling.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetIQPowerEdgeTriggerSlope() function in C.</remarks>
<lastupdated>1/9/2015 11:27:22 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetTriggerMinimumQuietTimeDuration(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets a time duration, in seconds, for which the signal must be quiet before the RF signal    analyzer arms the I/Q Power Edge trigger.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains  a time duration, in seconds, for which the signal must be quiet before the RF signal    analyzer arms the I/Q Power Edge trigger.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetTriggerMinimumQuietTimeDuration() function in C.</remarks>
<lastupdated>7/28/2014 12:08:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerMinimumQuietTimeDuration(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets a time duration, in seconds, for which the signal must be quiet before the RF signal    analyzer arms the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureIQPowerEdgeTrigger(System.String,System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode,System.Double,System.Boolean)" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains a time duration, in seconds, for which the signal must be quiet before the RF signal    analyzer arms the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureIQPowerEdgeTrigger(System.String,System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode,System.Double,System.Boolean)" crefType="PartiallyQualified" />. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>If you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level. If you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge)" crefType="PartiallyQualified" /> to    <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level. This method maps to the RFmxSpecAn_SetTriggerMinimumQuietTimeDuration() function in C.</remarks>
<lastupdated>1/9/2015 11:28:19 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetTriggerMinimumQuietTimeMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the minimum quiet time used for triggering.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the measurement computes the minimum quiet time used for triggering.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetTriggerMinimumQuietTimeMode() function in C.</remarks>
<lastupdated>8/12/2014 8:34:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerMinimumQuietTimeMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the minimum quiet time used for triggering.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether the measurement computes the minimum quiet time used for triggering.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetTriggerMinimumQuietTimeMode() function in C.</remarks>
<lastupdated>8/12/2014 8:38:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetTriggerDelay(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerDelay" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the trigger delay time, in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the trigger delay, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetTriggerDelay() function in C.</remarks>
<lastupdated>7/4/2014 9:52:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerDelay(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerDelay" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the trigger delay time, in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the trigger delay time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetTriggerDelay() function in C.</remarks>
<lastupdated>8/12/2014 8:38:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType" nireturnvaluetype="System.Int32">
      <summary>
Gets the type of reference trigger to use for signal acquisition. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the type of reference trigger to use for signal acquisition. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetTriggerType() function in C.</remarks>
<lastupdated>7/4/2014 9:55:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType" nireturnvaluetype="System.Int32">
      <summary>
Sets the type of reference trigger to use for signal acquisition. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the type of reference trigger to use for signal acquisition. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetTriggerType() function in C.</remarks>
<lastupdated>8/12/2014 8:39:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetReferenceLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference level, in dBm, which represents the maximum expected power of the RF input signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the reference level, in dBm, which represents the maximum expected power of the RF input signal.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetReferenceLevel() function in C.</remarks>
<lastupdated>8/28/2014 12:44:33 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetReferenceLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference level, in dBm, which represents the maximum expected power of the RF input signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the reference level, in dBm, which represents the maximum expected power of the RF input signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetReferenceLevel() function in C.</remarks>
<lastupdated>8/28/2014 12:34:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetExternalAttenuation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the attenuation, in dB, of a switch (or cable) connected to the RF IN connector of the RF signal analyzer. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the attenuation, in dB.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetExternalAttenuation() function in C.</remarks>
<lastupdated>7/4/2014 9:36:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the attenuation, in dB, of a switch (or cable) connected to the RF IN connector of the RF signal analyzer. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the attenuation, in dB.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>When you set this method  and set the RF Attenuation and IF Attenuation values, 
the appropriate attenuator settings are calculated based on <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" />
and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ConfigureReferenceLevel(System.String,System.Double)" crefType="PartiallyQualified" /> values. In this case, RFmxSpecAn interprets the reference level as the 
maximum expected power level of the signal at the input of the external gain device. For more 
information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the NI RF Vector Signal Analyzers Help.
This method maps to the RFmxSpecAn_SetExternalAttenuation() function in C.</remarks>
<lastupdated>1/9/2015 11:25:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetCenterFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the expected carrier frequency, in hertz (Hz), of the RF signal that needs to be acquires. The signal analyzer tunes to this frequency.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the expected carrier frequency, in Hz, of the RF signal that needs to be acquires. The signal analyzer tunes to this frequency.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetCenterFrequency() function in C.</remarks>
<lastupdated>8/28/2014 12:49:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetCenterFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the expected carrier frequency, in hertz (Hz), of the RF signal that needs to be acquired. The signal analyzer tunes to this frequency.

</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the expected carrier frequency, in Hz, of the RF signal that needs to be acquired. The signal analyzer tunes to this frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetCenterFrequency() function in C.</remarks>
<lastupdated>8/28/2014 12:42:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetResultFetchTimeout(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetResultFetchTimeout" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the time, in seconds, to wait before results are available. Set this value to a time longer than expected for fetching the measurement. A value of -1 specifies that the RFmx driver waits until the measurement is complete.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the time, in seconds, to wait before results are available. Set this value to a time longer than expected for fetching the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetResultFetchTimeout() function in C.</remarks>
<lastupdated>9/1/2014 11:58:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetResultFetchTimeout(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetResultFetchTimeout" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the time, in seconds, to wait before results are available. Set this value to a time longer than expected for fetching the measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the time, in seconds, to wait before results are available. Set this value to a time longer than expected for fetching the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetResultFetchTimeout() function in C.</remarks>
<lastupdated>8/12/2014 8:38:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAutoLevelInitialReferenceLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAutoLevelInitialReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the initial reference level, in dBm, which the auto level function uses to estimate the peak power of the input signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the initial reference level, in dBm, which the auto level function uses to estimate the peak power of the input signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetAutoLevelInitialReferenceLevel() function in C.</remarks>
<lastupdated>7/4/2014 9:48:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetAutoLevelInitialReferenceLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAutoLevelInitialReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the initial reference level, in dBm, which the auto level function uses to estimate the peak power of the input signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the initial reference level, in dBm, which the auto level function uses to estimate the peak power of the input signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetAutoLevelInitialReferenceLevel() function in C.</remarks>
<lastupdated>7/4/2014 10:36:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetError(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetError" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Gets the latest error code and description.
</summary>
<param name="errorCode">Upon return, contains the latest error code.</param>
<param name="errorDescription">Upon return, contains the latest error description.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetError() function in C.</remarks>
<exclude />
<lastupdated>9/1/2014 11:58:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetWarning(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetWarning" nihasget="0" nihasset="0" niparameters="warningCode,warningDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Retrieves and then clears the warning information for the session.
</summary>
<param name="warningCode">Upon return, contains the warning code for the session.</param>
<param name="warningDescription">Upon return, contains the warning description for the session.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetError() function in C.</remarks>
<lastupdated>26/08/2014 9:54:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetErrorString(System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetErrorString" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="System.Int32,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Converts the status code returned by an RFmxSpecAn function into a string.
</summary>
<param name="errorCode">Specifies an error or warning code.</param>
<param name="errorDescription">Upon return, contains the error description.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetErrorString() function in C.</remarks>
<lastupdated>9/16/2014 1:44:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AbortMeasurements(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AbortMeasurements" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Stops acquisition and measurements associated with signal instance,
which were previously initiated by the Initiate or measurement read methods. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<remarks>Calling this method is optional, unless you want to stop a measurement before it is complete. 
This method executes even if there is an incoming error.</remarks>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_AbortMeasurements() function in C.</remarks>
<lastupdated>9/1/2014 11:54:44 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AutoLevel(System.String,System.Double,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AutoLevel" nihasget="0" nihasset="0" niparameters="selectorString,bandwidth,measurementInterval,referenceLevel" niparametertypes="System.String,System.Double,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Examines the incoming signal to calculate the peak power level and sets it as the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetReferenceLevel(System.String,System.Double@)" crefType="PartiallyQualified" /> method. 
Use this method  to help calculate an approximate setting for the power level for measurements. When using NI 5663, 5665, or 5668R devices, NI recommends that you set an appropriate value for mechanical attenuation before calling the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AutoLevel(System.String,System.Double,System.Double,System.Double@)" crefType="PartiallyQualified" /> method. Setting an appropriate value for mechanical attenuation reduces the number of times the attenuator settings are changed by this method, thus reducing wear and tear, and maximizing the life time of the attenuator.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="bandwidth">Specifies the bandwidth, in hertz (Hz), of the signal to be analyzed.</param>
<param name="measurementInterval">Specifies the acquisition length, in seconds. Use this value to compute the number of samples to acquire from the signal analyzer.</param>
<param name="referenceLevel">Upon return, contains the estimated peak power level, in dBm, of the input signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>
<para>
The <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AutoLevel(System.String,System.Double,System.Double,System.Double@)" /> method performs the following tasks:
<list type="number"><item><description>
Resets the mixer level, mixer level offset and IF output power offset.
</description></item><item><description>
Sets the starting reference level to the maximum reference level supported by the device based on the current RF attenuation, mechanical attenuation and preamp enabled settings.
</description></item><item><description>
Iterates to adjust the reference level based on the input signal peak power. 
</description></item></list></para>
This method maps to the RFmxSpecAn_AutoLevel() function in C.</remarks>
<lastupdated>12/9/2015 10:33:38 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ClearAllNamedResults(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ClearAllNamedResults" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Clears all results for the signal that you specify in the selecorString parameter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ClearAllNamedResults() function in C.</remarks>
<lastupdated>9/16/2014 1:27:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ClearNamedResult(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ClearNamedResult" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Clears a result instance specified by the result name in the selectorString parameter.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ClearNamedResult() function in C.</remarks>
<lastupdated>9/18/2014 3:56:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.CloneSignalConfiguration(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CloneSignalConfiguration" nihasget="0" nihasset="0" niparameters="newSignalName,signalConfiguration" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX" nireturnvaluetype="System.Int32">
      <summary>
Creates a new instance of a signal by copying all the properties from an existing signal instance.
</summary>
<param name="newSignalName">Specifies the name of the new signal. This input accepts the signal name with or without the "signal::" prefix.  
<para>
Example:
</para><para>
"signal::NewSigName"
</para><para>
"NewSigName"
</para></param>
<param name="signalConfiguration">Upon return, contains a new SpecAn signal instance.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CloneSignalConfiguration() function in C.</remarks>
<lastupdated>8/10/2015 4:43:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Commit(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Commit" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Commits settings to the hardware. Calling this method is optional. RFmxSpecAn commits settings to the hardware when you call the RFmxInstrMX Initiate 
or any of the measurement Read methods.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_Commit() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.DeleteSignalConfiguration" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DeleteSignalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>
Deletes the current instance of a signal.
</summary>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_DeleteSignalConfiguration() function in C.</remarks>
<lastupdated>9/16/2014 1:32:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.DisableTrigger(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DisableTrigger" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Configures the device to not wait for a trigger to mark a reference point within a record. 
This method defines the signal triggering as immediate.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_DisableTrigger() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ResetAttribute(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ResetAttribute" nihasget="0" nihasset="0" niparameters="selectorString,attributeId" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId" nireturnvaluetype="System.Int32">
      <summary>
Resets the attribute to its default value.
</summary>
<param name="selectorString">Specifies the selector string for the property being reset. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.</param>
<param name="attributeId">Specifies an attribute identifier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ResetAttribute() function in C.</remarks>
<lastupdated>1/9/2015 4:34:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.ResetToDefault(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ResetToDefault" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Resets a signal to the default values.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ResetToDefault() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SelectMeasurements(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SelectMeasurements" nihasget="0" nihasset="0" niparameters="selectorString,measurement,enableAllTraces" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Specifies the measurements that you want to enable. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="measurement">Specifies the measurement to perform.</param>
<param name="enableAllTraces">
<see langword="True" /> to enable all traces for the selected measurement; otherwise <see langword="False" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SelectMeasurements() function in C.</remarks>
<lastupdated>7/21/2014 1:58:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.CheckMeasurementStatus(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CheckMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,done" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Checks the status of the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="done">
<see langword="True" /> if the measurement is complete; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CheckMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 3:56:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.WaitForMeasurementComplete(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="WaitForMeasurementComplete" nihasget="0" nihasset="0" niparameters="selectorString,timeout" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Waits for the specified number for seconds for all the measurements to complete.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the time, in seconds, for which the method waits for the measurement to complete. A value of -1 specifies that the method waits until the measurement is complete.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_WaitForMeasurementComplete() function in C.</remarks>
<lastupdated>9/18/2014 12:04:04 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Initiate(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Initiate" nihasget="0" nihasset="0" niparameters="selectorString,resultName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">
      <summary>
Initiates all enabled measurements. Call this method after configuring the signal and measurement. This method asynchronously launches measurements in the background and immediately returns to the caller program. To get the status of measurements, you can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.CheckMeasurementStatus(System.String,System.Boolean@)" /> method.
</summary>
<param name="selectorString">Specifies a selector string comprising the result name. The result name can either be specified through this input or the resultName parameter.If you do not specify the result name in this input, either the result name specified by resultName parameter or the default result instance is used. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="resultName">Specifies a selector string comprising the result name. The result name can either be specified through this input or the resultName parameter.If you do not specify the result name in this input, either the result name specified by resultName parameter or the default result instance is used. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_Initiate() function in C.</remarks>
<lastupdated>9/11/2015 10:31:29 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SendSoftwareEdgeTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SendSoftwareEdgeTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>
Sends a trigger to the device when you configure to choose a software version of a trigger and the device is waiting for the trigger to be sent. You can also use this method to override a hardware trigger.
</summary>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SendSoftwareEdgeTrigger() function in C.</remarks>
<lastupdated>7/3/2014 3:55:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AnalyzeIQ(System.String,System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},System.Boolean,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeIQ" nihasget="0" nihasset="0" niparameters="selectorString,resultName,iq,reset,averagingDone" niparametertypes="System.String,System.String,NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Performs the enabled measurements on the I/Q complex waveform that you specify in the <em>iq</em> parameter. Call this method  after you configure the signal and measurement properties. You can fetch measurement results using the Fetch methods. Use this method only if the RFmxInstrMX.GetRecommendedAcquisitionType  method value is either <format type="bold">IQ</format> or <format type="bold">IQ or Spectral</format>. This method is supported only when the RFmxInstr session is created with option string "AnalysisOnly=1".
<note type="note">
Query the  RFmxInstrMX.GetRecommendedAcquisitionType method after calling the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Commit(System.String)" /> method.
</note></summary>
<param name="selectorString">Specifies a selector string comprising the result name. The result name can either by specified through this input or the <em>resultName</em> input.  If you do not specify the result name in this input, either the result name specified by the <em>resultName</em> input or the default result instance is used. <br /><br />
Example:<br />""<br />"result::r1" <br /></param>
<param name="resultName">Specifies the name to be associated with measurement results. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. This input accepts the result name with or without the "result:" prefix. <br /><br />
Example:<br />""<br />"result::r1"<br />"r1"  </param>
<param name="iq">Specifies the data for a complex IQ waveform including the start, delta, and actual values. 
</param>
<param name="reset"> Resets the measurement averaging. If you enable averaging, set this parameter to TRUE for first record and FALSE for subsequent records. 
</param>
<param name="averagingDone">Indicates whether averaging on all the enabled measurments is complete. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_AnalyzeIQ() function in C.</remarks>
<lastupdated>12/23/2015 3:10:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.AnalyzeSpectrum(System.String,System.String,NationalInstruments.Spectrum{System.Single},System.Boolean,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,resultName,spectrum,reset,averagingDone" niparametertypes="System.String,System.String,NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Performs the enabled measurements on the spectrum that you specify in the <em>spectrum</em> parameter. Call this method  after you configure the signal and measurement properties. You can fetch measurement results using the Fetch methods. Use this method only if the RFmxInstrMX.GetRecommendedAcquisitionType  method value is either <format type="bold">Spectral</format> or <format type="bold">IQ or Spectral</format>. This method is supported only when the RFmxInstr session is created with option string "AnalysisOnly=1". 
<note type="note">
Query the  RFmxInstrMX.GetRecommendedAcquisitionType method after calling the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Commit(System.String)" /> method.
</note></summary>
<param name="selectorString">Specifies a selector string comprising the result name. The result name can either by specified through this input or the <em>resultName</em> input.  If you do not specify the result name in this input, either the result name specified by the <em>resultName</em> input or the default result instance is used. <br /><br />
Example:<br />""<br />"result::r1" </param>
<param name="resultName">Specifies the name to be associated with measurement results. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. This input accepts the result name with or without the "result:" prefix. <br /><br />
Example:<br />""<br />"result::r1"<br />"r1"  </param>
<param name="spectrum">Specifies the data for a Spectrum including the start, delta, and actual values. </param>
<param name="reset"> Resets the measurement averaging. If you enable averaging, set this parameter to TRUE for first record and FALSE for subsequent records. 
</param>
<param name="averagingDone">Indicates whether averaging on all the enabled measurments is complete. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_AnalyzeSpectrum() function in C.</remarks>
<lastupdated>12/23/2015 3:11:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildCarrierString" nihasget="0" nihasset="0" niparameters="resultName,carrierNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the carrier string to use as the selector string with the SEM, ACP, and CHP carrier configuration or fetch properties and methods.
</summary>
<param name="resultName">Specifies the result name for building the selector string.</param>
<param name="carrierNumber">Specifies the carrier number for building the selector string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>6/16/2015 1:59:08 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildHarmonicString" nihasget="0" nihasset="0" niparameters="resultName,harmonicNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the selector string to use with Harmonics configuration or fetch methods. 
</summary>
<param name="resultName">Specifies the result name for building the selector string.</param>
<param name="harmonicNumber">Specifies the harmonic number for building the selector string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>9/17/2014 6:03:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildMarkerString" nihasget="0" nihasset="0" niparameters="resultName,markerNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates a selector string for use with marker configuration or fetch methods.
</summary>
<param name="resultName">Specifies the result name for building the selector string.</param>
<param name="markerNumber">Specifies the marker number for building the selector string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>7/23/2014 11:41:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildOffsetString" nihasget="0" nihasset="0" niparameters="resultName,offsetNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the offset string to use as the selector string with SEM and ACP offset configuration or fetch methods.
</summary>
<param name="resultName">Specifies the result name for building the selector string.</param>
<param name="offsetNumber">Specifies the offset number for building the selector string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>6/29/2015 2:28:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeSpurString(System.String,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildRangeSpurString" nihasget="0" nihasset="0" niparameters="resultName,rangeNumber,spurNumber" niparametertypes="System.String,System.Int32,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the selector string for use with Spurious emissions (Spur) measurement results or fetch methods. 
</summary>
<param name="resultName">Specifies the name of the result. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. An empty string refers to the default result instance.
</param>
<param name="rangeNumber">Specifies the range number.</param>
<param name="spurNumber">Specifies the Spur number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>6/30/2015 8:45:48 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildRangeString" nihasget="0" nihasset="0" niparameters="resultName,rangeNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates a selector string for use with Spurious emissions (Spur) configuration or fetch methods. 
</summary>
<param name="resultName">Specifies the result name for building the selector string.</param>
<param name="rangeNumber"> Specifies the range number for building the range string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>7/3/2014 3:55:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildResultString" nihasget="0" nihasset="0" niparameters="resultName" niparametertypes="System.String" nireturnvaluetype="System.String">
      <summary>
Creates selector string for use with configuration or fetch.
</summary>
<param name="resultName">Specifies the result name for building the selector string. This input accepts the result name with or without the "result::" prefix. Example: "", "result::r1", "r1".</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>7/3/2014 3:55:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildCarrierString2" nihasget="0" nihasset="0" niparameters="selectorString,carrierNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the carrier string to use as the selector string with the SEM, ACP, and CHP carrier configuration or fetch properties and methods.
</summary>
<param name="selectorString">Specifies the selector string comprising the result name. Example: "", "result::r1".</param>
<param name="carrierNumber">Specifies the carrier number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>6/16/2015 1:59:08 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildHarmonicString2" nihasget="0" nihasset="0" niparameters="selectorString,harmonicNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the selector string to use with Harmonics configuration or fetch methods. 
</summary>
<param name="selectorString">Specifies the selector string comprising the result name. Example: "", "result::r1".</param>
<param name="harmonicNumber">Specifies the harmonic number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>9/17/2014 6:03:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildMarkerString2" nihasget="0" nihasset="0" niparameters="selectorString,markerNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates a selector string for use with marker configuration or fetch methods.
</summary>
<param name="selectorString">Specifies the selector string comprising the result name. Example: "", "result::r1".</param>
<param name="markerNumber">Specifies the marker number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>7/23/2014 11:41:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildOffsetString2" nihasget="0" nihasset="0" niparameters="selectorString,offsetNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the offset string to use as the selector string with SEM and ACP offset configuration or fetch methods.
</summary>
<param name="selectorString">Specifies the selector string comprising the result name. Example: "", "result::r1".</param>
<param name="offsetNumber">Specifies the offset number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>6/29/2015 2:28:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildSpurString2" nihasget="0" nihasset="0" niparameters="selectorString,spurNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the selector string for use with Spurious emissions (Spur) measurement results or fetch methods. 
</summary>
<param name="selectorString">Specifies the selector string comprising the result name and range number. You can also pass the return value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method as an input to this parameter. Example: "range0", "result::r1/range0".</param>
<param name="spurNumber">Specifies the Spur number.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>9/18/2015 9:56:27 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildRangeString2" nihasget="0" nihasset="0" niparameters="selectorString,rangeNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates a selector string for use with spurious emissions (Spur) configuration or fetch methods. 
</summary>
<param name="selectorString">Specifies the selector string comprising the result name. Example: "", "result::r1".</param>
<param name="rangeNumber"> Specifies the range number for building the selector string.</param>
<returns>Upon return, contains the selector string created by this method.</returns>
<lastupdated>9/20/2015 7:21:32 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BuildIntermodString" nihasget="0" nihasset="0" niparameters="selectorString,intermodNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">
      <summary>
Creates the intermod string to use as the selector string with the IM configuration or fetch methods and methods.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.  If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="intermodNumber">Specifies the intermod number for building the selector string.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAttributeDouble(System.String,System.Int32,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDouble" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the value of a Double attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Passes the ID of an attribute.</param>
<param name="value">Upon return, contains a value of the specified attribute ID. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetAttributeF64() function in C.</remarks>
<lastupdated>1/12/2015 3:00:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAttributeInt(System.String,System.Int32,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeInt" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the value of an RFmx 32-bit integer (int32) attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Upon return, contains a value of the specified attribute ID.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetAttributeI32() function in C.</remarks>
<lastupdated>1/12/2015 3:00:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAttributeString(System.String,System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeString" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.String" nireturnvaluetype="System.Int32">
      <summary>
Gets the value of a of an RFmx string.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Upon return, contains a value of the specified attribute ID. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetAttributeString() function in C.</remarks>
<lastupdated>1/12/2015 3:00:44 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAttributeBool(System.String,System.Int32,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeBool" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets the value of a Bool attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Upon return, contains a value of the specified attribute ID.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<lastupdated>1/12/2015 3:01:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetAttributeDouble(System.String,System.Int32,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeDouble" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the value of a Double attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Specifies the value to which you want to set the attribute. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetAttributeF64() function in C.</remarks>
<lastupdated>1/12/2015 3:00:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetAttributeInt(System.String,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeInt" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the value of a Int attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Specifies the value to which you want to set the attribute. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetAttributeI32() function in C.</remarks>
<lastupdated>1/12/2015 3:01:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetAttributeString(System.String,System.Int32,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeString" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.String" nireturnvaluetype="System.Int32">
      <summary>
Sets the value of a String attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Specifies the value to which you want to set the attribute. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SetAttributeString() function in C.</remarks>
<lastupdated>1/12/2015 3:01:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetAttributeBool(System.String,System.Int32,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeBool" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets the value of a Bool attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.
</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Specifies the value to which you want to set the attribute. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<lastupdated>1/12/2015 3:00:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetAttributeSingleArray(System.String,System.Int32,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeSingleArray" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the value of a Single array attribute.
</summary>
<param name="selectorString">Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx SpecAn Help for more information about configuring the selector string.</param>
<param name="attributeIdentifier">Specifies the ID of an attribute.</param>
<param name="value">Contains the value of the specified attribute ID. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_GetAttributeF32Array() function in C.</remarks>
<lastupdated>1/12/2015 3:00:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>
Deletes the signal configuration if it is not the default signal configuration and clears any trace of the current signal configuration, if any.
</summary>
<remarks>You can call this method safely more than once, even if the signal is already deleted.</remarks>
<lastupdated>8/12/2014 8:28:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetLimitedConfigurationChange(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange" nireturnvaluetype="System.Int32">
      <summary>
Gets the set of properties that are considered by NI-RFmx in the locked signal configuration state.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the set of properties that are considered by NI-RFmx in the locked signal configuration state.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>If your test system performs the same measurement at multiple frequencies and/or power levels repeatedly, enabling this method can help achieve faster measurements. When you set this method to a value other than <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" />, the NI-RFmx driver will use an optimized code path and skip some checks. Because RFmx skips some checks when you use this method, you need to be aware of the limitations of this feature, which are listed in the Limitations of the Limited Configuration Change Property topic. 
You can also use this property to lock a specific instrument configuration for a signal so that every time that you initiate the signal, NI-RFmx applies the RFmxInstr properties from a locked configuration.
NI recommends you use this method in conjunction with named signal configurations. Create named signal configurations for each measurement configuration in your test program and set this method to a value other than <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" />,  for one or more of the named signal configurations. This allows RFmx to precompute the acquisition settings for your measurement configurations and re-use the precomputed settings each time you initiate the measurement. You do not need to use this method if you create named signals for all the measurement configurations in your test program during test sequence initialization and do not change any RFInstr or personality properties while testing each device under test. RFmx automatically optimizes that use case.
Specify the named signal configuration you are setting this method in the selector string input. This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.LimitedConfigurationChange" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetLimitedConfigurationChange(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange" nireturnvaluetype="System.Int32">
      <summary>
Sets the set of properties that are considered by NI-RFmx in the locked signal configuration state.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the set of properties that are considered by NI-RFmx in the locked signal configuration state.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>If your test system performs the same measurement at multiple frequencies and/or power levels repeatedly, enabling this method can help achieve faster measurements. When you set this method to a value other than <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" />, the NI-RFmx driver will use an optimized code path and skip some checks. Because RFmx skips some checks when you use this method, you need to be aware of the limitations of this feature, which are listed in the Limitations of the Limited Configuration Change Property topic. 
You can also use this property to lock a specific instrument configuration for a signal so that every time that you initiate the signal, NI-RFmx applies the RFmxInstr properties from a locked configuration.
NI recommends you use this method in conjunction with named signal configurations. Create named signal configurations for each measurement configuration in your test program and set this method to a value other than <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" />,  for one or more of the named signal configurations. This allows RFmx to precompute the acquisition settings for your measurement configurations and re-use the precomputed settings each time you initiate the measurement. You do not need to use this method if you create named signals for all the measurement configurations in your test program during test sequence initialization and do not change any RFInstr or personality properties while testing each device under test. RFmx automatically optimizes that use case.
Specify the named signal configuration you are setting this method in the selector string input.This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.LimitedConfigurationChange" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SignalConfigurationName" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>
Gets the signal configuration name.
</summary>
<value>Returns a string representing the signal configuration name</value>
<lastupdated>8/26/2014 11:30:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SignalConfigurationType" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Type">
      <summary>
Gets the <see cref="T:System.Type"></see> object for RFmxSpecAnMX.
</summary>
<value>Returns the type of signal configuration object.</value>
<lastupdated>8/26/2014 11:30:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Acp" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Acp" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcp">
      <summary>
Gets the RFmxSpecAnMXAcp instance that represents the ACP measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXAcp.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Ccdf" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Ccdf" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdf">
      <summary>
Gets the RFmxSpecAnMXCcdf instance that represents the CCDF measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXCcdf.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Chp" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Chp" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChp">
      <summary>
Gets the RFmxSpecAnMXChp instance that represents the CHP measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXChp.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Fcnt" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fcnt" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcnt">
      <summary>
Gets the RFmxSpecAnMXFcnt instance that represents the frequency count (Fcnt) measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXFcnt.
</value>
<lastupdated>8/26/2014 11:43:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Harm" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Harm" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarm">
      <summary>
Gets the RFmxSpecAnMXHarm instance that represents the Harmonics measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXHarm.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Obw" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Obw" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObw">
      <summary>
Gets the RFmxSpecAnMXObw instance that represents the OBW measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXObw.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Sem" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Sem" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSem">
      <summary>
Gets the RFmxSpecAnMXSem instance that represents the SEM measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXSem.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Spectrum" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Spectrum" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrum">
      <summary>
Gets the RFmxSpecAnMXSpectrum instance that represents the Spectrum measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXSpectrum.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Spur" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Spur" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpur">
      <summary>
Gets the RFmxSpecAnMXSpur instance that represents the Spur measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXSpur.
</value>
<lastupdated>30-Jun-14 4:51:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Txp" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Txp" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxp">
      <summary>
Gets the RFmxSpecAnMXTxp instance that represents the TXP measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXTxp.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Marker" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Marker" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarker">
      <summary>
Gets the RFmxSpecAnMXMarker instance that represents the Marker measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXMarker.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Ampm" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Ampm" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpm">
      <summary>
Gets the RFmxSpecAnMXAmpm instance that represents the AMPM measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXAmpm.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.Dpd" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Dpd" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpd">
      <summary>
Gets the RFmxSpecAnMXDpd instance that represents the DPD measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXDpd.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.IQ" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQ" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQ">
      <summary>
Gets the RFmxSpecAnMXIQ instance that represents the I/Q measurement.
</summary>
<value>
Returns an object of type RFmxSpecAnMXIQ.
</value>
<lastupdated>7/6/2015 10:14:03 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.IM" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IM" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIM">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIM" crefType="PartiallyQualified" /> instance that represents the IM measurement.
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.NF" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NF" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNF">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNF" crefType="PartiallyQualified" /> instance that represents the NF measurement.
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.IsDisposed" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IsDisposed" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Gets a value that indicates whether the signal has been disposed.
</summary>
<value>
<see langword="true" /> if the session is disposed; otherwise,  <see langword="false" />.
</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.PhaseNoise" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoise" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoise">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoise" crefType="PartiallyQualified" /> instance that represents the PhaseNoise measurement.
</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdfConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the CCDF measurement. 
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition time, in seconds, for the complementary cumulative distribution function (CCDF) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="measurementInterval">Specifies the acquisition time, in seconds, for the measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFCfgMeasurementInterval() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.ConfigureNumberOfRecords(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfRecords" nihasget="0" nihasset="0" niparameters="selectorString,numberOfRecords" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of acquisitions used for the complementary cumulative distribution function (CCDF) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="numberOfRecords"> Specifies the number of acquisitions used for the CCDF measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFCfgNumberOfRecords() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.ConfigureRbwFilter(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbw,rbwFilterType,rrcAlpha" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter to measure the power statistics of the signal as seen through this filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to measure the signal.  </param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.</param>
<param name="rrcAlpha">Specifies the roll-off factor for the root-raised-cosine (RRC) filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFCfgRBWFilter() function in C.</remarks>
<lastupdated>7/5/2014 1:57:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.ConfigureThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,thresholdLevel,thresholdType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold level for the samples that need to be considered for the complementary cumulative distribution function (CCDF) measurement. Enable the threshold when analyzing burst signals or signals with dead time.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="thresholdEnabled">Specifies whether to enable thresholding of the acquired samples to be used for the measurement.</param>
<param name="thresholdLevel">Specifies either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType)" crefType="PartiallyQualified" /> method.  </param>
<param name="thresholdType">Specifies the reference for the power level used for thresholding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFCfgThreshold() function in C.</remarks>
<lastupdated>1/9/2015 11:39:35 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the complementary cumulative distribution function (CCDF) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the acquisition time, in seconds, for the CCDF measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetMeasurementInterval() function in C.</remarks>
<lastupdated>7/5/2014 2:00:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the complementary cumulative distribution function    (CCDF) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the acquisition time, in seconds, for the CCDF measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetMeasurementInterval() function in C.</remarks>
<lastupdated>8/12/2014 9:06:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for complementary cumulative    distribution function (CCDF) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for CCDF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 2:00:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for complementary cumulative    distribution function (CCDF) measurement.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the maximum number of threads used for parallelism for CCDF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 9:06:46 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetNumberOfRecords(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfRecords" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for the complementary cumulative distribution function    (CCDF) measurement.   
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for the CCDF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetNumberOfRecords() function in C.</remarks>
<lastupdated>7/5/2014 2:00:31 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetNumberOfRecords(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfRecords" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for the complementary cumulative distribution function    (CCDF) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of acquisitions used for the CCDF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetNumberOfRecords() function in C.</remarks>
<lastupdated>8/12/2014 9:07:00 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the complementary cumulative distribution function (CCDF)    measurement is enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the CCDF measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:47:35 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the complementary cumulative distribution function (CCDF)    measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the CCDF measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/12/2014 9:06:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the    complementary cumulative distribution function (CCDF) measurement are enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the CCDF measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:47:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the    complementary cumulative distribution function (CCDF) measurement.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the CCDF measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 9:05:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetRbwFilterRrcAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetRBWFilterRRCAlpha() function in C.</remarks>
<lastupdated>7/5/2014 2:00:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetRbwFilterRrcAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetRBWFilterRRCAlpha() function in C.</remarks>
<lastupdated>8/12/2014 9:07:09 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 2:00:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 9:07:05 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetRBWFilterType() function in C.</remarks>
<lastupdated>7/5/2014 2:01:11 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 9:07:16 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetThresholdLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets either the relative or absolute threshold power level.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains either the relative or absolute threshold power level.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetThresholdLevel() function in C.</remarks>
<lastupdated>7/28/2014 12:20:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetThresholdLevel(System.String,System.Double@)" crefType="PartiallyQualified" /> method. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetThresholdLevel(System.String,System.Double@)" crefType="PartiallyQualified" /> method. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetThresholdLevel() function in C.</remarks>
<lastupdated>1/9/2015 11:39:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether thresholding of the acquired samples to be used for the complementary    cumulative distribution function (CCDF) measurement is enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether thresholding of the acquired samples to be used for the CCDF measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetThresholdEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:48:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable thresholding of the acquired samples to be used for the complementary    cumulative distribution function (CCDF) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable thresholding of the acquired samples to be used for the CCDF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetThresholdEnabled() function in C.</remarks>
<lastupdated>8/12/2014 9:07:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the power level used for thresholding.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the reference for the power level used for thresholding. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetThresholdType() function in C.</remarks>
<lastupdated>7/5/2014 2:02:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the power level used for thresholding.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the reference for the power level used for thresholding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFSetThresholdType() function in C.</remarks>
<lastupdated>8/12/2014 9:07:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the absolute limit threshold is a flat line or a line with a slope. 
</summary>
<lastupdated>7/10/2014 11:58:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The line specified by the values that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> 
and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitStop(System.String,System.Double)" crefType="PartiallyQualified" /> methods as the two ends is considered as the threshold.
</summary>
<lastupdated>1/9/2015 1:43:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Couple" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The two ends of the line are coupled to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the offset segment for spectral emission mask (SEM) measurement.
</summary>
<lastupdated>7/10/2014 10:57:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the offset segment for the SEM measurement.
</summary>
<lastupdated>7/10/2014 10:57:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the offset segment for the SEM measurement.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for the Harmonics measurement. The averaged power trace is used for the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power trace is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power trace is averaged in a logarithm scale.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power trace is averaged.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The maximum instantaneous power in the power trace is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The minimum instantaneous power in the power trace is retained from one acquisition to the next.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired channel after    measuring the channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The channel power of the acquired channel is measured directly.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRrcFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement applies the RRC filter on the acquired channel before measuring the channel power.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the carrier to be used as power reference to measure the offset channel relative power. The offset channel power is measured only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetPowerReferenceCarrier(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" crefType="PartiallyQualified" />.</summary>
<lastupdated>1/9/2015 1:36:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Closest" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Closest" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the power measured in the carrier closest to the offset channel center frequency, as the power reference.
</summary>
<lastupdated>7/10/2014 10:02:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Highest" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Highest" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the highest power measured among all the active carriers as the power reference.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Composite" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Composite" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sum of powers measured in all the active carriers as the power reference.
</summary>
<lastupdated>7/10/2014 10:02:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Specific" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Specific" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the power measured in the carrier that has an index specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetPowerReferenceSpecific(System.String,System.Int32)" crefType="PartiallyQualified" /> method, as the power reference.
</summary>
<lastupdated>1/9/2015 1:36:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch the I/Q measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>7/6/2015 10:15:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQResults.GetRecordsDone(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRecordsDone" nihasget="0" nihasset="0" niparameters="selectorString,recordsDone" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Fetches the number of records that RFmx has acquired.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="recordsDone">Upon return, contains the number of records that RFmx has acquired.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetRecordsDone() function in C.</remarks>
<lastupdated>9/11/2015 11:37:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQResults.FetchData(System.String,System.Double,System.Int32,System.Int64,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchData" nihasget="0" nihasset="0" niparameters="selectorString,timeout,recordToFetch,samplesToRead,data" niparametertypes="System.String,System.Double,System.Int32,System.Int64,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches I/Q data from a single record in an acquisition.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="recordToFetch">Specifies the record to retrieve. Record numbers are zero-based. </param>
<param name="samplesToRead">Specifies the number of samples to fetch. A value of -1 specifies that RFmx fetches all samples.</param>
<param name="data">Returns the data acquired by the I/Q measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_IQFetchData() function in C.</remarks>
<lastupdated>9/11/2015 11:37:51 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdUserDpdModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the DPD model for applying DPD when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<lastupdated>12/19/2014 4:55:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.LookupTable" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LookupTable" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the complex gain coefficients applied while performing digital predistortion to linearize systems with negligible memory effects.
</summary>
<lastupdated>12/12/2014 3:57:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MemoryPolynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the memory polynomial predistortion coefficients used to linearize systems with moderate memory effects.
</summary>
<lastupdated>12/12/2014 3:57:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GeneralizedMemoryPolynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the generalized memory polynomial predistortion coefficients used to linearize systems with significant memory effects.
</summary>
<lastupdated>12/12/2014 3:57:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpd" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a DPD measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:17 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpd.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of DPD measurement.
</summary>
<lastupdated>12/9/2014 5:11:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpd.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve the DPD measurement results.
</summary>
<lastupdated>1/7/2015 4:00:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpd.ApplyDpd" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ApplyDpd" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd" crefType="PartiallyQualified" /> instance that provides methods to apply DPD measurements. </summary>
<lastupdated>1/12/2015 2:02:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
<lastupdated>7/10/2014 10:15:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3dB bandwidth of the RBW filter.
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the bin width of the spectrum 
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition.BandwidthDefinitionEnbw" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionEnbw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the ENBW bandwidth of the RBW filter. When you set the Spur  RBW Filter Type method to FFT Based, RBW is the ENBW  bandwidth of the window specified by the Spur FFT Window method.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFYFactorMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Measure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Measure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The noise figure (NF) measurement computes the noise characteristics of the DUT, compensating for the noise figure of the analyzer.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Calibrate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement computes the noise characteristics of the analyzer.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the NF measurement results.
</summary>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetDutNoiseFigure(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutNoiseFigure" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the noise figures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the noise figures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutNoiseFigure" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetDutNoiseTemperature(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutNoiseTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the equivalent thermal noise temperatures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the equivalent thermal noise temperatures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutNoiseTemperature" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetDutGain(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the available gains of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the available gains of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutGain" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetAnalyzerNoiseFigure(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAnalyzerNoiseFigure" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the noise figures of the analyzer measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the noise figures of the analyzer measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsAnalyzerNoiseFigure" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetMeasurementYFactor(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementYFactor" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the measurement Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the measurement Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsMeasurementYFactor" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetCalibrationYFactor(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationYFactor" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the calibration Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains an array of the calibration Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsCalibrationYFactor" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetYFactorHotPower(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorHotPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is enabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is enabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsYFactorHotPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetYFactorColdPower(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorColdPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is disabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is disabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsYFactorColdPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.GetColdSourcePower(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourcePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the power measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to Cold-source.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the power measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to Cold-source.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsColdSourcePower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.FetchDutNoiseFigureAndGain(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchDutNoiseFigureAndGain" nihasget="0" nihasset="0" niparameters="selectorString,timeout,dutNoiseFigure,dutNoiseTemperature,dutGain" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the DUT noise figure, noise temperature and gain results.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="dutNoiseFigure">Upon return, contains  an array of the noise figures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.
			<br /></param>
<param name="dutNoiseTemperature">Upon return, contains  an array of the equivalent thermal noise temperatures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.
			<br /></param>
<param name="dutGain">Upon return, contains  an array of the available gains of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.FetchYFactors(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchYFactors" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementYFactor,calibrationYFactor" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Returns the measurement Y-factor and calibration Y-factor values.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="measurementYFactor">Upon return, contains  the array of measurement Y-Factor values measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. This method returns a valid result only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.
			<br /></param>
<param name="calibrationYFactor">Upon return, contains  the array of calibration Y-Factor values measured at the frequencies specified by the NF Freq List method. This value is expressed in dB. This method returns a valid result only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.
		<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.FetchYFactorPowers(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchYFactorPowers" nihasget="0" nihasset="0" niparameters="selectorString,timeout,hotPower,coldPower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the hot and cold powers measured when the Y-Factor based noise figure (NF) measurement is performed.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="hotPower">Upon return, contains  an array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is enabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.
			<br /></param>
<param name="coldPower">Upon return, contains  an array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is disabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.FetchAnalyzerNoiseFigure(System.String,System.Double,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAnalyzerNoiseFigure" nihasget="0" nihasset="0" niparameters="selectorString,timeout,analyzerNoiseFigure" niparametertypes="System.String,System.Double,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the noise figure of the analyzer.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="analyzerNoiseFigure">Upon return, contains  an array of the noise figure values of the analyzer measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.
		<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults.FetchColdSourcePower(System.String,System.Double,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchColdSourcePower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,coldSourcePower" niparametertypes="System.String,System.Double,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power measured by the analyzer when the cold source based noise figure (NF) measurement is performed.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="coldSourcePower">Upon return, contains  the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.
<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measures single-tone amplitudes accurately. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes closely-spaced sine waves. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. This windowing is useful for time-frequency analysis. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Separates two tones with frequencies close to each other but with widely-differing amplitudes.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the measurement. 
</summary>
<lastupdated>7/10/2014 3:50:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that all samples are considered for the measurement.
</summary>
<lastupdated>7/10/2014 3:50:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the samples above the threshold level specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdLevel(System.String,System.Double)" crefType="PartiallyQualified" /> method are considered for the measurement.
</summary>
<lastupdated>1/9/2015 1:45:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpur" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpur" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a Spur measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpur.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of Spur measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXSpurConfiguration</value>
<lastupdated>1/9/2015 1:25:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpur.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve Spur measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXSpurResults</value>
<lastupdated>1/9/2015 1:25:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the Spectrum measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingtype" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="averagingEnabled"> Specifies whether to enable averaging for the measurement.  </param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingtype">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 1:23:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures window and FFT to obtain a spectrum for the Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="fftWindow">Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectrum topic for more information about FFT window types.</param>
<param name="fftPadding">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. This parameter is used only when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgFFT() function in C.</remarks>
<lastupdated>8/13/2014 8:17:13 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureFrequencyStartStop(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyStartStop" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the start frequency and stop frequency for the Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="startFrequency">Specifies the start frequency, in hertz (Hz), for the spectrum measurement.</param>
<param name="stopFrequency">Specifies the stop frequency, in Hz, for the Spectrum measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgFrequencyStartStop() function in C.</remarks>
<lastupdated>7/21/2014 10:44:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigurePowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,powerUnits" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Configures the units for the absolute power.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="powerUnits"> Specifies the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgPowerUnits() function in C.</remarks>
<lastupdated>7/7/2014 2:40:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the Spectrum topic for more details on RBW and sweep time. </param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType"> Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 1:24:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSpan" nihasget="0" nihasset="0" niparameters="selectorString,span" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), around the center frequency, to acquire for the Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="span"> Specifies the frequency range, in hertz (Hz), around the center frequency, to acquire for the Spectrum  measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgSpan() function in C.</remarks>
<lastupdated>7/21/2014 10:45:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time. </param>
<param name="sweepTimeInterval">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumCfgSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 1:24:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetAveragingCount() function in C.</remarks>
<lastupdated>7/7/2014 2:46:38 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 1:24:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable averaging for the Spectrum measurement. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, indicates whether to enable averaging for the Spectrum measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetAveragingEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:17:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the Spectrum measurement. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies whether to enable averaging for the Spectrum measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:19:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spectrum measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetAveragingType() function in C.</remarks>
<lastupdated>7/7/2014 2:47:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies averaging type for averaging multiple spectrum acquisitions. The averaged Spectrum is    used for spectrum measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetAveragingType() function in C.</remarks>
<lastupdated>8/13/2014 8:19:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetFFTPadding() function in C.</remarks>
<lastupdated>7/7/2014 2:48:35 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetFFTPadding() function in C.</remarks>
<lastupdated>8/13/2014 8:19:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type used to reduce spectral leakage.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the FFT window type used to reduce spectral leakage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetFFTWindow() function in C.</remarks>
<lastupdated>7/7/2014 2:48:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type used to reduce spectral leakage.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the FFT window type used to reduce spectral leakage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetFFTWindow() function in C.</remarks>
<lastupdated>8/13/2014 8:19:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter applied to the    acquired signal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/7/2014 2:51:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter applied to the    acquired signal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/13/2014 8:20:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the resolution bandwidth (RBW) is computed by the measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the RBW is computed by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/13/2014 8:18:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the resolution bandwidth (RBW) is computed by the measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies whether the RBW is computed by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/13/2014 8:20:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetRBWFilterType() function in C.</remarks>
<lastupdated>7/7/2014 2:51:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the shape of the digital RBW filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetRBWFilterType() function in C.</remarks>
<lastupdated>8/13/2014 8:21:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:51:14 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:52:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetSpan(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), around the center frequency to be acquired for the    measurement.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the frequency range, in hertz (Hz), around the center frequency to be acquired for the    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetSpan() function in C.</remarks>
<lastupdated>7/7/2014 2:52:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), around the center frequency to be acquired for the    measurement.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the frequency range, in hertz (Hz), around the center frequency to be acquired for the    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetSpan() function in C.</remarks>
<lastupdated>8/13/2014 8:21:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for Spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for spectrum measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/21/2014 10:44:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for spectrum measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the maximum number of threads used for parallelism for spectrum measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/13/2014 8:19:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Gets the units for the absolute power.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetPowerUnits() function in C.</remarks>
<lastupdated>7/21/2014 10:41:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Sets the units for the absolute power.</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetPowerUnits() function in C.</remarks>
<lastupdated>8/13/2014 8:20:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether Spectrum measurement is enabled.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if Spectrum measurement is enabled; otherwise <see langword="False" />.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 1:01:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable spectrum measurement.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
<see langword="True" /> to enable SEM measurement; otherwise <see langword="False" />.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:19:46 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, contains the sweep time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetSweepTimeInterval() function in C.</remarks>
<lastupdated>7/7/2014 2:53:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto.False" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 1:25:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Upon return, indicates whether the measurement computes the sweep time. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/13/2014 8:18:38 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">Specifies whether the measurement computes the sweep time. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumSetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/13/2014 8:21:13 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,noiseCompensationEnabled" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures compensation of the channel powers for the inherent noise floor of the signal analyzer. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="noiseCompensationEnabled">Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetVbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetVbwFilterVbwToRbwRatio(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" /> .      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" /> .      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" /> .      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" /> .      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetDetectorType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDetectorType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType" nireturnvaluetype="System.Int32">
      <summary>
Gets the type of detector to be used.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the type of detector to be used.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.None" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetDetectorType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDetectorType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType" nireturnvaluetype="System.Int32">
      <summary>
Sets the type of detector to be used.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the type of detector to be used.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.None" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.GetDetectorPoints(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDetectorPoints" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of trace points after the detector is applied.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of trace points after the detector is applied.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorPoints" crefType="PartiallyQualified" /> attribute.The default value is 1001.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetDetectorPoints(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDetectorPoints" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of trace points after the detector is applied.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of trace points after the detector is applied.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorPoints" crefType="PartiallyQualified" /> attribute.The default value is 1001.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureDetector(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDetector" nihasget="0" nihasset="0" niparameters="selectorString,detectorType,detectorPoints" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the detector settings, including detector type and the number of points to be detected.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="detectorType">Specifies the type of detector to be used.</param>
<param name="detectorPoints">Specifies the number of points after the detector is applied.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.ConfigureVbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureVbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,vbwAuto,vbw,vbwToRbwRatio" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the VBW settings including VBW Auto, VBW(Hz) and VBW to RBW ratio.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="vbwAuto">Specifies whether the VBW is expressed directly or computed based on VBW to RBW ratio. This value is expressed in Hz.</param>
<param name="vbw">Specifies the video bandwidth when you set the <em>VBWAuto</em> parameter <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz. <br /></param>
<param name="vbwToRbwRatio">Specifies the VBW to RBW Ratio when you set the <em>VBWAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the Harmonics measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.FetchHarmonicMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchHarmonicMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageRelativePower,averageAbsolutePower,rbw,frequency" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power measured at the harmonic frequency.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. 
Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="averageRelativePower"> Upon return, contains the average power, in dB, relative to the fundamental power measured at the harmonic.</param>
<param name="averageAbsolutePower"> Upon return, contains the average absolute power, in dBm, measured at the harmonic.</param>
<param name="rbw">Upon return, contains the resolution bandwidth (RBW), in hertz (Hz), which is used by the harmonic measurement, for the harmonic.</param>
<param name="frequency"> Upon return, contains the RF frequency, in Hz, of the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmFetchHarmonicMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 4:05:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.FetchHarmonicPowerTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchHarmonicPowerTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,power" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power trace for the Harmonics measurement.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method  waits until the measurement is complete.  </param>
<param name="power">Upon return, contains the power versus time trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmFetchHarmonicPowerTrace() function in C.</remarks>
<lastupdated>9/18/2014 4:05:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.FetchTotalHarmonicDistortion(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalHarmonicDistortion" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalHarmonicDistortion,averageFundamentalPower,fundamentalFrequency" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the total harmonics distortion (THD), measured as a percentage of the power in the fundamental signal. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="totalHarmonicDistortion">Upon return, contains the THD, measured as a percentage of the power in the fundamental signal. THD calculation involves only the harmonics that are enabled.</param>
<param name="averageFundamentalPower"> Upon return, contains the average power, in dBm, measured at the fundamental frequency.</param>
<param name="fundamentalFrequency">Upon return, contains the frequency, in hertz (Hz), used as the fundamental frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmFetchTHD() function in C.</remarks>
<lastupdated>9/18/2014 11:25:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.Read(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalHarmonicDistortion,averageFundamentalPower" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns Harmonics measurement results.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="totalHarmonicDistortion">Upon return, contains the total harmonics distortion (THD), measured as a percentage of the power in the fundamental signal. THD calculation involves only the harmonics that are enabled.</param>
<param name="averageFundamentalPower">Upon return, contains the average power, in dBm, measured at the fundamental frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmRead() function in C.</remarks>
<lastupdated>9/15/2014 4:19:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetHarmonicFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), of the harmonics specified by the selector string.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, of the harmonic specified by the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsHarmonicFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:05:47 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetHarmonicRbw(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicRbw" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the resolution bandwidth (RBW), in hertz (Hz), which is used by the Harmonics measurement,    for the harmonic specified by the selector string.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the RBW, in Hz, which is used by the Harmonics measurement,    for the harmonic specified by the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsHarmonicRBW() function in C.</remarks>
<lastupdated>9/18/2014 4:05:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetHarmonicAverageAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicAverageAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average absolute power, in dBm, measured at the harmonic specified by the selector string.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the average absolute power, in dBm, measured at the harmonic specified by the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsHarmonicAverageAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 4:05:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetHarmonicAverageRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicAverageRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average power, in dB, relative to the fundamental power measured at the harmonic    specified by the selector string.
</summary>
<param name="selectorString">Specifies the result name and harmonic number. Example: "harmonic0", "result::r1/harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the average power, in dB, relative to the fundamental power measured at the harmonic    specified by the selector string.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsHarmonicAverageRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 4:05:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetFundamentalFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), used as the fundamental frequency.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, used as the fundamental frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsFundamentalFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:25:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetAverageFundamentalPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageFundamentalPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average power, in dBm, measured at the fundamental frequency.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the average power, in dBm, measured at the fundamental frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsAverageFundamentalPower() function in C.</remarks>
<lastupdated>9/18/2014 11:25:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.GetTotalHarmonicDistortion(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTotalHarmonicDistortion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the total harmonics distortion (THD) measured in percentage of the power in fundamental.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the THD measured in percentage of the power in fundamental.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetResultsTotalHarmonicDistortion() function in C.</remarks>
<lastupdated>9/18/2014 11:26:44 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults.FetchHarmonicMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchHarmonicMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageRelativePower,averageAbsolutePower,rbw,frequency" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power measured at the harmonic frequency.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method  waits until the measurement is complete.  </param>
<param name="averageRelativePower"> Upon return, contains the array of average power, in dB, relative to the fundamental power measured at the harmonic.</param>
<param name="averageAbsolutePower"> Upon return, contains the array of average absolute power, in dBm, measured at the harmonic.</param>
<param name="rbw">Upon return, contains the array of resolution bandwidth (RBW), in hertz (Hz), which is used by the harmonic measurement, for the harmonic.</param>
<param name="frequency"> Upon return, contains the array of RF frequency, in Hz, of the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmFetchHarmonicMeasurementArray() function in C.</remarks>
<lastupdated>8/12/2014 11:03:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the spectrum measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The spectrum measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> as the number of acquisitions over which the spectrum measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:42:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the absolute limit mask is a flat line or a line with a slope.
</summary>
<lastupdated>7/10/2014 10:45:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The line specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitStop(System.String,System.Double)" crefType="PartiallyQualified" /> method values as the two ends is considered as the mask.
</summary>
<lastupdated>1/9/2015 1:41:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Couple" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The two ends of the line are coupled to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:41:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:19:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:19:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdfThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is relative to the peak power, in dB, of the acquired samples.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is the absolute power, in dBm.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 12:17:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3 dB bandwidth of the RBW filter. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.FftBased" />, RBW is the 3dB bandwidth of the window specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow)" crefType="FullyQualified" />.
</summary>
<lastupdated>9/11/2015 12:25:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the spectrum bin width computed using FFT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.FftBased" />.
</summary>
<lastupdated>9/11/2015 12:26:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital RBW filter.
</summary>
<lastupdated>7/10/2014 3:49:58 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement does not use any RBW filtering.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
<lastupdated>7/10/2014 3:50:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
<lastupdated>7/10/2014 3:50:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:23:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:23:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType.Rrc" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rrc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RRC filter with the roll-off specified by RRC Alpha parameter is used as the RBW filter.
</summary>
<lastupdated>7/10/2014 3:50:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the occupied bandwidth (OBW) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the occupied bandwidth (OBW) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement.  </param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 11:49:12 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureBandwidthPercentage(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureBandwidthPercentage" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthPercentage" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the percentage of the total power that is contained in the occupied bandwidth (OBW). 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="bandwidthPercentage">Specifies the percentage of the total power that is contained in the OBW.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgBandwidthPercentage() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures window and FFT to obtain a spectrum for the occupied bandwidth (OBW) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="fftWindow"> Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectrum topic for more information about FFT window types. </param>
<param name="fftPadding">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgFFT() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the Spectrum topic for more details on RBW and sweep time.</param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 11:49:24 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSpan" nihasget="0" nihasset="0" niparameters="selectorString,span" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), around the center frequency, to acquire for the measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="span"> Specifies the frequency range, in Hz, around the center frequency, to acquire for the measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgSpan() function in C.</remarks>
<lastupdated>6/18/2014 10:13:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time.  </param>
<param name="sweepTimeInterval">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 11:49:37 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.ConfigurePowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,powerUnits" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Configures the units for the absolute power.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="powerUnits">Specifies the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWCfgPowerUnits() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetAveragingCount() function in C.</remarks>
<lastupdated>7/9/2014 11:49:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:49:54 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging for the occupied bandwidth (OBW) measurement is enabled. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether averaging for the OBW measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:00:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the occupied bandwidth (OBW) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether to enable averaging for the OBW measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/12/2014 11:10:06 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for occupied bandwidth (OBW) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for OBW measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetAveragingType() function in C.</remarks>
<lastupdated>7/5/2014 4:11:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for occupied bandwidth (OBW) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for OBW measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetAveragingType() function in C.</remarks>
<lastupdated>8/12/2014 11:10:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetFFTPadding() function in C.</remarks>
<lastupdated>7/21/2014 9:30:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetFFTPadding() function in C.</remarks>
<lastupdated>8/28/2014 1:51:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the FFT window type used to reduce spectral leakage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetFFTWindow() function in C.</remarks>
<lastupdated>7/5/2014 4:12:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the FFT window type used to reduce spectral leakage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetFFTWindow() function in C.</remarks>
<lastupdated>8/12/2014 11:10:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetBandwidthPercentage(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the percentage of the total power that is contained in the frequency range defined by the    occupied bandwidth (OBW).    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the percentage of the total power that is contained in the frequency range defined by the    OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetBandwidthPercentage() function in C.</remarks>
<lastupdated>7/5/2014 4:12:16 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetBandwidthPercentage(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the percentage of the total power that is contained in the frequency range defined by the    occupied bandwidth (OBW).    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the percentage of the total power that is contained in the frequency range defined by the OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetBandwidthPercentage() function in C.</remarks>
<lastupdated>8/12/2014 11:10:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetSpan(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the frequency range, in Hz, around the center frequency, to acquire for the    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetSpan() function in C.</remarks>
<lastupdated>7/5/2014 4:19:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSpan(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the frequency range, in Hz, around the center frequency, to acquire for the    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetSpan() function in C.</remarks>
<lastupdated>8/12/2014 11:11:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for occupied bandwidth (OBW)    measurement.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for OBW    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 4:15:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for occupied bandwidth (OBW)    measurement.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the maximum number of threads used for parallelism for OBW    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 11:10:37 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether occupied bandwidth (OBW) measurement is enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if the OBW measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 10:32:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable occupied bandwidth (OBW) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable OBW measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/20/2014 2:30:47 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the occupied    bandwidth (OBW) are enabled.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the OBW measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 10:31:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the occupied    bandwidth (OBW) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the OBW measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 11:09:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 4:18:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 11:10:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 11:09:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Specifies whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>1/6/2015 3:40:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetRBWFilterType() function in C.</remarks>
<lastupdated>7/5/2014 4:19:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 11:10:57 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:46:11 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:46:47 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the sweep time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetSweepTimeInterval() function in C.</remarks>
<lastupdated>7/5/2014 4:21:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto)" crefType="PartiallyQualified" /> method to    <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto)" crefType="PartiallyQualified" /> method to    <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />.    
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:50:10 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the measurement computes the sweep time. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 11:09:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether the measurement computes the sweep time. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 11:11:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.GetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Gets the units for the absolute power.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetPowerUnits() function in C.</remarks>
<lastupdated>7/5/2014 4:18:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Sets the units for the absolute power.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the units for the absolute power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWSetPowerUnits() function in C.</remarks>
<lastupdated>8/12/2014 11:10:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<lastupdated>7/10/2014 3:17:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a Gaussian response is applied.
</summary>
<lastupdated>7/10/2014 3:17:12 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a flat response is applied.
</summary>
<lastupdated>7/10/2014 3:17:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 4-pole synchronously-tuned response is applied.
</summary>
<lastupdated>7/10/2014 3:17:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 5-pole synchronously-tuned response is applied.
</summary>
<lastupdated>7/10/2014 3:17:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRangeStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates the measurement status for the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that a detected spur in the range is greater than the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurAbsoluteLimit(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that all detected spurs in the range are lower than the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurAbsoluteLimit(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:42:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> methods.
</summary>
<lastupdated>1/9/2015 1:42:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement does not use any RBW filtering.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
<lastupdated>7/10/2014 10:21:42 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter. 
</summary>
<lastupdated>8/12/2014 8:16:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter. 
</summary>
<lastupdated>8/12/2014 8:16:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType.Rrc" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rrc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RRC filter with the roll-off specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetRbwFilterRrcAlpha(System.String,System.Double)" crefType="PartiallyQualified" /> method is used as the RBW filter.
</summary>
<lastupdated>1/9/2015 1:37:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the frequency count (Fcnt) measurement.
</summary>
<lastupdated>7/10/2014 10:20:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The Fcnt measurement uses the value that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the Fcnt measurement is averaged. 
</summary>
<lastupdated>1/9/2015 1:37:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<lastupdated>7/10/2014 10:05:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a Gaussian response is applied.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a flat response is applied.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 4-pole synchronously-tuned response is applied.
</summary>
<lastupdated>7/10/2014 10:05:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
An RBW filter with a 5-pole synchronously-tuned response is applied.
</summary>
<lastupdated>7/10/2014 10:05:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the method for performing the adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The ACP measurement acquires the spectrum using the same signal analyzer setting across frequency bands. Use this value when measurement speed is desirable over higher dynamic range.
</summary>
<lastupdated>9/3/2014 9:42:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.DynamicRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DynamicRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The ACP measurement acquires the spectrum using the hardware-specific optimizations for different frequency bands. 
</summary>
<lastupdated>9/3/2014 9:42:01 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SequentialFft" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The ACP measurement acquires all the samples specified by the ACP Sweep Time method and divides them in to smaller chunks of equal size defined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" crefType="FullyQualified" /> method. 
FFT is computed for each chunk. The resultant FFTs are averaged to get the spectrum used to compute the ACP. 
If the total acquired samples is not an integer multiple of the FFT size, the remaining samples at the end of the acquisition are not used. 
Use this method to optimize for speed. The accuracy of results may be reduced when using this measurement method.
<para>The following methods have limited support when you set the RFmxTdscdmaMXAcpConfiguration.ConfigureMeasurementMethod method to SequentialFft.</para>
<list type="bullet">
<item>
<description>The RFmxSpecAnMXAcpConfiguration.SetRbwFilterAutoBandwidth method will only support True value. </description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetRbwFilterType method will only support FftBased value.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetFftWindow method will only support None and Flat Top value.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto method will only support False value.
</description>
</item>

<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetAveragingCount method will only support a value of 1.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetNoiseCompensationEnabled method will only support False value.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetNumberOfAnalysisThreads method will only support a value of 1.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetAmplitudeCorrectionType Method will only support a value of RFCenterFrequency.
</description>
</item>
<item>
<description>
The RFmxSpecAnMXAcpConfiguration.SetOffsetRelativeAttenuation Method will only support 0.
</description>
</item>
</list>
</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpCarrierMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to consider the carrier power as part of the total carrier power measurement.
</summary>
<lastupdated>7/8/2014 3:28:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Passive" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Passive" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The carrier power is not considered as part of the total carrier power.
</summary>
<lastupdated>7/8/2014 3:51:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Active" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The carrier power is considered as part of the total carrier power.
</summary>
<lastupdated>7/8/2014 3:28:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdIdleDurationPresent" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdIdleDurationPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the waveform contains an idle duration.
</summary>
<lastupdated>12/12/2014 3:53:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdIdleDurationPresent.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform contains an idle duration.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdIdleDurationPresent.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform does not contain an idle duration.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFDutInputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement ignores the ohmic losses.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement accounts for the ohmic losses.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFCalibrationLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement ignores the ohmic losses.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement accounts for the ohmic losses.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the response of the digital RBW filter.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No RBW filtering is performed. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An RBW filter with a Gaussian response is applied. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An RBW filter with a flat response is applied. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An RBW filter with a 4-pole synchronously-tuned response is applied.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An RBW filter with a 5-pole synchronously-tuned response is applied.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
<lastupdated>12/12/2014 3:40:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is relative to the peak power, in dB, of the acquired samples.
</summary>
<lastupdated>12/12/2014 3:40:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is the absolute power, in dBm.
</summary>
<lastupdated>12/12/2014 3:40:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the transmit power (TXP) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement. </param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingType">Specifies the averaging type for averaging the power over multiple acquisitions. The averaged power trace is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 1:33:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition time, in seconds, for the transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="measurementInterval">Specifies the acquisition time, in seconds, for the TXP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPCfgMeasurementInterval() function in C.</remarks>
<lastupdated>8/13/2014 8:33:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.ConfigureRbwFilter(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbw,RbwFilterType,rrcAlpha" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter to measure the power of the signal as seen through this filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to measure the signal.</param>
<param name="RbwFilterType"> Specifies the shape of the digital RBW filter. </param>
<param name="rrcAlpha">Specifies the roll-off factor for the root-raised-cosine (RRC) filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPCfgRBWFilter() function in C.</remarks>
<lastupdated>7/8/2014 9:46:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.ConfigureThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,thresholdLevel,thresholdType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold level for the samples that need to be considered for the transmit power (TXP) measurement. Enable the threshold when analyzing burst signals or signals with dead time.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="thresholdEnabled">Specifies whether to enable thresholding of the acquired samples to be used for the measurement.</param>
<param name="thresholdLevel">Specifies either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType)" crefType="PartiallyQualified" /> method. </param>
<param name="thresholdType">Specifies the reference for the power level used for thresholding. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPCfgThreshold() function in C.</remarks>
<lastupdated>1/9/2015 1:34:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging. </summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetAveragingCount() function in C.</remarks>
<lastupdated>7/8/2014 10:01:01 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Specifies the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetAveragingCount() function in C.</remarks>
<lastupdated>8/13/2014 8:34:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging for the transmit power (TXP) measurement is enabled. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether averaging for the TXP measurement is enabled. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:46:12 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the transmit power (TXP) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable averaging for the TXP measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:34:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Upon return, indicates the averaging type for averaging multiple spectrum acquisitions.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetAveragingType() function in C.</remarks>
<lastupdated>8/13/2014 8:34:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetAveragingType() function in C.</remarks>
<lastupdated>8/13/2014 8:34:57 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetRbwFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetRBWFilterAlpha() function in C.</remarks>
<lastupdated>7/21/2014 11:49:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetRbwFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetRBWFilterAlpha() function in C.</remarks>
<lastupdated>8/13/2014 8:35:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/8/2014 10:30:01 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/13/2014 8:35:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the shape of the digital RBW filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetRBWFilterType() function in C.</remarks>
<lastupdated>7/8/2014 10:40:06 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the shape of the digital RBW filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetRBWFilterType() function in C.</remarks>
<lastupdated>8/13/2014 8:35:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetThresholdLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the relative or absolute threshold power level.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Upon return, contains the relative or absolute threshold power level.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetThresholdLevel() function in C.</remarks>
<lastupdated>7/8/2014 10:42:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the relative or absolute threshold power level.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the relative or absolute threshold power level.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetThresholdLevel() function in C.</remarks>
<lastupdated>8/13/2014 8:35:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether thresholding of the acquired samples to be used for the transmit power    (TXP) measurement is enabled.   
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether thresholding of the acquired samples to be used for the TXP measurement is enabled.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetThresholdEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:47:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable thresholding of the acquired samples to be used for the transmit power    (TXP) measurement.   
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable thresholding of the acquired samples to be used for the TXP measurement.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetThresholdEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:35:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the power level that is used as the threshold. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the reference for the power level that is used as the threshold. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetThresholdType() function in C.</remarks>
<lastupdated>7/8/2014 10:42:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the power level that is used as the threshold. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the reference for the power level that is used as the threshold. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetThresholdType() function in C.</remarks>
<lastupdated>8/13/2014 8:35:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the acquisition time, in seconds, for the TXP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetMeasurementInterval() function in C.</remarks>
<lastupdated>7/8/2014 10:16:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Specifies the acquisition time, in seconds, for the TXP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetMeasurementInterval() function in C.</remarks>
<lastupdated>8/13/2014 8:35:13 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for TXP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/8/2014 10:16:44 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">Specifies the maximum number of threads used for parallelism for TXP measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/13/2014 8:35:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether transmit power (TXP) measurement is enabled.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if SEM measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:46:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable transmit power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value">
<see langword="True" /> to enable SEM measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:35:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the transmit    power (TXP) measurement are enabled.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> the traces to be stored and retrieved after performing the TXP measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:45:53 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the transmit    power (TXP) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the TXP measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:34:38 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetVbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the video bandwidth when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the video bandwidth when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the video bandwidth when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the video bandwidth when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.GetVbwFilterVbwToRbwRatio(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.ConfigureVbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureVbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,vbwAuto,vbw,vbwToRbwRatio" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures VBW settings including the VBW mode, video bandwidth (VBW), and the VBW to RBW ratio.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="vbwAuto">Specifies whether the VBW is expressed directly or computed based on VBW to RBW ratio. This value is expressed in Hz.</param>
<param name="vbw">Specifies the video bandwidth when you set the <em>VBWAuto</em> parameter <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.  <br /></param>
<param name="vbwToRbwRatio">Specifies the VBW to RBW Ratio when you set the <em>VBWAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the spurious emission (Spur) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the spurious emission (Spur) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement. </param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingType"> Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 1:26:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureFftWindowType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFftWindowType" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Configures the FFT window to obtain a spectrum for the spurious emission (Spur) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="fftWindow">Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectrum topic for more information about FFT window types. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgFFTWindowType() function in C.</remarks>
<lastupdated>7/7/2014 3:33:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureNumberOfRanges(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,numberOfRanges" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of ranges.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="numberOfRanges">Specifies the number of ranges.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgNumberOfRanges() function in C.</remarks>
<lastupdated>7/7/2014 3:33:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeAbsoluteLimit(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeAbsoluteLimit" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitMode,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the absolute power limits corresponding to the beginning and end of the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0" You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="absoluteLimitMode">Specifies whether the absolute limit threshold is a flat line or a line with a slope. </param>
<param name="absoluteLimitStart"> Specifies the absolute power limit, in dBm, corresponding to the beginning of the frequency range. The value of this parameter is also set as the absolute power limit for the range when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<param name="absoluteLimitStop">Specifies the absolute power limit, in dBm, corresponding to the end of the frequency range. This parameter is ignored when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeAbsoluteLimit() function in C.</remarks>
<lastupdated>1/9/2015 1:26:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeFrequency(System.String,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeFrequency" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency,rangeEnabled" niparametertypes="System.String,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency start and stop values of the range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="startFrequency">Specifies the start of the frequency range, in hertz (Hz), for the measurement.</param>
<param name="stopFrequency"> Specifies the stop of the frequency range, in Hz, for the measurement. </param>
<param name="rangeEnabled"> Specifies whether to measure the Spurs in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:09:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeNumberOfSpursToReport(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeNumberOfSpursToReport" nihasget="0" nihasset="0" niparameters="selectorString,numberOfSpursToReport" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of Spurs that the measurement should report in the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="numberOfSpursToReport">Specifies the number of Spurs that the measurement should report in the frequency range. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeNumberOfSpursToReport() function in C.</remarks>
<lastupdated>9/18/2014 4:09:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the Spectrum topic for more details on RBW and sweep time.</param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired offset segment, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 1:27:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the attenuation, in dB, relative to the external attenuation. Use this method to compensate for variations in external attenuation when the offset channels are spread wide in frequency.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="relativeAttenuation">Specifies the attenuation, in dB, relative to the external attenuation. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeRelativeAttenuation() function in C.</remarks>
<lastupdated>9/18/2014 4:09:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time.</param>
<param name="sweepTimeInterval">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto.False" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 1:27:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureTraceRangeIndex(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureTraceRangeIndex" nihasget="0" nihasset="0" niparameters="selectorString,traceRangeIndex" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the index of the range used to store and retrieve spurious emission (Spur) traces. When you set this method to -1, the measurement stores and retrieves traces for all enabled ranges. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="traceRangeIndex">Specifies the index of the range used to store and retrieve spurious emission (Spur) traces. When you set this method to -1, the measurement stores and retrieves traces for all enabled ranges.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgTraceRangeIndex() function in C.</remarks>
<lastupdated>9/11/2015 10:23:55 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangePeakCriteria(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangePeakCriteria" nihasget="0" nihasset="0" niparameters="selectorString,threshold,excursion" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the peak threshold and peak excursion criteria which a peak should meet to be classified as a spurious emission (Spur).
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="threshold">Specifies the threshold level, in dBm, above which the measurement detects spurs in the specified range.</param>
<param name="excursion">Specifies the peak excursion value, in dB, used to detect the spurs in the spectrum. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered a spur.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangePeakCriteria() function in C.</remarks>
<lastupdated>7/3/2015 1:48:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeAbsoluteLimitStart(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the absolute power limit, in dBm, corresponding to the beginning of the frequency range.   
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the absolute power limit, in dBm, corresponding to the beginning of the frequency range.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeAbsoluteLimitStart() function in C.</remarks>
<lastupdated>9/18/2014 4:10:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitStart(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the absolute power limit, in dBm, corresponding to the beginning of the frequency range.    This power limit is also set as the absolute power limit for the range when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.   
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the absolute power limit, in dBm, corresponding to the beginning of the frequency range.   This power limit is also set as the absolute power limit for the range when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeAbsoluteLimitStart() function in C.</remarks>
<lastupdated>1/9/2015 1:29:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeAbsoluteLimitStop(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the absolute power limit, in dBm, corresponding to the end of the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the absolute power limit, in dBm, corresponding to the end of the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeAbsoluteLimitStop() function in C.</remarks>
<lastupdated>9/18/2014 4:10:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitStop(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the absolute power limit, in dBm, corresponding to the end of the frequency range. This    method is ignored when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the absolute power limit, in dBm, corresponding to the end of the frequency range. This    method is ignored when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeAbsoluteLimitStop() function in C.</remarks>
<lastupdated>1/9/2015 1:29:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the absolute limit threshold is a flat line or a line with a slope. 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates whether the absolute limit threshold is a flat line or a line with a slope. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeAbsoluteLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 4:09:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the absolute limit threshold is a flat line or a line with a slope. 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether the absolute limit threshold is a flat line or a line with a slope. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeAbsoluteLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 4:11:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetAveragingCount() function in C.</remarks>
<lastupdated>7/7/2014 3:53:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled.True" crefType="PartiallyQualified" />.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 1:29:08 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging for the spurious emission (Spur) measurement is enabled. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether averaging for the Spur measurement is enabled. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:44:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the spurious emission (Spur) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable averaging for the Spur measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:26:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spurious emission (Spur) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Spur measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetAveragingType() function in C.</remarks>
<lastupdated>7/7/2014 3:55:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spurious emission (Spur) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Spur measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetAveragingType() function in C.</remarks>
<lastupdated>8/13/2014 8:26:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type used to reduce spectral leakage.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the FFT window type used to reduce spectral leakage.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetFFTWindow() function in C.</remarks>
<lastupdated>7/7/2014 3:55:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type used to reduce spectral leakage.  
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the FFT window type used to reduce spectral leakage.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetFFTWindow() function in C.</remarks>
<lastupdated>8/13/2014 8:26:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeRelativeAttenuation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the attenuation, in dB, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use the attenuation to compensate for the variations in external attenuation    when offset segments are spread wide in frequency.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the attenuation, in dB, relative to the external attenuation specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use the attenuation to compensate for the variations in external attenuation when offset segments are spread wide in frequency. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeRelativeAttenuation() function in C.</remarks>
<lastupdated>1/9/2015 1:28:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the attenuation, in dB, relative to the value which you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use the attenuation to compensate for the variations in external attenuation    when offset segments are spread wide in frequency.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the attenuation, in dB, relative to the external attenuation which you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use the attenuation to compensate for the variations in external attenuation    when offset segments are spread wide in frequency.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeRelativeAttenuation() function in C.</remarks>
<lastupdated>1/9/2015 1:31:34 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the start of the frequency range, in Hz, for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeStartFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:10:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the start frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the start of the frequency range, in Hz, for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeStartFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:11:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the stop of the frequency range, in Hz, for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeStopFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:10:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the stop frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the stop of the frequency range, in Hz, for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeStopFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:11:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetNumberOfRanges(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of range configurations.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of range configurations.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetNumberOfRanges() function in C.</remarks>
<lastupdated>7/7/2014 4:00:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetNumberOfRanges(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of range configurations.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the number of range configurations.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetNumberOfRanges() function in C.</remarks>
<lastupdated>8/13/2014 8:27:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the spurious emissions are measured in the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates whether the spurious emissions are measured in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeEnabled() function in C.</remarks>
<lastupdated>9/18/2014 4:10:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to measure the spurious emissions (Spur) in the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether to measure the Spurs in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeEnabled() function in C.</remarks>
<lastupdated>9/18/2014 4:11:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal. 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter applied to the    acquired signal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 4:10:23 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal. 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter applied to the    acquired signal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 4:11:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW). 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates whether the measurement computes the RBW. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 4:10:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW). 
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether the measurement computes the RBW. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 4:11:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 4:10:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 4:11:33 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:48:25 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:50:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for spurious emission (Spur)    measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for Spur    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/7/2014 3:56:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for spurious emission (Spur)    measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the maximum number of threads used for parallelism for Spur    measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/13/2014 8:27:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable spurious emission (Spur) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if Spur measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:24:55 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable spurious emission (Spur) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable Spur measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:27:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the spurious    emissions (Spur) measurement are enabled.   
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> the traces to be stored and retrieved after performing the Spur  measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:44:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the spurious    emissions (Spur) measurement.   
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the Spur measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:26:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeNumberOfSpursToReport(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeNumberOfSpursToReport" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of spurious emissions (Spur) that the measurement should report in the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the number of Spurs that the measurement should report in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeNumberOfSpursToReport() function in C.</remarks>
<lastupdated>9/18/2014 4:10:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeNumberOfSpursToReport(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeNumberOfSpursToReport" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of spurious emissions (Spur) that the measurement must report in the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the number of Spurs that the measurement must report in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeNumberOfSpursToReport() function in C.</remarks>
<lastupdated>9/18/2014 4:11:23 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the sweep time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeSweepTimeInterval() function in C.</remarks>
<lastupdated>9/18/2014 4:10:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto.False" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 1:32:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangeSweepTimeAuto() function in C.</remarks>
<lastupdated>9/18/2014 4:10:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangeSweepTimeAuto() function in C.</remarks>
<lastupdated>1/9/2015 1:31:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetTraceRangeIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTraceRangeIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the index of the range used to store and retrieve spurious emission (Spur) traces.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the index of the range used to store and retrieve Spur traces.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetTraceRangeIndex() function in C.</remarks>
<lastupdated>7/7/2014 4:05:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetTraceRangeIndex(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTraceRangeIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the index of the range used to store and retrieve spurious emission (Spur) traces. This method is not used if you set the spur all traces enabled to FALSE. When you set this method to -1, the measurement stores and retrieves traces for all enabled ranges. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the index of the range used to store and retrieve Spur traces. This method is not used if you set the spur all traces enabled to FALSE. When you set this method to -1, the measurement stores and retrieves traces for all enabled ranges.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetTraceRangeIndex() function in C.</remarks>
<lastupdated>8/28/2014 1:51:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangePeakThreshold(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangePeakThreshold" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the threshold level, in dBm, above which the measurement detects spurs in the range that you specify using the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" crefType="FullyQualified" /> and  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" crefType="FullyQualified" /> methods.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the threshold level, in dBm, above which the measurement detects spurs in the range that you specify using the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" crefType="FullyQualified" /> and  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" crefType="FullyQualified" /> methods. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangePeakThreshold() function in C.</remarks>
<lastupdated>9/15/2015 9:35:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangePeakThreshold(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangePeakThreshold" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the threshold level, in dBm, above which the measurement detects spurs in the range that you specify using the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" crefType="FullyQualified" /> and  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" crefType="FullyQualified" /> methods.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the threshold level, in dBm, above which the measurement detects spurs in the range that you specify using the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" crefType="FullyQualified" /> and  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" crefType="FullyQualified" /> methods.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangePeakThreshold() function in C.</remarks>
<lastupdated>9/15/2015 9:35:21 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangePeakExcursion(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangePeakExcursion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak excursion value for finding the spurs on trace. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered as a spur.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak excursion value for finding the spurs on trace. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered as a spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetRangePeakExcursion() function in C.</remarks>
<lastupdated>6/30/2015 9:51:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangePeakExcursion(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangePeakExcursion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the peak excursion value for finding the spurs on the trace. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered as a spur.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the peak excursion value for finding the spurs on the trace. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered as a spur. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurSetRangePeakExcursion() function in C.</remarks>
<lastupdated>6/30/2015 9:51:57 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeAbsoluteLimitArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode[],System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeAbsoluteLimitArray" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitMode,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode[],System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the absolute power limits corresponding to the beginning and end of the frequency range and specifies whether the absolute limit threshold is a flat line or a line with a slope.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="absoluteLimitMode"> Specifies whether the absolute limit threshold is a flat line or a line with a slope.</param>
<param name="absoluteLimitStart"> Specifies the array of absolute power limits, in dBm, corresponding to the beginning of the frequency range. The value of this parameter is also set as the absolute power limit for the range when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<param name="absoluteLimitStop">Specifies the array of absolute power limits, in dBm, corresponding to the end of the frequency range. This parameter is ignored when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeAbsoluteLimitArray() function in C.</remarks>
<lastupdated>1/9/2015 1:26:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeFrequencyArray(System.String,System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeFrequencyArray" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency,rangeEnabled" niparametertypes="System.String,System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency start and stop values and specifies whether to enable measurement of the spurious emissions (Spur) in the frequency range.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="startFrequency">Specifies the array of start frequencies of the frequency range, in hertz (Hz), for the measurement.</param>
<param name="stopFrequency">Specifies the array of stop frequencies of the frequency range, in Hz, for the measurement.</param>
<param name="rangeEnabled">Specifies whether to measure the Spur in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeFrequencyArray() function in C.</remarks>
<lastupdated>7/7/2014 3:36:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeNumberOfSpursToReportArray(System.String,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeNumberOfSpursToReportArray" nihasget="0" nihasset="0" niparameters="selectorString,numberOfSpursToReport" niparametertypes="System.String,System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the array of number of Spurs that the measurement should report in the frequency range.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="numberOfSpursToReport"> Specifies the array of number of Spurs that the measurement should report in the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeNumberOfSpursToReportArray() function in C.</remarks>
<lastupdated>8/13/2014 8:23:16 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeRbwArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeRbwArray" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwFilterType[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbwAuto"> Specifies whether the measurement computes the RBW. Refer to the Spectrum topic for details on RBW and sweep time.</param>
<param name="rbw">Specifies the array of bandwidths, in hertz (Hz), of the RBW filter used to sweep the acquired range, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeRBWArray() function in C.</remarks>
<lastupdated>1/9/2015 1:27:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeRelativeAttenuationArray(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeRelativeAttenuationArray" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures an array of attenuation values, in dB, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetExternalAttenuation(System.String,System.Double@)" crefType="PartiallyQualified" /> method. Use this method to compensate for the variations in external attenuation when offset channels are spread wide in frequency. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="relativeAttenuation">Specifies an array of attenuation values, in dB, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetExternalAttenuation(System.String,System.Double@)" crefType="PartiallyQualified" /> method. Use this method to compensate for the variations in external attenuation when offset channels are spread wide in frequency. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeRelativeAttenuationArray() function in C.</remarks>
<lastupdated>1/9/2015 1:27:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeSweepTimeArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeSweepTimeArray" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the array of sweep times, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time.</param>
<param name="sweepTimeInterval"> Specifies the array of sweep times, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangeSweepTimeArray() function in C.</remarks>
<lastupdated>1/9/2015 1:28:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangePeakCriteriaArray(System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangePeakCriteriaArray" nihasget="0" nihasset="0" niparameters="selectorString,threshold,excursion" niparametertypes="System.String,System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures arrays of peak threshold and peak excursion criteria which a peak should meet to be classified as a spurious emission (Spur).
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="threshold">Specifies the array of threshold levels, in dBm, above which the measurement detects spurs in the specified range.</param>
<param name="excursion">Specifies the array of peak excursion values, in dB, used to find spurs in the spectrum. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered as spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurCfgRangePeakCriteriaArray() function in C.</remarks>
<lastupdated>7/3/2015 2:01:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeDetectorType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeDetectorType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType" nireturnvaluetype="System.Int32">
      <summary>
Gets the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.None" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeDetectorType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeDetectorType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType" nireturnvaluetype="System.Int32">
      <summary>
Sets the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.None" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeDetectorPoints(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeDetectorPoints" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of range points after the detector is applied.        Use "range(n)" as the selector string to configure or read this method.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the number of range points after the detector is applied.        Use "range(n)" as the selector string to configure or read this method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorPoints" crefType="PartiallyQualified" /> attribute.The default value is 1001.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeDetectorPoints(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeDetectorPoints" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of range points after the detector is applied.        Use "range(n)" as the selector string to configure or read this method.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the number of range points after the detector is applied.        Use "range(n)" as the selector string to configure or read this method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorPoints" crefType="PartiallyQualified" /> attribute.The default value is 1001.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeVbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetRangeVbwFilterVbwToRbwRatio(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterVbwToRbwRatio(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Specifies the spurrange number.<br /> Example: "spurrange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterVbwToRbwRatio" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeDetector(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeDetector" nihasget="0" nihasset="0" niparameters="selectorString,detectorType,detectorPoints" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the detector settings including detector type and the number of points to be detected.<br /> Use "range(n)" as the selector string to configure this method.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  range number.  
			Example:<br /><span class="monospace">"range0"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="detectorType">Specifies the type of detector to be used.</param>
<param name="detectorPoints">Specifies the number of points after the detector is applied.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeDetectorArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType[],System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeDetectorArray" nihasget="0" nihasset="0" niparameters="selectorString,detectorType,detectorPoints" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType[],System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Configures an array of the detector settings including detector type and the number of points to be detected.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="detectorType">Specifies an array of the type of detector to be used.<br /></param>
<param name="detectorPoints">Specifies an array of the number of points after the detector is applied.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeVbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeVbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,vbwAuto,vbw,vbwToRbwRatio" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the video bandwidth (VBW) settings including VBW Auto, VBW, and VBW to RBW ratio for the specified range.<br />Use "range(n)" as the selector string to configure this method.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  range number.  
			Example:<br /><span class="monospace">"range0"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="vbwAuto">Specifies whether the VBW is expressed directly or computed based on VBW to RBW ratio. This value is expressed in Hz.</param>
<param name="vbw">Specifies the video bandwidth when you set the <em>VBWAuto</em> parameter <em>false</em>. This value is expressed in Hz.  <br /></param>
<param name="vbwToRbwRatio">Specifies the VBW to RBW Ratio when you set the <em>VBWAuto</em> parameter to <em>true</em>. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.ConfigureRangeVbwFilterArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth[],System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeVbwFilterArray" nihasget="0" nihasset="0" niparameters="selectorString,vbwAuto,vbw,vbwToRbwRatio" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth[],System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures an array of the VBW settings, including VBW Auto, VBW, and VBW to RBW ratio for the specified range.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="vbwAuto">Specifies whether the VBW is expressed directly or computed based on VBW to RBW ratio. This value is expressed in Hz.</param>
<param name="vbw">Specifies the video bandwidth when you set the <em>VBWAuto</em> parameter <em>false</em>. This value is expressed in Hz.  <br /></param>
<param name="vbwToRbwRatio">Specifies the VBW to RBW Ratio when you set the <em>VBWAuto</em> parameter to <em>true</em>. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrum" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a Spectrum measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrum.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of Spectrum measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXSpectrumConfiguration</value>
<lastupdated>1/9/2015 1:23:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrum.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve Spectrum measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXSpectrumResults</value>
<lastupdated>1/9/2015 1:23:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the ACP measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:30:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingEnabled">
Specifies whether to enable averaging of the spectrum for ACP  measurement. </param>
<param name="averagingCount">
Specifies the number of acquisitions used for averaging when you set the <see ref="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingEnabled" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingType">
Specifies the averaging type for averaging multiple Spectrum acquisitions. The averaged spectrum is used for ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 11:28:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureCarrierAndOffsets(System.String,System.Double,System.Int32,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierAndOffsets" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth,numberOfOffsets,channelSpacing" niparametertypes="System.String,System.Double,System.Int32,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures a carrier channel with offset channels on both sides of the carrier as specified by the number of offsets. The offset channels are separated by +/- (n*channel) spacing from the center of the carrier. Power is measured over the integration bandwidth for each channel.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="integrationBandwidth">
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the carrier channel power. </param>
<param name="numberOfOffsets">
Specifies the number of offset channels. </param>
<param name="channelSpacing"> Specifies the spacing between offset channels. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgCarrierAndOffsets() function in C.</remarks>
<lastupdated>8/3/2015 1:54:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureCarrierIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), over which the measurement integrates the carrier power. 
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="integrationBandwidth">
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the carrier channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/3/2015 1:54:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureCarrierMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierMode" nihasget="0" nihasset="0" niparameters="selectorString,carrierMode" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode" nireturnvaluetype="System.Int32">
      <summary>
Configures whether to consider the carrier power as part of total carrier power measurement. 
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="carrierMode">
Specifies whether to consider the carrier power as part of total carrier power measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgCarrierMode() function in C.</remarks>
<lastupdated>9/18/2014 3:52:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureCarrierFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,carrierFrequency" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the center frequency, in hertz (Hz), of the carrier, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetCenterFrequency(System.String,System.Double@)" crefType="PartiallyQualified" /> method. 
</summary>
<param name="selectorString">
Specifies the carrier number. Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="carrierFrequency">
Specifies the center frequency, in Hz, of the carrier, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.GetCenterFrequency(System.String,System.Double@)" crefType="PartiallyQualified" /> method. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgCarrierFrequency() function in C.</remarks>
<lastupdated>1/9/2015 11:28:50 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureCarrierRrcFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierRrcFilter" nihasget="0" nihasset="0" niparameters="selectorString,rrcFilterEnabled,rrcAlpha" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the root-raised-cosine (RRC) filter to apply on the carrier channel before measuring the carrier channel power. 
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="rrcFilterEnabled">
Specifies whether to apply the RRC filter on the acquired carrier channel before measuring the carrier channel power. </param>
<param name="rrcAlpha">
Specifies the roll-off factor for the RRC filter. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgCarrierRRCFilter() function in C.</remarks>
<lastupdated>9/18/2014 3:52:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures window and FFT to obtain a spectrum for the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="fftWindow">
Specifies the FFT window type to use to reduce spectral leakage. </param>
<param name="fftPadding">
Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. This parameter is used only when the acquisition span is less than the device instantaneous bandwidth of the device.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgFFT() function in C.</remarks>
<lastupdated>7/8/2014 3:06:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,measurementMethod" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Configures the method for performing the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="measurementMethod">
Specifies the method for performing the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgMeasurementMethod() function in C.</remarks>
<lastupdated>01-Jul-14 2:02:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,noiseCompensationEnabled" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures compensation of the channel powers for the inherent noise floor of the signal analyzer. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="noiseCompensationEnabled">
Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgNoiseCompensationEnabled() function in C.</remarks>
<lastupdated>7/4/2014 11:41:34 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,numberOfCarriers" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of carriers for the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="numberOfCarriers">
Specifies the number of carriers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgNumberOfCarriers() function in C.</remarks>
<lastupdated>7/18/2014 11:36:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of offsets for the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="numberOfOffsets">
Specifies the number of offset for the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgNumberOfOffsets() function in C.</remarks>
<lastupdated>7/9/2014 10:03:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), over which the adjacent channel power (ACP) measurement integrates the offset channel power.
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="integrationBandwidth">
Specifies the frequency range, in Hz, over which the measurement integrates the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 3:52:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetPowerReference(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetPowerReference" nihasget="0" nihasset="0" niparameters="selectorString,offsetReferenceCarrier,offsetReferenceSpecific" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the power reference to use for measuring the relative power of the offset channel.
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="offsetReferenceCarrier">
Specifies the carrier to be used as the power reference to measure the offset channel relative power. The offset channel power is measured only if you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" crefType="PartiallyQualified" />.</param>
<param name="offsetReferenceSpecific">
Specifies the index of the carrier to be used as the reference carrier. The power measured in this carrier is used as the power reference for measuring the offset channel relative power, when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Specific" crefType="PartiallyQualified" />. </param>
<returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetPowerReference() function in C.</remarks>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<lastupdated>1/9/2015 11:29:52 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the attenuation, in dB, relative to the external attenuation.
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="relativeAttenuation">
Specifies the attenuation, in dB, relative to the external attenuation. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>9/18/2014 3:53:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetRrcFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRrcFilter" nihasget="0" nihasset="0" niparameters="selectorString,rrcFilterEnabled,rrcAlpha" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the root raised cosine (RRC) channel filter to be applied on the offset channel before measuring the offset channel power. 
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="rrcFilterEnabled">
Specifies whether to apply the RRC filter on the acquired offset channel before measuring the offset channel power.</param>
<param name="rrcAlpha">
Specifies the roll-off factor for the RRC filter. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetRRCFilter() function in C.</remarks>
<lastupdated>6/19/2015 8:07:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffset(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffset" nihasget="0" nihasset="0" niparameters="selectorString,offsetFrequency,offsetSideband,offsetEnabled" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures an offset channel on one or both sides of carrier with center-to-center spacing as specified by the offset frequency and offset frequency definition. In case of multiple carriers, offset frequency is relative to the closest carrier.
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="offsetFrequency">
Specifies the center or edge frequency, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of the offset frequency is ignored and the offsetSideband parameter determines whether the upper, lower, or both offsets are measured.
</param>
<param name="offsetSideband">
Specifies whether the offset segment is present on one side, or on both sides of the carriers. </param>
<param name="offsetEnabled">
Specifies whether to enable the offset channel for ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffset() function in C.</remarks>
<lastupdated>10/16/2015 11:42:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigurePowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,powerUnits" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Configures the units for the absolute power.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="powerUnits">
Specifies the units for the absolute power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgPowerUnits() function in C.</remarks>
<lastupdated>6/13/2014 10:28:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="rbwAuto">
Specifies whether the measurement computes the RBW.</param>
<param name="rbw">
Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired signal, when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. </param>
<param name="rbwFilterType">
Specifies the shape of the digital RBW filter. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 11:30:59 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.    </param>
<param name="sweepTimeAuto">
Specifies whether the measurement computes the sweep time. </param>
<param name="sweepTimeInterval">
Specifies the sweep time, in seconds, when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 11:31:15 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,offsetFrequencyDefinition" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Configures the offset frequency definition for the ACP measurement.
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="offsetFrequencyDefinition">
Specifies the offset frequency definition. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>7/6/2015 10:52:06 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Gets the method for performing the adjacent channel power (ACP) measurement.   
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Upon return, contains the method for performing the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetMeasurementMethod() function in C.</remarks>
<lastupdated>7/23/2014 11:19:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Sets the method for performing the adjacent channel power (ACP) measurement.  </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
Specifies the method for performing the ACP measurement.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetMeasurementMethod() function in C.</remarks>
<lastupdated>8/20/2014 2:27:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Gets the adjacent channel power (ACP) power units. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the ACP power units. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetPowerUnits() function in C.</remarks>
<lastupdated>7/23/2014 11:20:06 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Sets the adjacent channel power (ACP) power units. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Specifies the ACP power units. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetPowerUnits() function in C.</remarks>
<lastupdated>7/18/2014 2:54:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for adjacent channel power (ACP)  measurement.   </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains  the maximum number of threads used for parallelism for ACP measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/28/2014 12:15:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for adjacent channel power (ACP)    measurement.    </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the maximum number of threads used for parallelism for ACP measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 8:59:39 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether compensation of the channel powers for the inherent noise floor of the RF signal analyzer is enabled.  </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Upon return, indicates whether compensation of the channel powers for the inherent noise floor of the RF signal analyzer is enabled. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetNoiseCompensationEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:45:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable compensation of the channel powers for the inherent noise floor of the RF signal analyzer. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetNoiseCompensationEnabled() function in C.</remarks>
<lastupdated>7/21/2014 2:05:33 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the adjacent channel power (ACP) measurement is enabled.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the ACP measurement is enabled; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:45:23 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the adjacent channel power (ACP) measurement.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the ACP measurement; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/12/2014 8:59:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the adjacent    channel power (ACP) measurement are enabled.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the ACP measurement are enabled; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:44:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the adjacent    channel power (ACP) measurement.   
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the ACP measurement; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 8:56:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the number of acquisitions used for averaging. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetAveragingCount() function in C.</remarks>
<lastupdated>7/18/2014 11:39:29 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the number of acquisitions used for averaging when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />. 
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:33:19 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging is enabled for the adjacent channel power (ACP) measurement. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.   
</param>
<param name="value">
Upon return, contains a value that indicates whether averaging of the spectrum for ACP measurement is enabled. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:44:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging of the spectrum for the adjacent channel power (ACP) measurement. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies whether to enable averaging of the spectrum for the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetAveragingEnabled() function in C.</remarks>
<lastupdated>7/23/2014 11:20:18 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the averaging type for averaging multiple spectrum acquisitions.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetAveragingType() function in C.</remarks>
<lastupdated>7/18/2014 11:39:46 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the adjacent channel power (ACP) measurement.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the ACP measurement.  </param>
<returns>       
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetAveragingType() function in C.</remarks>
<lastupdated>7/23/2014 11:20:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.  
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">
Upon return, contains the center frequency, in Hz, of the carrier, relative to the RF center frequency.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetCarrierFrequency() function in C.</remarks>
<lastupdated>8/7/2015 6:59:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.  </summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">
Specifies the center frequency, in Hz, of the carrier, relative to the RF center frequency. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetCarrierFrequency() function in C.</remarks>
<lastupdated>8/7/2015 6:59:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Upon return, contains the frequency range, in hertz (Hz), over which the measurement integrates the carrier power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 3:53:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.  </summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies the frequency range, in Hz, over which the measurement integrates the carrier power.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:11:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetNumberOfCarriers(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of carriers.  </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the number of carriers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetNumberOfCarriers() function in C.</remarks>
<lastupdated>7/4/2014 5:41:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of carriers.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Specifies the number of carriers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetNumberOfCarriers() function in C.</remarks>
<lastupdated>7/4/2014 5:07:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetCarrierMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to consider the carrier power as part of total carrier power measurement.  
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Upon return, indicates whether to consider the carrier power as part of total carrier power measurement.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetCarrierMode() function in C.</remarks>
<lastupdated>9/18/2014 12:09:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to consider the carrier power as part of total carrier power measurement. The total relative power of a carrier is measured with reference to the total power of all active    carriers. The relative power of an offset channel is measured with reference to the total carrier    power when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Composite" crefType="PartiallyQualified" />.   
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Specifies whether to consider the carrier power as part of total carrier power measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetCarrierMode() function in C.</remarks>
<lastupdated>1/9/2015 11:33:38 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before FFT. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the factor by which the time-domain waveform is zero-padded before FFT. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetFFTPadding() function in C.</remarks>
<lastupdated>8/12/2014 8:52:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. This method is applicable only when the acquisition span is less than the device instantaneous bandwidth of the device. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the factor by which the time-domain waveform is zero-padded before FFT. 
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetFFTPadding() function in C.</remarks>
<lastupdated>7/9/2014 9:51:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type to use to reduce spectral leakage.   </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the FFT window type to use to reduce spectral leakage.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetFFTWindow() function in C.</remarks>
<lastupdated>8/12/2014 8:52:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type to use to reduce spectral leakage.         
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the FFT window type to use to reduce spectral leakage.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetFFTWindow() function in C.</remarks>
<lastupdated>8/12/2014 8:58:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center or edge frequency, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of offset frequency is ignored and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband)" /> method determines whether the upper, lower, or both offsets are measured. 
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, contains the center or edge frequency, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of offset frequency is ignored and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband)" /> method determines whether the upper, lower, or both offsets are measured. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetFrequency() function in C.</remarks>
<lastupdated>10/29/2015 9:37:48 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the center or edge frequency, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of offset frequency is ignored and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband)" /> method determines whether the upper, lower, or both offsets are measured. 
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Specifies the center or edge frequency, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of offset frequency is ignored and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband)" /> method determines whether the upper, lower, or both offsets are measured.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetFrequency() function in C.</remarks>
<lastupdated>10/29/2015 9:38:25 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the offset    channel power.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, contains the frequency range, in Hz, over which the measurement integrates the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:10:04 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), over which the measurement integrates the offset    channel power.   </summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">
Specifies the frequency range, in Hz, over which the measurement integrates the carrier power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:12:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetRelativeAttenuation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the attenuation, in dB, relative to the external attenuation.</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, contains the attenuation, in dB, relative to the external attenuation.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>9/18/2014 12:10:28 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the attenuation, in dB, relative to the external attenuation. Use this method  to  compensate for the variations in external attenuation when offset channels are spread wide in    frequency.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies the attenuation, in dB, relative to the external attenuation. Use this method to compensate for variations in external attenuation when the offset channels are spread wide in frequency. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>9/18/2014 12:12:29 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetNumberOfOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of offset channels.   
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Upon return, contains the number of offset channels. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetNumberOfOffsets() function in C.</remarks>
<lastupdated>7/4/2014 5:41:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of offset channels.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the number of offset channels.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetNumberOfOffsets() function in C.</remarks>
<lastupdated>8/12/2014 8:59:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the offset channel for adjacent channel power (ACP) measurement is enabled.  </summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Upon return, indicates whether the offset channel for ACP measurement is enabled. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:09:48 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the offset channel for adjacent channel power (ACP) measurement.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Specifies whether to enable the offset channel for ACP measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:11:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the offset segment is present on one side, or on both sides of the    carriers.    </summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, indicates whether the offset segment is present on one side, or on both sides of the carriers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetSideband() function in C.</remarks>
<lastupdated>9/18/2014 12:10:53 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the offset segment is present on one side, or on both sides of the    carriers.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies whether the offset segment is present on one side, or on both sides of the carriers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetSideband() function in C.</remarks>
<lastupdated>9/18/2014 12:12:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetPowerReferenceCarrier(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier, for which the measured power is the power reference to measure offset    channel relative power. 
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Upon return, contains the carrier, for which the measured power is the power reference to measure offset    channel relative power.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>9/18/2014 12:10:11 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetPowerReferenceCarrier(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" nireturnvaluetype="System.Int32">
      <summary>
Sets the carrier, for which the measured power is the power reference to measure offset    channel relative power. The offset channel power is measured only if you set the ACP <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Specifies the carrier to be used as power reference to measure offset channel relative power. The offset channel power is measured only if you set the ACP <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" crefType="PartiallyQualified" />.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>1/9/2015 11:34:11 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetPowerReferenceSpecific(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetPowerReferenceSpecific" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index, for which the measured power is the power reference for the offset    channel relative power. </summary>
<param name="selectorString">
Specifies the offset number.   Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, contains the index of the carrier to be used as the reference carrier.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetPowerReferenceSpecific() function in C.</remarks>
<lastupdated>9/18/2014 12:10:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetPowerReferenceSpecific(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetPowerReferenceSpecific" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the carrier index, for which the measured power is the power reference for the offset    channel relative power, when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Specific" crefType="PartiallyQualified" />.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies the index of the carrier to be used as the reference carrier. The power measured in this carrier is used as the power reference for measuring the offset channel relative power, when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Specific" crefType="PartiallyQualified" />. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetPowerReferenceSpecific() function in C.</remarks>
<lastupdated>1/9/2015 11:34:42 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the acquired signal.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/28/2014 12:17:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the acquired signal, when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the bandwidth, in Hz, of the RBW filter used to sweep the acquired signal, when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>1/9/2015 11:35:13 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW).    
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Upon return, indicates whether the measurement computes the RBW. </param>
<returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetRBWFilterAutoBandwidth() function in C.</remarks>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<lastupdated>7/28/2014 12:17:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW).    </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Specifies whether the measurement computes the RBW. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 9:01:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  
</param>
<param name="value">
Upon return, contains the shape of the digital RBW filter. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetRBWFilterType() function in C.</remarks>
<lastupdated>7/28/2014 12:17:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Specifies the shape of the digital RBW filter. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 9:01:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  
</param>
<param name="value">
Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>9/11/2015 10:39:26 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>9/11/2015 10:46:52 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetCarrierRrcFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter on the carrier channel before    measuring the carrier channel power.    
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Upon return, contains the roll-off factor for the RRC filter on the acquired offset channel before measuring the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:09:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierRrcFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter on the carrier channel before    measuring the carrier channel power.  
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies the roll-off factor for the RRC filter on the carrier channel before    measuring the carrier channel power.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:11:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetRrcFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter on the acquired offset    channel before measuring the offset channel power.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, contains the roll-off factor for the RRC filter on the acquired offset    channel before measuring the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:10:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetRrcFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter on the acquired offset    channel before measuring the offset channel power.    </summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies the roll-off factor for the root-raised-cosine (RRC) filter on the acquired offset    channel before measuring the offset channel power.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:12:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel    before  measuring the carrier channel power.  
</summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.   </param>
<param name="value">
Upon return, indicates whether to apply the RRC filter on the acquired carrier channel before measuring the carrier channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:09:35 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel    after measuring the carrier channel power.    </summary>
<param name="selectorString">
Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies whether to apply the RRC filter on the acquired carrier channel after measuring the carrier channel power. </param>
<returns>        
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:11:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the root-raised-cosine (RRC) filter  is applied on the acquired offset channel before    measuring the offset channel power.  
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.  </param>
<param name="value">
Upon return, indicates whether the RRC filter is applied on the acquired offset channel before measuring the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:10:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to apply the root-raised-cosine (RRC) filter on the acquired offset channel before    measuring the offset channel power.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">
Specifies whether to apply the RRC filter on the acquired offset channel before measuring the offset channel power. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetRRCFilterEnabled() 
function in C.</remarks>
<lastupdated>1/9/2015 1:49:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" crefType="PartiallyQualified" /> method to    <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" crefType="PartiallyQualified" /> method to    <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />.   </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:32:58 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
Specifies the sweep time, in seconds, when you set <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:36:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.    
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, indicates whether the measurement computes the sweep time. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 8:56:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.    
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies whether the measurement computes the sweep time.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/12/2014 9:01:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes an IF output power level offset for the offset channels to improve the dynamic range of the adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, indicates whether the measurement computes an IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetIFOutputPowerOffsetAuto() function in C.</remarks>
<lastupdated>8/12/2014 8:52:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes an IF output power level offset, for the offset channels to improve the dynamic range of the ACP measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies whether the measurement computes an IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetIFOutputPowerOffsetAuto() function in C.</remarks>
<lastupdated>8/12/2014 8:58:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetNearIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the offset, in dB, by which to adjust the IF output power level for offset channels that are near to the carrier channel to improve the dynamic range.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the offset, in dB, by which to adjust the IF output power level for offset channels that are near to the carrier channel to improve the dynamic range. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetNearIFOutputPowerOffset() function in C.</remarks>
<lastupdated>7/4/2014 5:40:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNearIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the offset, in dB, by which to adjust the IF output power level for offset channels that are near to the carrier channel to improve the dynamic range.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the offset, in dB, by which to adjust the IF output power level for offset channels that are near to the carrier channel to improve the dynamic range. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetNearIFOutputPowerOffset() function in C.</remarks>
<lastupdated>8/12/2014 8:59:34 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetFarIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the offset, in dB, by which to adjust the IF output power level for offset channels that are far from the carrier channel to improve the dynamic range.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the offset, in dB, by which to adjust the IF output power level for offset channels that are far from the carrier channel to improve the dynamic range. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetFarIFOutputPowerOffset() function in C.</remarks>
<lastupdated>7/18/2014 11:41:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetFarIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the offset, in dB, by which to adjust the IF output power level for offset channels that are far from the carrier channel to improve the dynamic range.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Specifies the offset, in dB, by which to adjust the IF output power level for offset channels that are far from the carrier channel to improve the dynamic range. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetFarIFOutputPowerOffset() function in C.</remarks>
<lastupdated>8/12/2014 8:58:05 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the offset frequency definition used to specify the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" /> method.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">
Upon return, contains the offset frequency definition used to specify the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" /> method.   
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>9/11/2015 10:37:53 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the offset frequency definition used to specify the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" /> method.   
</summary>
<param name="selectorString">
Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. 
</param>
<param name="value">
Sets the offset frequency definition used to specify the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" /> method.   
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_ACPSetOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>9/11/2015 10:47:49 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetArray(System.String,System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetArray" nihasget="0" nihasset="0" niparameters="selectorString,offsetFrequency,offsetSideband,offsetEnabled" niparametertypes="System.String,System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled[]" nireturnvaluetype="System.Int32">
      <summary>
Configures an offset channel on one or both sides of carrier with center-to-center spacing as specified by the offset frequency and offset frequency definition. In case of multiple carriers, offset frequency is relative to the closest carrier. </summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="offsetFrequency">Specifies an array of center or edge frequencies, in hertz (Hz), of the offset channel, relative to the center frequency of the closest carrier as determined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition)" /> method. The sign of offset frequency is ignored and the offsetSideband parameter determines whether the upper, lower, or both offsets are measured.
</param>
<param name="offsetSideband"> 
Specifies whether the offset segment is present on one side, or on both sides of the carriers. </param>
<param name="offsetEnabled">Specifies whether to enable the offset channel for ACP measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetArray() function in C.</remarks>
<lastupdated>10/16/2015 11:42:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetIntegrationBandwidthArray(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetIntegrationBandwidthArray" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), over which the measurement integrates the offset channel power.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="integrationBandwidth"> Specifies an array of frequency ranges, in Hz, over which the measurement integrates the offset channel power. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetIntegrationBandwidthArray() function in C.</remarks>
<lastupdated>7/4/2014 1:34:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetPowerReferenceArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier[],System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetPowerReferenceArray" nihasget="0" nihasset="0" niparameters="selectorString,offsetPowerReferenceCarrier,offsetPowerReferenceSpecific" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier[],System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the power reference to use for measuring the relative power of the offset channel. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="offsetPowerReferenceCarrier"> Specifies the array of carriers to be used as power reference to measure offset channel relative power. The offset channel power is measured only if you set the carrier mode of the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Active" crefType="PartiallyQualified" />.</param>
<param name="offsetPowerReferenceSpecific">Specifies the array of carrier indexes to use as the reference carrier for each offset channel. The power measured in this carrier is used as the power reference for measuring the offset channel relative power, when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier.Specific" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetPowerReferenceArray() function in C.</remarks>
<lastupdated>1/9/2015 11:30:39 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetRelativeAttenuationArray(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeAttenuationArray" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the attenuation, in dB, relative to the external attenuation.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="relativeAttenuation"> Specifies an array of attenuation values, in dB, relative to the external attenuation. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetRelativeAttenuationArray() function in C.</remarks>
<lastupdated>9/1/2014 12:04:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.ConfigureOffsetRrcFilterArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRrcFilterArray" nihasget="0" nihasset="0" niparameters="selectorString,rrcFilterEnabled,rrcAlpha" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the root raised cosine (RRC) channel filter to be applied on the offset channel before measuring  the offset channel power.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="rrcFilterEnabled"> Specifies whether to apply the RRC filter on the acquired offset channel before measuring the offset channel power. </param>
<param name="rrcAlpha"> Specifies an array of roll-off factors for the RRC filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPCfgOffsetRRCFilterArray() function in C.</remarks>
<lastupdated>6/19/2015 8:07:32 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.GetSequentialFftSize(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSequentialFftSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT size when you set the        <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the FFT size when you set the        <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpSequentialFftSize" crefType="PartiallyQualified" /> attribute.The default value is 512.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSequentialFftSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT size when you set the        <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the FFT size when you set the        <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpSequentialFftSize" crefType="PartiallyQualified" /> attribute.The default value is 512.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method. </summary>
<lastupdated>1/9/2015 1:44:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
<lastupdated>7/10/2014 3:16:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for spectral emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
<lastupdated>7/10/2014 10:48:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerTrace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures the measurement trace to be used by the marker.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.AcpSpectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the ACP spectrum trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.CcdfGaussianProbabilitiesTrace" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfGaussianProbabilitiesTrace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the CCDF Gaussian probabilities trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.CcdfProbabilitiesTrace" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfProbabilitiesTrace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the CCDF probabilities trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.ChpSpectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the CHP spectrum trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.FcntPowerTrace" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntPowerTrace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the frequency count (Fcnt) power trace.
</summary>
<lastupdated>8/26/2014 11:59:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.ObwSpectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the OBW spectrum trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.SemSpectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemSpectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the SEM spectrum trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.Spectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Spectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the Spectrum trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace.TxpPowerTrace" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpPowerTrace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker uses the TXP power trace.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmHarmonicEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable a particular harmonic for measurement. Only the enabled Harmonics are used to measure the total harmonic distortion (THD). This enum is not used if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.True" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:38:20 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the harmonic for measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the harmonic for measurement.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the frequency count (Fcnt) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the Fcnt measurement.</param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging.  </param>
<param name="averagingType">Specifies the averaging type for averaging multiple acquisitions.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntCfgAveraging() function in C.</remarks>
<lastupdated>7/28/2014 2:42:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition time, in seconds, for the frequency count (Fcnt) measurement. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="measurementInterval">Specifies the acquisition time, in seconds, for the Fcnt measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntCfgMeasurementInterval() function in C.</remarks>
<lastupdated>7/31/2014 12:13:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.ConfigureRbwFilter(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbw,rbwFilterType,rrcAlpha" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter to be applied before measuring the frequency.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbw"> Specifies the bandwidth, in hertz (Hz), of the RBW filter used to measure the signal.  </param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.  </param>
<param name="rrcAlpha"> Specifies the roll-off factor for the root-raised-cosine (RRC) filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntCfgRBWFilter() function in C.</remarks>
<lastupdated>7/5/2014 3:06:33 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.ConfigureThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,thresholdLevel,thresholdType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold level for the samples that need to be considered for the frequency count (Fcnt) measurement. Enable the threshold when analyzing burst signals or signals with dead time.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="thresholdEnabled">Specifies whether to enable thresholding of the acquired samples to be used for the measurement.</param>
<param name="thresholdLevel">Specifies either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled)" crefType="PartiallyQualified" /> method.
</param>
<param name="thresholdType">Specifies the reference for the power level used for thresholding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntCfgThreshold() function in C.</remarks>
<lastupdated>1/9/2015 11:43:37 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetAveragingCount() function in C.</remarks>
<lastupdated>7/5/2014 3:07:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled.True" crefType="PartiallyQualified" />.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:43:51 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable averaging for the frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains whether to enable averaging for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetAveragingEnabled() function in C.</remarks>
<lastupdated>7/28/2014 1:23:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether to enable averaging for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:47:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for frequency count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the averaging type for Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetAveragingType() function in C.</remarks>
<lastupdated>7/5/2014 3:14:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for frequency count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the averaging type for Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetAveragingType() function in C.</remarks>
<lastupdated>8/12/2014 10:47:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the frequency count (Fcnt) measurement. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the acquisition time, in seconds, for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetMeasurementInterval() function in C.</remarks>
<lastupdated>7/5/2014 3:15:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the acquisition time, in seconds, for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetMeasurementInterval() function in C.</remarks>
<lastupdated>8/12/2014 10:48:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for frequency count (Fcnt)    measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 3:15:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for frequency count (Fcnt)    measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the maximum number of threads used for parallelism for Fcnt  measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 10:48:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the frequency count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if Fcnt measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetMeasurementEnabled() function in C.</remarks>
<lastupdated>7/23/2014 12:58:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the frequency count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the Fcnt measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:47:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the traces to be stored and retrieved after performing the frequency    count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the Fcnt measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/1/2014 3:56:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the frequency    count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the Fcnt measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:40:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetRbwFilterRrcAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetRBWFilterRRCAlpha() function in C.</remarks>
<lastupdated>7/5/2014 3:15:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetRbwFilterRrcAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetRBWFilterRRCAlpha() function in C.</remarks>
<lastupdated>8/12/2014 10:48:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 3:15:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 10:50:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetRBWFilterType() function in C.</remarks>
<lastupdated>7/28/2014 1:23:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 10:49:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetThresholdLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets either the relative or absolute threshold power level.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates either the relative or absolute threshold power level.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetThresholdLevel() function in C.</remarks>
<lastupdated>8/12/2014 10:40:10 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets either the relative or absolute threshold power level based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType@)" crefType="PartiallyQualified" /> method.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies either the relative or absolute threshold power level based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType@)" crefType="PartiallyQualified" /> method.    
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetThresholdLevel() function in C.</remarks>
<lastupdated>1/7/2015 11:50:00 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable thresholding of the acquired samples to be used for the frequency count    (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether to enable thresholding of the acquired samples to be used for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetThresholdEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:40:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable thresholding of the acquired samples to be used for the frequency count (Fcnt) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable thresholding of the acquired samples to be used for the Fcnt measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetThresholdEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:49:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the power level used for thresholding.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the reference for the power level used for thresholding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetThresholdType() function in C.</remarks>
<lastupdated>7/5/2014 3:17:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the power level used for thresholding.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the reference for the power level used for thresholding.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntSetThresholdType() function in C.</remarks>
<lastupdated>8/12/2014 10:49:28 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the AMPM measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:30:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchAMToAMTrace(System.String,System.Double,System.Single[]@,System.Single[]@,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAMToAMTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inputPowers,measuredAMToAM,curveFitAMToAM" niparametertypes="System.String,System.Double,ref System.Single[],ref System.Single[],ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the AM-to-AM trace where the inputPowers array forms the x-axis of the trace, and the measuredAMToAM and curveFitAMToAM arrays form the y-axis of the trace.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" />  method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="inputPowers">
Upon return, contains the array of input powers, in dBm.</param>
<param name="measuredAMToAM">
Upon return, contains the gain values, in dB, corresponding to the input powers.</param>
<param name="curveFitAMToAM">
Upon return, contains the polynomial fit gain values, in dB, corresponding to the input powers. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchAMToAMTrace() function in C.</remarks>
<lastupdated>1/7/2015 3:32:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchAMToPMTrace(System.String,System.Double,System.Single[]@,System.Single[]@,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAMToPMTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inputPowers,measuredAMToPM,curveFitAMToPM" niparametertypes="System.String,System.Double,ref System.Single[],ref System.Single[],ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the AM-to-AM trace where the inputPowers array forms the x-axis of the trace, and the measuredAMToPM 
and curveFitAMToPM arrays form the y-axis of the trace.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="inputPowers">
Upon return, contains the array of input powers, in dBm.</param>
<param name="measuredAMToPM">
Upon return, contains the polynomial fit phase distortion values, in degrees, corresponding to the input powers. </param>
<param name="curveFitAMToPM">
Upon return, contains the phase distortion values, in degrees, corresponding to the input powers.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchAMToPMTrace() function in C.</remarks>
<lastupdated>1/7/2015 3:36:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchCurveFitCoefficients(System.String,System.Double,System.Single[]@,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCurveFitCoefficients" nihasget="0" nihasset="0" niparameters="selectorString,timeout,amToAMCoefficients,amToPMCoefficients" niparametertypes="System.String,System.Double,ref System.Single[],ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the coefficients of the polynomials that approximate the AM-to-AM and AM-to-PM responses of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="amToAMCoefficients">
Upon return, contains the coefficients of the polynomial that approximates the AM-to-AM characteristic of the device under test. </param>
<param name="amToPMCoefficients">
Upon return, contains the coefficients of the polynomial that approximates the AM-to-PM characteristic of the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchCurveFitCoefficients() function in C.</remarks>
<lastupdated>1/7/2015 3:36:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchCurveFitResidual(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCurveFitResidual" nihasget="0" nihasset="0" niparameters="selectorString,timeout,amToAMResidual,amToPMResidual" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the polynomial approximation residuals for AM-to-AM and AM-to-PM response of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="amToAMResidual">
Upon return, contains the approximation error, in dB, in the polynomial approximation of the AM-to-AM characteristic of the device under test.</param>
<param name="amToPMResidual">
Upon return, contains the approximation error, in degrees, in the polynomial approximation of the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchCurveFitResidual() function in C.</remarks>
<lastupdated>1/6/2015 3:34:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchDutCharacteristics(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchDutCharacteristics" nihasget="0" nihasset="0" niparameters="selectorString,timeout,meanLinearGain,onedBCompressionPoint,meanRmsEvm" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the mean linear gain, 1 dB compression point, and mean RMS EVM of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="meanLinearGain">
Upon return, contains the average linear gain, in dB, of the device under test, computed by rejecting signal samples suffering gain compression.</param>
<param name="onedBCompressionPoint">
Upon return, contains the theoretical output power, in dBm, at which gain of the device under test drops by 1 dB from its mean linear gain. This parameter returns NaN when the AM-to-AM characteristics of the device under test are flat. </param>
<param name="meanRmsEvm">
Upon return, contains the ratio, as a percentage, of l<format type="superscript">2</format> norm of difference between the normalized reference and acquired waveforms, to the l<format type="superscript">2</format> norm of the normalized reference waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchDUTCharacteristics() function in C.</remarks>
<lastupdated>1/7/2015 4:58:38 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchError(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchError" nihasget="0" nihasset="0" niparameters="selectorString,timeout,gainErrorRange,phaseErrorRange,meanPhaseError" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the maximum gain error range, phase error range, and mean phase error for the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="gainErrorRange">
Upon return, contains the peak-to-peak deviation, in dB, in the gain of the device under test.</param>
<param name="phaseErrorRange">
Upon return, contains the peak-to-peak deviation, in degrees, in the phase distortion of the acquired signal relative to the reference waveform caused by the device under test.</param>
<param name="meanPhaseError">
Upon return, contains the mean phase error, in degrees, of the acquired signal relative to the reference waveform caused by the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchError() function in C.</remarks>
<lastupdated>1/7/2015 3:42:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchProcessedMeanAcquiredWaveform(System.String,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchProcessedMeanAcquiredWaveform" nihasget="0" nihasset="0" niparameters="selectorString,timeout,processedMeanAcquiredWaveform" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the averaged acquired waveform, corrected for frequency, phase and DC offsets, used to perform the AMPM measurement.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="processedMeanAcquiredWaveform">
Upon return, contains the averaged acquired waveform, corrected for frequency, phase and DC offsets, used to perform the measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchProcessedMeanAcquiredWaveform() function in C.</remarks>
<lastupdated>1/7/2015 3:45:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.FetchProcessedReferenceWaveform(System.String,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchProcessedReferenceWaveform" nihasget="0" nihasset="0" niparameters="selectorString,timeout,processedReferenceWaveform" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the segment of the reference waveform used to perform the AMPM measurement.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an
appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the
method waits until the measurement is complete.</param>
<param name="processedReferenceWaveform">
Upon return, contains the segment of the reference waveform used to perform the AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMFetchProcessedReferenceWaveform() function in C.</remarks>
<lastupdated>1/7/2015 3:47:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetMeanLinearGain(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanLinearGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average linear gain, in dB, of the device under test, computed by rejecting signal samples containing gain compression.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Returns the average linear gain, in dB, of the device under test, computed by rejecting signal samples containing gain compression.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsMeanLinearGain() function in C.</remarks>
<lastupdated>1/7/2015 3:53:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.Get1dBCompressionPoint(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Get1dBCompressionPoint" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the theoretical output power, in dBm, at which gain of the device under test drops by 1 dB from its mean linear gain.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
upon return, contains the theoretical output power, in dBm, at which gain of the device under test drops by 1 dB from its mean linear gain.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResults1dBCompressionPoint() function in C.</remarks>
<lastupdated>1/7/2015 3:48:44 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetMeanPhaseError(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanPhaseError" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the mean phase error, in degrees, of the acquired signal relative to the reference waveform caused by the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Returns the mean phase error, in degrees, of the acquired signal relative to the reference waveform caused by the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsMeanPhaseError() function in C.</remarks>
<lastupdated>1/6/2015 3:32:06 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetMeanRmsEvm(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanRmsEvm" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the ratio, as a percentage, of l<format type="superscript">2</format> norm of difference between the normalized reference and acquired waveforms, to the l<format type="superscript">2</format> norm of the normalized reference waveform
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the ratio, as a percentage, of l<format type="superscript">2</format> norm of difference between the normalized reference and acquired waveforms, to the l<format type="superscript">2</format> norm of the normalized reference waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsMeanRMSEVM() function in C.</remarks>
<lastupdated>1/8/2015 2:43:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetAMToAMCurveFitResidual(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToAMCurveFitResidual" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the approximation error, in dB, in the polynomial approximation of the measured AM-to-AM characteristic of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the approximation error, in dB, in the polynomial approximation of the measured AM-to-AM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsAMToAMCurveFitResidual() function in C.</remarks>
<lastupdated>1/7/2015 3:49:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetAMToPMCurveFitResidual(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToPMCurveFitResidual" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the approximation error, in degrees, in the polynomial approximation of the measured AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the approximation error, in degrees, in the polynomial approximation of the measured AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsAMToPMCurveFitResidual() function in C.</remarks>
<lastupdated>1/7/2015 3:51:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetGainErrorRange(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetGainErrorRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak-to-peak deviation of the gain, in dB, of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the peak-to-peak deviation of the gain, in dB, of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsGainErrorRange() function in C.</remarks>
<lastupdated>1/7/2015 3:52:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetPhaseErrorRange(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPhaseErrorRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak-to-peak deviation, in degrees, in the phase distortion of the acquired signal relative to the reference waveform caused by the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the peak-to-peak deviation, in degrees, in the phase distortion of the acquired signal relative to the reference waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsPhaseErrorRange() function in C.</remarks>
<lastupdated>1/7/2015 3:58:11 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetAMToAMCurveFitCoefficients(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToAMCurveFitCoefficients" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the coefficients of the polynomial that approximates the measured AM-to-AM characteristic of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Upon return, contains the coefficients of the polynomial that approximates the measured AM-to-AM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsAMToAMCurveFitCoefficients() function in C.</remarks>
<lastupdated>1/7/2015 3:49:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults.GetAMToPMCurveFitCoefficients(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToPMCurveFitCoefficients" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the coefficients of the polynomial that approximates the measured AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.</param>
<param name="value">
Returns the coefficients of the polynomial that approximates the measured AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetResultsAMToPMCurveFitCoefficients() function in C.</remarks>
<lastupdated>1/7/2015 3:50:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the AMPM measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:30:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureAMToAMCurveFit(System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAMToAMCurveFit" nihasget="0" nihasset="0" niparameters="selectorString,amToAMCurveFitOrder,amToAMCurveFitType" niparametertypes="System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Configures the degree of the polynomial and the cost-function used to approximate the measured AM-to-AM response of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="amToAMCurveFitOrder">
Specifies the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</param>
<param name="amToAMCurveFitType">
Specifies the cost-function for polynomial approximation of the AM-to-AM characteristic of the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgAMToAMCurveFit() function in C.</remarks>
<lastupdated>12/17/2014 5:01:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureAMToPMCurveFit(System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAMToPMCurveFit" nihasget="0" nihasset="0" niparameters="selectorString,amToPMCurveFitOrder,amToPMCurveFitType" niparametertypes="System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Configures the degree of the polynomial and the cost-function used to approximate the measured AM-to-PM response of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="amToPMCurveFitOrder">
Specifies the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</param>
<param name="amToPMCurveFitType">
Specifies the cost-function for polynomial approximation of the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgAMToPMCurveFit() function in C.</remarks>
<lastupdated>1/2/2015 3:22:44 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingEnabled">
Specifies whether to enable averaging for the measurement.</param>
<param name="averagingCount">
Specifies the number of acquisitions used for averaging when you set the averagingEnabled parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgAveraging() function in C. </remarks>
<lastupdated>1/2/2015 4:14:35 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureDutAverageInputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,dutAverageInputPower" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dutAverageInputPower">
Specifies the average power, in dBm, of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgDUTAverageInputPower() function in C.</remarks>
<lastupdated>12/12/2014 4:15:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="measurementInterval">
Specifies the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgMeasurementInterval() function in C.</remarks>
<lastupdated>8/10/2015 3:32:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureMeasurementSampleRate(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,sampleRateMode,sampleRate" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition sample rate, in samples per second (S/s), for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="sampleRateMode">
Specifies whether the acquisition sample rate is based on the reference waveform.</param>
<param name="sampleRate">
Specifies the acquisition sample rate, in  S/s, when you set the sampleRateMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgMeasurementSampleRate() function in C.</remarks>
<lastupdated>7/6/2015 12:02:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,thresholdLevel,thresholdType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold level for the samples that need to be considered for the AMPM measurement. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="thresholdEnabled">
Specifies whether to enable thresholding of the acquired samples to be used for the measurement.</param>
<param name="thresholdLevel">
Specifies either the relative or absolute threshold power level based on the value of the thresholdType parameter.</param>
<param name="thresholdType">
Specifies the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgThreshold() function in C.</remarks>
<lastupdated>12/12/2014 4:16:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.ConfigureReferenceWaveform(System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmReferenceWaveformIdleDurationPresent,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceWaveform" nihasget="0" nihasset="0" niparameters="selectorString,referenceWaveform,idleDurationPresent,signalType" niparametertypes="System.String,NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Configures the reference waveform and its properties for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="referenceWaveform">
Specifies the complex baseband equivalent of the RF signal applied at the input port of the device under test when performing the measurement.</param>
<param name="idleDurationPresent">
Specifies whether the reference waveform contains an idle duration.</param>
<param name="signalType">
Specifies whether the reference waveform is a modulated signal or tones. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMCfgReferenceWaveform() function in C.</remarks>
<lastupdated>12/12/2014 4:16:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetMeasurementInterval() function in C.</remarks>
<lastupdated>8/10/2015 3:33:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains the duration, in seconds, of the reference waveform considered for the AMPM measurement. When the reference waveform contains an idle duration, the AMPM measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetMeasurementInterval() function in C. 
</remarks>
<lastupdated>8/10/2015 3:33:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetDutAverageInputPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the average power, in dBm, of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/17/2014 11:21:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetDutAverageInputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains the average power, in dBm, of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/18/2014 3:54:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets the traces to be stored and retrieved after performing the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the AMPM measurement are enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAllTracesEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 11:52:48 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the AMPM measurement are enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAllTracesEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 12:31:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAMToAMCurveFitOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAMToAMCurveFitOrder() function in C.
</remarks>
<lastupdated>12/17/2014 11:19:04 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAMToAMCurveFitOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAMToAMCurveFitOrder() function in C.
</remarks>
<lastupdated>12/18/2014 3:51:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAMToAMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Gets the polynomial approximation cost-function of the device under test AM-to-AM characteristic. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the polynomial approximation cost-function of the device under test AM-to-AM characteristic.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAMToAMCurveFitType() function in C.
</remarks>
<lastupdated>1/9/2015 1:47:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAMToAMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Sets the polynomial approximation cost-function of the device under test AM-to-AM characteristic. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains the polynomial approximation cost-function of the device under test AM-to-AM characteristic.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAMToAMCurveFitType() function in C.
</remarks>
<lastupdated>12/18/2014 3:48:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAMToPMCurveFitOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAMToPMCurveFitOrder() function in C.
</remarks>
<lastupdated>1/5/2015 4:28:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAMToPMCurveFitOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAMToPMCurveFitOrder() function in C.
</remarks>
<lastupdated>12/18/2014 3:51:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAMToPMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Gets the polynomial approximation cost-function of the device under test AM-to-PM characteristic.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the polynomial approximation cost-function of the device under test AM-to-PM characteristic.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAMToPMCurveFitType() function in C.
</remarks>
<lastupdated>1/5/2015 4:12:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAMToPMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Sets the polynomial approximation cost-function of the device under test AM-to-PM characteristic. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains the polynomial approximation cost-function of the device under test AM-to-PM characteristic. 
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAMToPMCurveFitType() function in C.
</remarks>
<lastupdated>12/18/2014 3:53:35 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging is enabled for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether averaging is enabled for the AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAveragingEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 4:43:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Specifies whether to enable averaging for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Contains a value that indicates whether to enable averaging for the AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAveragingEnabled() function in C.
</remarks>
<lastupdated>12/18/2014 3:54:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
Upon return, contains the number of acquisitions used for averaging.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetAveragingCount() function in C.
</remarks>
<lastupdated>12/18/2014 10:59:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
Contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.True" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetAveragingCount() function in C.
</remarks>
<lastupdated>12/22/2014 2:48:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMeasurementSampleRate(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate, in samples per second (S/s).
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition sample rate, in S/s.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetMeasurementSampleRate() function in C.
</remarks>
<lastupdated>7/6/2015 12:02:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementSampleRate(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition sample rate, in samples per second (S/s), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the acquisition sample rate, in S/s, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetMeasurementSampleRate() function in C.
</remarks>
<lastupdated>7/6/2015 12:03:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the acquisition sample rate is based on the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether the acquisition sample rate is based on the reference waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetMeasurementSampleRateMode() function in C.
</remarks>
<lastupdated>12/17/2014 3:05:34 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the acquisition sample rate is based on the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether the acquisition sample rate is based on the reference waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetMeasurementSampleRateMode() function in C.
</remarks>
<lastupdated>12/18/2014 4:20:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetSignalType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSignalType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains a value that indicates whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetSignalType() function in C.
</remarks>
<lastupdated>1/6/2015 4:52:06 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetSignalType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSignalType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetSignalType() function in C.
</remarks>
<lastupdated>12/18/2014 4:22:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets either the relative or absolute threshold power level. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains either the relative or absolute threshold power level.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetThresholdLevel() function in C.
</remarks>
<lastupdated>12/18/2014 2:36:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetThresholdLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType@)" crefType="PartiallyQualified" /> method.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains either the relative or absolute threshold power level based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType@)" crefType="PartiallyQualified" /> method.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetThresholdLevel() function in C.
</remarks>
<lastupdated>1/7/2015 3:27:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether thresholding of the acquired samples to use for the AMPM measurement is enabled.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains a value that indicates whether thresholding of the acquired samples to use for the AMPM measurement is enabled.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetThresholdEnabled() function in C.
</remarks>
<lastupdated>1/6/2015 4:53:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable thresholding of the acquired samples used for the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether to enable thresholding of the acquired samples used for the AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetThresholdEnabled() function in C.
</remarks>
<lastupdated>1/8/2015 10:19:08 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the power level used for thresholding.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetThresholdType() function in C.
</remarks>
<lastupdated>12/17/2014 11:30:55 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the power level used for thresholding.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetThresholdType() function in C.
</remarks>
<lastupdated>12/18/2014 4:23:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the AMPM measurement is enabled.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
<see langword="True" /> if AMPM measurement is enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMGetMeasurementEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 5:31:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Specifies whether to enable the AMPM measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="value">
<see langword="true" /> if the AMPM measurement is enabled; otherwise,  <see langword="false" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_AMPMSetMeasurementEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 12:39:16 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for AMPM  measurement.   </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the maximum number of threads used for parallelism in the AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMGetNumberOfAnalysisThreads() function in C. </remarks>
<lastupdated>12/17/2014 11:22:04 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for AMPM measurement.    </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the maximum number of threads used for parallelism in AMPM measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_AMPMSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>1/8/2015 11:27:24 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetFrequencyOffsetCorrectionEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled" nireturnvaluetype="System.Int32">
      <summary>
Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmFrequencyOffsetCorrectionEnabled" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetFrequencyOffsetCorrectionEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled" nireturnvaluetype="System.Int32">
      <summary>
Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmFrequencyOffsetCorrectionEnabled" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMaximumTimingError(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMaximumTimingError" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMaximumTimingError" crefType="PartiallyQualified" /> attribute.The default value is 0.00002.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMaximumTimingError(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMaximumTimingError" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMaximumTimingError" crefType="PartiallyQualified" /> attribute.The default value is 0.00002.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
<lastupdated>7/10/2014 10:15:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3dB bandwidth of the RBW filter.
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the bin width of the spectrum 
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the IM measurement
</summary>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFrequencyDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition.Relative" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFrequencyDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition.Relative" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFundamentalLowerToneFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalLowerToneFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalLowerToneFrequency" crefType="PartiallyQualified" /> attribute.The default value is -1 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFundamentalLowerToneFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalLowerToneFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalLowerToneFrequency" crefType="PartiallyQualified" /> attribute.The default value is -1 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFundamentalUpperToneFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalUpperToneFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalUpperToneFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFundamentalUpperToneFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalUpperToneFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalUpperToneFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAutoIntermodsSetupEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the intermod frequencies or uses user-specified frequencies.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement computes the intermod frequencies or uses user-specified frequencies.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAutoIntermodsSetupEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAutoIntermodsSetupEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled" nireturnvaluetype="System.Int32">
      <summary>Sets whether the measurement computes the intermod frequencies or uses user-specified frequencies.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement computes the intermod frequencies or uses user-specified frequencies. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetMaximumIntermodOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMaximumIntermodOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order up to which the RFmx driver measures odd order intermodulation products when you set the Auto Intermods Setup Enabled method to True. The lower and upper intermodulation products are measured for each order.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the order up to which the RFmx driver measures odd order intermodulation products when you set the Auto Intermods Setup Enabled method to True. The lower and upper intermodulation products are measured for each order.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMaximumIntermodOrder" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMaximumIntermodOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMaximumIntermodOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order up to which the RFmx driver measures odd order intermodulation products when you set the Auto Intermods Setup Enabled method to True. The lower and upper intermodulation products are measured for each order.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the order up to which the RFmx driver measures odd order intermodulation products when you set the Auto Intermods Setup Enabled method to True. The lower and upper intermodulation products are measured for each order.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMaximumIntermodOrder" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetNumberOfIntermods(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfIntermods" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfIntermods" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetNumberOfIntermods(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfIntermods" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfIntermods" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetIntermodEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntermodEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIntermodEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntermodEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetIntermodOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntermodOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the intermod. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the order of the intermod. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodOrder" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIntermodOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntermodOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order of the intermod. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the order of the intermod. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodOrder" crefType="PartiallyQualified" /> attribute.The default value is 3.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetIntermodSide(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntermodSide" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodSide" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide.Both" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIntermodSide(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntermodSide" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodSide" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide.Both" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetLowerIntermodFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerIntermodFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency of the lower intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency of the lower intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLowerIntermodFrequency" crefType="PartiallyQualified" /> attribute.The default value is -3 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLowerIntermodFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLowerIntermodFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency of the lower intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the frequency of the lower intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLowerIntermodFrequency" crefType="PartiallyQualified" /> attribute.The default value is -3 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetUpperIntermodFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperIntermodFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency of the upper intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency of the upper intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMUpperIntermodFrequency" crefType="PartiallyQualified" /> attribute.The default value is 3 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetUpperIntermodFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUpperIntermodFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency of the upper intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Specifies the imintermod number.<br /> Example: "imintermod0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the frequency of the upper intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMUpperIntermodFrequency" crefType="PartiallyQualified" /> attribute.The default value is 3 MHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Gets the method used to perform the IM measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the method used to perform the IM measurement.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Normal" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Sets the method used to perform the IM measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the method used to perform the IM measurement.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Normal" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLocalPeakSearchEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLocalPeakSearchEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLocalPeakSearchEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLocalPeakSearchEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the RBW.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement computes the RBW.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the RBW.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement computes the RBW.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 10 kHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 10 kHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the response of the digital RBW filter.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the response of the digital RBW filter.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.Gaussian" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the response of the digital RBW filter.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the response of the digital RBW filter.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType.Gaussian" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement computes the sweep time.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement computes the sweep time.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the sweep time when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 0.001.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 0.001.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable averaging for the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable averaging for the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable averaging for the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Rms" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Rms" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type to use to reduce spectral leakage.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the FFT window type to use to reduce spectral leakage.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.FlatTop" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type to use to reduce spectral leakage.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the FFT window type to use to reduce spectral leakage.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow.FlatTop" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula:        <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>        This method is used only when the acquisition span is less than the device instantaneous bandwidth.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula:        <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>        This method is used only when the acquisition span is less than the device instantaneous bandwidth.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftPadding" crefType="PartiallyQualified" /> attribute.The default value is -1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula:        <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>        This method is used only when the acquisition span is less than the device instantaneous bandwidth.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula:        <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>        This method is used only when the acquisition span is less than the device instantaneous bandwidth.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftPadding" crefType="PartiallyQualified" /> attribute.The default value is -1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIFOutputPowerOffsetAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIFOutputPowerOffsetAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetNearIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the offset by which to adjust the IF output power level for the intermods near the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the offset by which to adjust the IF output power level for the intermods near the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNearIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 10 dB.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetNearIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the offset by which to adjust the IF output power level for the intermods near the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the offset by which to adjust the IF output power level for the intermods near the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNearIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 10 dB.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetFarIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the offset by which to adjust the IF output power level for the intermods that are far from the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the offset by which to adjust the IF output power level for the intermods that are far from the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFarIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 20 dB.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFarIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the offset by which to adjust the IF output power level for the intermods that are far from the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the offset by which to adjust the IF output power level for the intermods that are far from the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFarIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 20 dB.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the traces to be stored and retrieved after performing the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the IM measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the IM measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for the IM measurement.          The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for the IM measurement.          The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for the IM measurement.          The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the maximum number of threads used for parallelism for the IM measurement.          The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,frequencyDefinition" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Configures whether you can specify the tones and intermod frequencies as either relative to the RF center frequency or as absolute frequencies.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="frequencyDefinition">Specifies whether you can specify the tones and intermod frequencies as either relative to the RF center frequency or as absolute frequencies.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureFundamentalTones(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFundamentalTones" nihasget="0" nihasset="0" niparameters="selectorString,lowerToneFrequency,upperToneFrequency" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the upper and lower frequencies in a two-tone input signal.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="lowerToneFrequency">Specifies the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.</param>
<param name="upperToneFrequency">Specifies the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureAutoIntermodsSetup(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAutoIntermodsSetup" nihasget="0" nihasset="0" niparameters="selectorString,autoIntermodsSetupEnabled,maximumIntermodOrder" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures whether the measurement computes the intermod frequencies or uses manually specified frequencies. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="autoIntermodsSetupEnabled">Specifies whether the measurement computes the intermod frequencies or uses manually specified frequencies.</param>
<param name="maximumIntermodOrder">Specifies the order up to which the RFmx driver measures odd order intermodulation products when you set the <em>autoIntermodsSetupEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />. The lower and upper intermodulation products are measured for each order.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,measurementMethod" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Configures the method for performing the IM measurement. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="measurementMethod">Specifies the method for performing the IM measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureNumberOfIntermods(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfIntermods" nihasget="0" nihasset="0" niparameters="selectorString,numberOfIntermods" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="numberOfIntermods">Specifies the number of intermods to measure when you set the IM Auto Intermods Setup Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureIntermod(System.String,System.Int32,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIntermod" nihasget="0" nihasset="0" niparameters="selectorString,intermodOrder,lowerIntermodFrequency,upperIntermodFrequency,intermodSide,intermodEnabled" niparametertypes="System.String,System.Int32,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures the intermod order, intermod side, lower intermod frequency, and upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.<br />
		Use "intermod(n)" as the selector string to configure this method.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  intermod number.  
			Example:<br /><span class="monospace">"intermod0"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method  to build the selector string.<br /></param>
<param name="intermodOrder">Specifies the order of the intermod.</param>
<param name="lowerIntermodFrequency">Specifies the frequency of the lower intermodulation product. This value is expressed in Hz.</param>
<param name="upperIntermodFrequency">Specifies the frequency of the upper intermodulation product. This value is expressed in Hz.</param>
<param name="intermodSide">Specifies whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them.</param>
<param name="intermodEnabled">Specifies whether to enable an intermod for the IM measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureIntermodArray(System.String,System.Int32[],System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIntermodArray" nihasget="0" nihasset="0" niparameters="selectorString,intermodOrder,lowerIntermodFrequency,upperIntermodFrequency,intermodSide,intermodEnabled" niparametertypes="System.String,System.Int32[],System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the intermod order, intermod side, lower intermod frequency, and upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="intermodOrder">Specifies array of orders of the intermod.</param>
<param name="lowerIntermodFrequency">Specifies an array of the frequencies of the lower intermodulation products. This value is expressed in Hz.</param>
<param name="upperIntermodFrequency">Specifies an array of frequencies of the upper intermodulation products. This value is expressed in Hz.</param>
<param name="intermodSide">Specifies whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them.</param>
<param name="intermodEnabled">Specifies whether to enable an intermod for the IM measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the RBW filter. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the Measurements topic for more details on RBW and sweep time.</param>
<param name="rbw">Specifies the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <em>rbwAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.</param>
<param name="rbwFilterType">Specifies the response of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="sweepTimeAuto">Specifies whether the measurement computes the sweep time.</param>
<param name="sweepTimeInterval">Specifies the sweep time, in seconds, when you set the <em>sweepTimeAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the IM measurement.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averagingType">Specifies the averaging type for averaging the power over multiple acquisitions. The averaged power trace is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the window and FFT to obtain a spectrum for the IM measurement.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="fftWindow">Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectral Measurements&gt; topic for more information about FFT window types.</param>
<param name="fftPadding">Specifies the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula: <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>. This parameter is used only when the acquisition span is less than the device instantaneous bandwidth.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
<lastupdated>7/10/2014 3:53:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the threshold is the absolute power, in dBm. 
</summary>
<lastupdated>7/10/2014 3:53:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the threshold is relative to the peak power, in dB, of the acquired samples.
</summary>
<lastupdated>7/10/2014 3:53:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the ACP measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:30:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchCarrierMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCarrierMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,totalRelativePower,carrierFrequency,integrationBandwidth" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the measured carrier power.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="absolutePower">Upon return, contains the measured carrier power. The carrier power is reported in dBm or dBm/Hz based on the value of <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits" crefType="PartiallyQualified" />.</param>
<param name="totalRelativePower">Upon return, contains the carrier power, in dB, measured relative to the total carrier power of all active carriers.</param>
<param name="carrierFrequency">Upon return, contains the center frequency, in hertz (Hz), of the carrier relative to the center frequency.</param>
<param name="integrationBandwidth">Upon return, contains the frequency range, in Hz, over which the measurement integrates the carrier power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchCarrierMeasurement() function in C.</remarks>
<lastupdated>6/29/2015 2:29:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchFrequencyResolution(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequencyResolution" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 3:58:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchOffsetMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchOffsetMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,lowerRelativePower,upperRelativePower,lowerAbsolutePower,upperAbsolutePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the absolute and relative powers measured in the offset channel. The relative powers are measured relative to the integrated power of the power reference carrier. The relative powers are not measured if you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetPowerReferenceCarrier" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Passive" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="lowerRelativePower">Upon return, contains the lower offset channel power, in dB, measured relative to the integrated power of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" /> method.</param>
<param name="upperRelativePower">Upon return, contains the upper offset channel power, in dB, measured relative to the integrated power of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" /> method.</param>
<param name="lowerAbsolutePower">Upon return, contains the lower offset channel power.</param>
<param name="upperAbsolutePower">Upon return, contains the upper offset channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchOffsetMeasurement() function in C.</remarks>
<lastupdated>1/9/2015 11:36:54 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum used for adjacent channel power (ACP) measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="spectrum">Upon return, contains the spectrum.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchSpectrum() function in C.</remarks>
<lastupdated>9/18/2014 12:14:57 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchTotalCarrierPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalCarrierPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the total integrated power of all the active carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBm" crefType="PartiallyQualified" />. This method returns the power spectral density based on the power in all the active carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="totalCarrierPower"> Upon return, contains the total integrated power of all the active carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBm" crefType="PartiallyQualified" />. This method returns the power spectral density based on the power in all the active carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchTotalCarrierPower() function in C.</remarks>
<lastupdated>1/9/2015 11:38:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.Read(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,carrierAbsolutePower,offsetCh0LowerRelativePower,offsetCh0UpperRelativePower,offsetCh1LowerRelativePower,offsetCh1UpperRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns the adjacent channel power (ACP) measurement results.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement</param>
<param name="carrierAbsolutePower"> Upon return, contains the power measured in carrier 0. The carrier power is reported in dBm or dBm/Hz based on the value of the ACP Power Units </param>
<param name="offsetCh0LowerRelativePower">Upon return, contains the power measured in offset 0 in the negative band, relative to the power measured in the reference carrier specified using <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetPowerReferenceCarrier(System.String,System.Int32@)" crefType="PartiallyQualified" />.</param>
<param name="offsetCh0UpperRelativePower">Upon return, contains the power measured in offset 0 in the positive band, relative to the power measured in the reference carrier specified using <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" crefType="PartiallyQualified" />.</param>
<param name="offsetCh1LowerRelativePower">Upon return, contains the power measured in offset 1 in the negative band, relative to the power measured in the reference carrier specified using <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetPowerReferenceCarrier(System.String,System.Int32@)" crefType="PartiallyQualified" />.</param>
<param name="offsetCh1UpperRelativePower">Upon return, contains the power measured in offset 1 in the positive band, relative to the power measured in the reference carrier specified using <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPRead() function in C.</remarks>
<lastupdated>1/9/2015 11:38:52 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz).
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the center frequency, in Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsCarrierFrequency() function in C.</remarks>
<lastupdated>1/6/2015 1:43:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the carrier    power.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency range, in Hz, over which the measurement integrates the carrier    power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>1/6/2015 1:44:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetCarrierAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the measured carrier power.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the measured carrier power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsCarrierAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 12:15:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetCarrierTotalRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierTotalRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier power, in dB, measured relative to the total carrier power of all active carriers.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier power, in dB, measured relative to the total carrier power of all active carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsCarrierTotalRelativePower() function in C.</remarks>
<lastupdated>6/29/2015 2:31:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency of the lower offset channel relative to the center frequency of the closest carrier.  The offset frequency has a negative value.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the center frequency of the lower offset channel relative to the center frequency of the closest carrier. The offset frequency has a negative value.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetFrequency() function in C.</remarks>
<lastupdated>8/3/2015 1:58:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets  the integration bandwidth used to measure the power in the lower offset channel.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the integration bandwidth used to measure the power in the lower offset channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:17:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the lower offset channel power.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the lower offset channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 12:16:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the lower offset channel power, in dB, measured relative to the integrated power of the    reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the lower offset channel power, in dB, measured relative to the integrated power of the    reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 12:18:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetFrequencyReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetFrequencyReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index of the center frequency that was used as a reference to define the center    frequency of the lower (negative) offset channel. Lower offset channels are channels that are to    the left of the reference carrier when the offset frequency specified is a positive value. The    reference carrier is the carrier that has an offset frequency closest to the lower offset channel.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index of the center frequency that was used as a reference to define the center    frequency of the lower (negative) offset channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetFrequencyReferenceCarrier() function in C.</remarks>
<lastupdated>1/6/2015 1:45:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetLowerOffsetPowerReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets  the carrier index of the measured power that was used as a reference to define the lower    (negative) offset channel relative power.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index of the measured power that was used as a reference to define the lower    (negative) offset channel relative power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsLowerOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>1/9/2015 1:46:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetTotalCarrierPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the total integrated power of all the active carriers measured. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the total integrated power of all the active carriers measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsTotalCarrierPower() function in C.</remarks>
<lastupdated>9/18/2014 12:18:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetFrequencyResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 12:16:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency of the upper offset channel relative to the center frequency of the closest carrier. The offset frequency has a positive value.
</summary>
<param name="selectorString">Specifies the result name and offset number.
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the center frequency of the upper offset channel relative to the center frequency of the closest carrier. The offset frequency has a positive value.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetFrequency() function in C.</remarks>
<lastupdated>8/3/2015 1:59:06 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the integration bandwidth used to measure the power in the upper offset channel.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the integration bandwidth used to measure the power in the upper offset channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:20:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the upper offset channel power.
</summary>
<param name="selectorString">Specifies the result name and offset number.
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the upper offset channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 12:19:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the upper offset channel power, in dB, measured relative to the integrated power of the    reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the upper offset channel power, in dB, measured relative to the integrated power of the    reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 12:21:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetFrequencyReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetFrequencyReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index of the center frequency that was used as a reference to define the center    frequency of the upper (positive) offset channel. Upper offset channels are channels that are to    the right of the reference carrier. The reference carrier is the carrier that has an offset    closest to the lower offset channel.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index of the center frequency that was used as a reference to define the center    frequency of the upper (positive) offset channel. Upper offset channels are channels that are to    the right of the reference carrier. The reference carrier is the carrier that has an offset    closest to the lower offset channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetFrequencyReferenceCarrier() function in C.</remarks>
<lastupdated>9/18/2014 12:20:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index of the measured power that was used as a reference to define the upper    (positive) offset channel relative power.
</summary>
<param name="selectorString">Specifies the result name and offset number. 
Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index of the measured power that was used as a reference to define the upper    (positive) offset channel relative power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPGetResultsUpperOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>1/6/2015 1:47:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults.FetchOffsetMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchOffsetMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,lowerRelativePower,upperRelativePower,lowerAbsolutePower,upperAbsolutePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the absolute and relative powers measured in the offset channel. The relative powers are measured relative to the integrated power of the power reference carrier. The relative powers are not measured if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetCarrierMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode)" crefType="PartiallyQualified" /> method for the reference carrier to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierMode.Passive" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the VI waits until the measurement is complete.</param>
<param name="lowerRelativePower">Upon return, contains the array of lower offset channel powers, in dB, measured relative to the integrated power of the ACP Results Lower Offset Pwr Ref Carrier. </param>
<param name="upperRelativePower">Upon return, contains the array of upper offset channel powers, in dB, measured relative to the integrated power of the ACP Results Upper Offset Pwr Ref Carrier.</param>
<param name="upperAbsolutePower">Upon return, contains the array of upper offset channel powers.</param>
<param name="lowerAbsolutePower">Upon return, contains the array of lower offset channel powers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_ACPFetchOffsetMeasurementArray() function in C.</remarks>
<lastupdated>1/9/2015 11:37:07 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW). 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:38:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the Harmonics measurement. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The Harmonics measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the Harmonics measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:38:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is the absolute power, in dBm.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is relative to the peak power, in dB, of the acquired samples.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the frequency count (Fcnt) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.FetchFrequencyTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchFrequencyTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequencyTrace" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the frequency trace for frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="frequencyTrace">Upon return, contains the frequency trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntFetchFrequencyTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:26:00 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageRelativeFrequency,averageAbsoluteFrequency,meanPhase" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the frequency and phase measured using the frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="averageRelativeFrequency">Upon return, contains the signal frequency relative to the RF center frequency.  Only samples above the threshold are used when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled" /> to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.True" />.</param>
<param name="averageAbsoluteFrequency">Upon return, contains the RF signal frequency.</param>
<param name="meanPhase">Upon return, contains the net phase of the vector sum of the I/Q samples used for frequency measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntFetchMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 12:26:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.FetchPhaseTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchPhaseTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,phaseTrace" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the phase trace for frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method  waits until the measurement is complete.  </param>
<param name="phaseTrace">Upon return, contains the phase trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntFetchPhaseTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:26:16 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.FetchPowerTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchPowerTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,powerTrace" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power trace for frequency count (Fcnt) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="powerTrace"> Upon return, contains the power trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntFetchPowerTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:26:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.Read(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageRelativeFrequency,averageAbsoluteFrequency,meanPhase" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns the frequency count (Fcnt) measurement results.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="averageRelativeFrequency"> Upon return, contains the signal frequency relative to the RF center frequency.  Only samples above the threshold are used when you set the Fcnt Threshold Enabled to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.True" crefType="PartiallyQualified" />.</param>
<param name="averageAbsoluteFrequency">Upon return, contains the RF signal frequency. </param>
<param name="meanPhase">Upon return, contains the net phase of the vector sum of the I/Q samples used for frequency measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntRead() function in C.</remarks>
<lastupdated>1/9/2015 11:44:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.GetAverageRelativeFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageRelativeFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the signal frequency relative to the RF center frequency. Only samples above the threshold are used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.True" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the signal frequency relative to the RF center frequency. Only samples above the threshold are used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetResultsAverageRelativeFrequency() function in C.</remarks>
<lastupdated>1/9/2015 11:44:19 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.GetAverageAbsoluteFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageAbsoluteFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the instantaneous frequency of the samples averaged over all acquisitions.  
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the instantaneous frequency of the samples averaged over all acquisitions. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetResultsAverageAbsoluteFrequency() function in C.</remarks>
<lastupdated>9/18/2014 12:26:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.GetMeanPhase(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanPhase" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the I/Q samples averaged over all acquisitions. The phase of the sum of these I/Q samples    is returned. Only samples above the threshold are used. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the I/Q samples averaged over all acquisitions. The phase of the sum of these I/Q samples    is returned.  Only samples above the threshold are used. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_FCntGetResultsMeanPhase() function in C.</remarks>
<lastupdated>9/18/2014 12:30:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.GetAllanDeviation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllanDeviation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the two-sample deviation of the measured frequency.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the two-sample deviation of the measured frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntResultsAllanDeviation" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults.FetchAllanDeviation(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAllanDeviation" nihasget="0" nihasset="0" niparameters="selectorString,timeout,allanDeviation" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the two-sample deviation of the measured frequency.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="allanDeviation">Upon return, contains  the two-sample deviation of the measured frequency.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQBandwidthAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the minimum acquisition bandwidth.</summary>
<lastupdated>7/3/2015 3:28:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetBandwidth(System.String,System.Double@)" /> method as the minimum acquisition bandwidth.
</summary>
<lastupdated>9/15/2015 9:30:07 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the minimum acquisition bandwidth as shown in the following equation: <format type="italics">minimum acquisition bandwidth</format> = 0.8 * <format type="italics">sample rate </format></summary>
<lastupdated>7/3/2015 3:31:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdHeadroomMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to compute and apply the headroom of the predistorted waveform or to apply the value specified by <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetHeadroom(System.String,System.Double@)" crefType="PartiallyQualified" /> on the predistorted waveform.
</summary>
<lastupdated>1/8/2015 4:30:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Off" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Off" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement returns the predistorted waveform without applying headroom.
</summary>
<lastupdated>12/12/2014 3:52:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement returns the predistorted waveform after computing and applying the headroom.
</summary>
<lastupdated>12/12/2014 3:47:38 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement returns the predistorted waveform after applying the headroom that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/7/2015 3:11:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFDutOutputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement ignores ohmic losses.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement accounts for the ohmic losses.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the RBW.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement computes the RBW.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMIntermodEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disables an intermod for the IM measurement. The results for the disabled intermods are displayed as NaN.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enables an intermod for the IM measurement.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdTargetGainType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the gain expected from the DUT after applying DPD on the input waveform.
</summary>
<lastupdated>9/11/2015 11:22:35 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType.AverageGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD polynomial or lookup table is computed by assuming that the linearized gain expected from the DUT after applying DPD on the input waveform is equal to the average power gain provided by the DUT without DPD.
</summary>
<lastupdated>9/11/2015 11:23:55 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType.LinearRegionGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LinearRegionGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD polynomial or lookup table is computed by assuming that the linearized gain expected from the DUT after applying DPD on the input waveform is equal to the gain provided by the DUT, without DPD, to the parts of the reference waveform that do not drive the DUT into non-linear gain-expansion or compression regions of its input-output characteristics.
The measurement computes the linear region gain as the average gain experienced by the parts of the reference waveform that are below a threshold which is computed as shown in the following equation:
<format type="italics">Linear region threshold (dBm)</format> = Max {-25, Min {<format type="italics">reference waveform power</format>} + 6, <format type="italics">DUT Average Input Power</format> -15}
</summary>
<lastupdated>9/16/2015 1:34:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType.PeakInputPowerGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PeakInputPowerGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD polynomial or lookup table is computed by assuming that the linearized gain expected from the DUT after applying DPD on the input waveform is equal to the average power gain provided by the DUT, without DPD, to all the samples of the reference waveform for which the magnitude is greater than the peak power in the <format tpye="italics">reference waveform (dBm)</format> - 0.5 dB.
</summary>
<lastupdated>9/16/2015 1:35:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdLookupTableType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the type of the DPD lookup table (LUT).      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Input powers in the LUT are specified in dBm.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType.Linear" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Linear" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Input powers in the LUT are specified in watts.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the channel power (CHP) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageChannelPower,averageChannelPsd,frequencyResolution" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the averaged channel power (CHP) measurements.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="averageChannelPower">Upon return, contains the averaged CHP, in dBm, measured in the specified integration bandwidth.</param>
<param name="averageChannelPsd">Upon return, contains the power spectral density of the channel, in dBm/Hz. </param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPFetchMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 12:24:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.FetchCarrierMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCarrierMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,psd,relativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches channel power (CHP) measurement results. 
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="absolutePower">Upon return, contains the averaged channel power, in dBm, measured in the specified integration bandwidth.  </param>
<param name="psd">Upon return, contains the power spectral density of the channel, in dBm/Hz. </param>
<param name="relativePower">Upon return, contains the carrier power, in dB, measured relative to the total carrier power.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPFetchCarrierMeasurement() function in C.</remarks>
<lastupdated>8/7/2015 7:58:57 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum used for channel power (CHP) measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="spectrum">Upon return, contains the spectrum trace values.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPFetchSpectrum() function in C.</remarks>
<lastupdated>9/18/2014 12:24:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.FetchTotalCarrierPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalCarrierPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the total integrated carrier power. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="totalCarrierPower">Upon return, contains the total integrated power of all carriers, in dBm. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPFetchTotalCarrierPower() function in C.</remarks>
<lastupdated>7/29/2015 3:50:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.Read(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,psd" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns the channel power (CHP) measurement results.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="absolutePower">Upon return, contains the averaged CHP, in dBm, measured in the specified integration bandwidth.</param>
<param name="psd">Upon return, contains the power spectral density of the channel, in dBm/Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPRead() function in C.</remarks>
<lastupdated>7/5/2014 2:43:29 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetAverageChannelPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageChannelPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaged channel power (CHP), in dBm, measured in the specified integration bandwidth.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the CHP, in dBm, measured in the specified integration bandwidth.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsAverageChannelPower() function in C.</remarks>
<lastupdated>9/18/2014 12:24:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetCarrierAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier power, in dBm, measured in the integration bandwidth that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetIntegrationBandwidth(System.String,System.Double)" /> method. 
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier power, in dBm, measured in the integration bandwidth that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetIntegrationBandwidth(System.String,System.Double)" /> method. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsCarrierAbsolutePower() function in C.</remarks>
<lastupdated>8/7/2015 7:01:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetAverageChannelPowerPsd(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageChannelPowerPsd" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the spectral density of the averaged channel power (CHP), in dBm/Hz, of the channel.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the spectral density of the averaged CHP, in dBm/Hz, of the channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. Use GetAverageCarrierPsd to get the value. This method maps to the RFmxSpecAn_CHPGetResultsAverageChannelPSD() function in C.</remarks>
<lastupdated>9/24/2014 11:45:39 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetCarrierPsd(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierPsd" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power spectral density, in dBm/Hz, of the channel.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power spectral density, in dBm/Hz, of the channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsCarrierPSD() function in C.</remarks>
<lastupdated>8/7/2015 7:02:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetFrequencyResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency resolution, in Hz, of the spectrum acquired by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method is obsoleted. This method maps to the RFmxSpecAn_CHPGetResultsFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 12:24:58 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetTotalCarrierPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the total integrated carrier power of all carriers, in dBm.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the total integrated carrier power of all carriers, in dBm.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsTotalCarrierPower() function in C.</remarks>
<lastupdated>9/11/2015 11:07:34 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz), of the carrier relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetCenterFrequency(System.String,System.Double)" /> method.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string..</param>
<param name="value">Upon return, contains the center frequency, in Hz, of the carrier relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetCenterFrequency(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsCarrierFrequency() function in C.</remarks>
<lastupdated>8/7/2015 7:01:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the  frequency range, in hertz (Hz), over which the measurement integrates the carrier power.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the  frequency range, in Hz, over which the measurement integrates the carrier power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>8/7/2015 7:02:10 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults.GetCarrierRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets  the carrier power, in dB, measured relative to the total carrier power of all carriers. 
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains  the carrier power, in dB, measured relative to the total carrier power of all carriers.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CHPGetResultsCarrierRelativePower() function in C.</remarks>
<lastupdated>8/7/2015 7:03:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
You do not need to use a selector string to configure or read this  for default signal instance.
</summary>
<lastupdated>9/2/2014 10:43:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm.
</summary>
<lastupdated>8/28/2014 1:52:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBmPerHertz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBmPerHertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm/Hz.
</summary>
<lastupdated>7/10/2014 11:55:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBW" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBW" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBW.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBV.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBmV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBmV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBmV.
</summary>
<lastupdated>7/10/2014 11:55:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.dBuV" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBuV" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBuV.
</summary>
<lastupdated>7/10/2014 11:55:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.Watts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Watts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in W.
</summary>
<lastupdated>7/10/2014 11:55:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.Volts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in volts.
</summary>
<lastupdated>7/10/2014 11:55:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumPowerUnits.VoltsSquared" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="VoltsSquared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in volts2.
</summary>
<lastupdated>7/10/2014 11:55:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Separates two tones with frequencies close to each other but with widely-differing amplitudes. 
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the offset channel is present on one side, or on both sides of the carriers.
</summary>
<lastupdated>6/16/2015 2:04:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband.Negative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Negative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures a lower offset segment to the left of the leftmost carrier. 
</summary>
<lastupdated>6/16/2015 2:05:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband.Positive" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Positive" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures an upper offset segment to the right of the rightmost carrier.
</summary>
<lastupdated>6/16/2015 2:05:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetSideband.Both" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Both" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures both negative and positive offset segments.
</summary>
<lastupdated>6/16/2015 2:05:16 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPropertyId" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies all the attribute identifiers.
</summary>
<lastupdated>8/21/2014 3:26:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the expected carrier frequency, in hertz (Hz), of the RF signal that needs to be acquires. The signal analyzer tunes to this frequency.
</summary>
<lastupdated>8/28/2014 12:27:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ExternalAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ExternalAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the attenuation, in dB, of a switch (or cable) connected to the RF IN connector of the RF signal analyzer.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference level, in dBm, which represents the maximum expected power of the RF input signal.
</summary>
<lastupdated>8/28/2014 12:28:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TriggerType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the type of reference trigger to use for signal acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DigitalEdgeTriggerSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns  the source terminal for the digital-edge trigger.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DigitalEdgeTriggerEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the RF vector signal analyzer detects a  or  on the  signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQPowerEdgeTriggerSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the channel from which the device monitors the trigger.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQPowerEdgeTriggerLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Relative" /> and in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType.Absolute" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. 
</summary>
<lastupdated>9/11/2015 11:47:50 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQPowerEdgeTriggerSlope" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the device asserts the trigger when the signal power is rising or falling.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TriggerDelay" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TriggerDelay" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the trigger delay time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TriggerMinimumQuietTimeMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the minimum quiet time used for triggering.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TriggerMinimumQuietTimeDuration" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies a time duration, in seconds, for which the signal must be quiet before the RF signal    analyzer arms the I/Q Power Edge trigger.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ResultFetchTimeout" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ResultFetchTimeout" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the time, in seconds, to wait before results are available. Set this value to a time longer than expected for fetching the measurement. A value of -1 specifies that the RFmx driver  waits until the measurement is complete.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AutoLevelInitialReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AutoLevelInitialReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the initial reference level, in dBm, which the auto level function uses to estimate the peak power of the input signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable spurious emission (Spur) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for spurious emission (Spur)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurNumberOfRanges" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurNumberOfRanges" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of range configurations.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to measure the spurious emissions in the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeRelativeAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeRelativeAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the attenuation, in dB, relative to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use the attenuation to compensate for the variations in external attenuation    when offset segments are spread wide in frequency.
</summary>
<lastupdated>1/9/2015 1:41:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeNumberOfSpursToReport" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeNumberOfSpursToReport" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of spurious emissions (Spur) that the measurement should report in the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the start frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the stop frequency of the frequency range, in hertz (Hz), for the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the spurious emission (Spur) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spurious emission (Spur) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeAbsoluteLimitMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the absolute limit threshold is a flat line or a line with a slope.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeAbsoluteLimitStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the absolute power limit, in dBm, corresponding to the beginning of the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeAbsoluteLimitStop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the absolute power limit, in dBm, corresponding to the end of the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the spurious    emissions (Spur) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the overall measurement status.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeSpurFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeSpurFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), of the detected spurious emission (Spur).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeSpurAmplitude" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeSpurAmplitude" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dBm, of the detected spurious emission (Spur).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeSpurAbsoluteLimit" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeSpurAbsoluteLimit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the threshold, in dBm, used to calculate the margin of the detected spurious emission (Spur).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeSpurMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeSpurMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the difference between the amplitude and the absolute limit of the detected spurious emission (Spur).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the measurement status for the frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurResultsRangeSpurNumberOfDetectedSpurs" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurResultsRangeSpurNumberOfDetectedSpurs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of detected spurious emissions (Spur) in the specified frequency range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurTraceRangeIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurTraceRangeIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the index of the range used to store and retrieve spurious emission (Spur) traces.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the complementary cumulative distribution function (CCDF)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the complementary cumulative distribution function (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for complementary cumulative    distribution function (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfNumberOfRecords" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfNumberOfRecords" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for the complementary cumulative distribution function    (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfRbwFilterRrcAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfThresholdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the complementary    cumulative distribution function (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfThresholdLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfThresholdLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies either the relative or absolute threshold power level.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfThresholdType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the    complementary cumulative distribution function (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsMeanPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsMeanPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the average power, in dBm, of all the samples.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsMeanPowerPercentile" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsMeanPowerPercentile" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the percentage of samples that have more power than the value returned by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:39:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsTenPercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsTenPercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 10% of the total samples in the signal    are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsOnePercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsOnePercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 1% of the total samples in the signal    are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsOneTenthPercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsOneTenthPercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 0.1% of the total samples in the signal    are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsOneHundredthPercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsOneHundredthPercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 0.01% of the total samples in the signal    are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsOneThousandthPercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsOneThousandthPercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 0.001% of the total samples in the    signal are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsOneTenThousandthPercentPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsOneTenThousandthPercentPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, above the mean power, over which 0.0001% of the total samples in the    signal are present.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsPeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsPeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak power of the acquired signal, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:39:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.CcdfResultsMeasuredSamplesCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CcdfResultsMeasuredSamplesCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the total number of samples measured. The total number of samples includes only the samples    above the threshold, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" />.
</summary>
<lastupdated>1/9/2015 1:39:24 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpNumberOfCarriers" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfCarriers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpCarrierMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpCarrierMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to consider the carrier power as part of total carrier power measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpCarrierRrcFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel    before  measuring the carrier channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpCarrierRrcFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter on the carrier channel before    measuring the carrier channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpNumberOfOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of offset channels.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the offset channel for adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the center frequency, in hertz (Hz), of the offset channel, relative to the center    frequency of the closest carrier. The absolute value of the offset frequency, along with the sideband information, is considered to configure an offset channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetSideband" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the offset segment is present on one side, or on both sides of the    carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetPowerReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the carrier, for which the measured power is the power reference to measure offset    channel relative power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetPowerReferenceSpecific" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetPowerReferenceSpecific" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the carrier index, for which the measured power is the power reference for the offset    channel relative power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the offset    channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetRelativeAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the attenuation, in dB, relative to the  method.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetRrcFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired offset channel before    measuring the offset channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetRrcFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter on the acquired offset    channel before measuring the offset channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpMeasurementMethod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the method for performing the adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpPowerUnits" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the adjacent channel power (ACP) power units.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for adjacent channel power (ACP)  measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether averaging is enabled for the adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the factor by which the time-domain waveform is zero-padded before FFT.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:38:57 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpNoiseCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable compensation of the channel powers for the inherent noise floor of the RF signal analyzer.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the adjacent    channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsTotalCarrierPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsTotalCarrierPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the total integrated power of all the active carriers measured.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsFrequencyResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsFrequencyResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the center frequency, in hertz (Hz).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency range, in hertz (Hz), over which the measurement integrates the carrier    power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsCarrierAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the measured carrier power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsCarrierTotalRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsCarrierTotalRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier power, in dB, measured relative to the total carrier power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetFrequencyReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetFrequencyReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier index of the center frequency that was used as a reference to define the center    frequency of the lower (negative) offset channel. Lower offset channels are channels that are to    the left of the reference carrier when the offset frequency specified is a positive value. The    reference carrier is the carrier that has an offset frequency closest to the lower offset channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the center frequency of the lower offset channel relative to the center frequency of the    closest carrier. The sign of offset frequency is negative.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns  the integration bandwidth used to measure the power in the lower offset channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetPowerReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns  the carrier index of the measured power that was used as a reference to define the lower    (negative) offset channel relative power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the lower offset channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsLowerOffsetRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the lower offset channel power, in dB, measured relative to the integrated power of the    reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetFrequencyReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetFrequencyReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier index of the center frequency that was used as a reference to define the center    frequency of the upper (positive) offset channel. Upper offset channels are channels that are to    the right of the reference carrier. The reference carrier is the carrier that has an offset    closest to the lower offset channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the center frequency of the upper offset channel relative to the center frequency of the    closest carrier. The sign of offset frequency is negative.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the integration bandwidth used to measure the power in the upper offset channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetPowerReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier index of the measured power that was used as a reference to define the upper    (positive) offset channel relative power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the upper offset channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpResultsUpperOffsetRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the upper offset channel power, in dB, measured relative to the integrated power of the    reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpIFOutputPowerOffsetAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes an IF output power level offset for the offset channels to improve the dynamic range of the adjacent channel power (ACP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpNearIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the offset, in dB, by which to adjust the IF output power level for offset channels that are near to the carrier channel to improve the dynamic range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpFarIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the offset, in dB, by which to adjust the IF output power level for offset channels that are far from the carrier channel to improve the dynamic range.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable occupied bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwBandwidthPercentage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwBandwidthPercentage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the percentage of the total power that is contained in the frequency range defined by the    occupied bandwidth (OBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for occupied bandwidth (OBW)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwSpan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwSpan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the occupied bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for occupied bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the occupied    bandwidth (OBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwResultsOccupiedBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsOccupiedBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), that occupies the percentage of the total power of the signal that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetBandwidthPercentage(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:40:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwResultsAveragePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsAveragePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the total power, in dBm, measured in the averaged spectrum acquired by the occupied    bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwResultsStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the start frequency, in hertz (Hz), of the occupied bandwidth (OBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwResultsStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the stop frequency, in hertz (Hz), of the occupied bandwidth (OBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwResultsFrequencyResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsFrequencyResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency resolution, in hertz (Hz), of the spectrum acquired by the occupied bandwidth    (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwPowerUnits" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the units for the absolute power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable transmit power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the transmit power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for transmit power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the transmit power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for transmit power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpRbwFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpThresholdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the transmit power    (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpThresholdLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpThresholdLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the relative or absolute threshold power level.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpThresholdType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level that is used as the threshold.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the transmit    power (TXP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpResultsAverageMeanPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpResultsAverageMeanPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the mean power, in dBm, of the signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpResultsPeakToAverageRatio" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpResultsPeakToAverageRatio" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the ratio of the peak power of the signal to the mean power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpResultsMaximumPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpResultsMaximumPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum power, in dBm, of the averaged power trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpResultsMinimumPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpResultsMinimumPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the minimum power, in dBm, of the averaged power trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the frequency count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the frequency count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for frequency count (Fcnt)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the frequency count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for frequency count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntRbwFilterRrcAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntRbwFilterRrcAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntThresholdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the frequency count    (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntThresholdLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntThresholdLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies either the relative or absolute threshold power level.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntThresholdType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the frequency    count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntResultsAverageRelativeFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntResultsAverageRelativeFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the signal frequency relative to the RF center frequency. Only samples above the threshold are used when you set the  method  to .
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntResultsMeanPhase" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntResultsMeanPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the I/Q samples averaged over all acquisitions. The phase of the sum of these I/Q samples    is returned. Only samples above the threshold are used.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntResultsAverageAbsoluteFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntResultsAverageAbsoluteFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the instantaneous frequency of the samples averaged over all acquisitions. RFmxSpecAn    returns the mean of these averaged frequency samples as the average mean frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable spectral emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemNumberOfCarriers" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemNumberOfCarriers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to consider the carrier power as part of total carrier power measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the center frequency, in hertz (Hz), of the carrier, relative to the RF center    frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the carrier    power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW) of the carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired carrier signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRrcFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRrcFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel    after measuring the carrier channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemNumberOfOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemNumberOfOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of offset segment configurations.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetBandwidthIntegral" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the resolution of the spectrum to compare with spectral mask limits as an integer    multiple of the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetLimitFailMask" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the criteria to determine the measurement fail status.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRelativeAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the attenuation, in dB, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use this value  to    compensate for the variations in external attenuation when offset segments are spread wide in    frequency.
</summary>
<lastupdated>1/9/2015 1:40:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetAbsoluteLimitMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the absolute limit mask is a flat line or is a line with a slope.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetAbsoluteLimitStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the absolute power limit, in dBm, corresponding to the beginning of the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetAbsoluteLimitStop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the absolute power limit, in dBm, corresponding to the end of the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the offset segment for the spectral emission mask (SEM)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetSideband" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the offset segment is present on one side, or on both sides of the    carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the start frequency, in hertz (Hz), of the offset segment relative to the closest    configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the stop frequency, in hertz (Hz), of the offset segment relative to the closest    configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRelativeLimitMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the relative limit mask is a flat line or a line with a slope.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRelativeLimitStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the relative power limit, in dB, corresponding to the beginning of the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRelativeLimitStop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the relative power limit, in dB, corresponding to the end of the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemPowerUnits" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the power units.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for spectral emission mask (SEM)    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the spectral emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spectral emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This value is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
<lastupdated>8/28/2014 2:17:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemReferenceType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemReferenceType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the power reference is the integrated power or the peak power in the closest    carrier channel. The least carrier offset is the carrier closest to all the lower (negative)    offset segments. The highest carrier offset is the carrier closest to all the upper (positive)    offsets segments.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the spectral    emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsTotalCarrierPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsTotalCarrierPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the total integrated power of all the active carriers measured.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCompositeMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCompositeMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the overall measurement status based on the measurement limits and the fail criteria.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsFrequencyResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsFrequencyResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the center frequency, in hertz (Hz), of the carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierTotalRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierTotalRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier power, in dB, relative to the total carrier power of all enabled carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierPeakAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak power in the carrier channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsCarrierPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsCarrierPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), at which the peak power occurred in the carrier channel.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetPowerReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier index for measured power that was used as reference to define the lower    (negative) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetTotalAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetTotalAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the lower (negative) offset segment power measured.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetTotalRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetTotalRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetPeakAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak power measured in the lower (negative) offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetPeakRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetPeakRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the margin, in dB, from the limit mask.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetMarginAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, at which the margin occurred in the lower (negative) offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetMarginRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, at which the margin occurred in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetMarginFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), at which the margin occurred in the lower (negative) offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsLowerOffsetMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the lower offset measurement status based on measurement limits and the fail criteria.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetPowerReferenceCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the carrier index for measured power that was used as reference to define the upper    (positive) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetTotalAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetTotalAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the upper (positive) offset segment power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetTotalRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetTotalRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power in the upper (positive) offset segment relative to the integrated or peak power    of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetPeakAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak power measured in the upper (positive) offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetPeakRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetPeakRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak power in the upper (positive) offset segment relative to the integrated or peak    power of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the margin, in dB, from the limit mask.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetMarginAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, at which the margin occurred in the upper (positive) offset segment.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetMarginRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the power, in dB, at which the margin occurred in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetMarginFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the frequency, in hertz (Hz), at which the margin occurred in the upper (positive) offset.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemResultsUpperOffsetMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the upper offset measurement status based on measurement limits and the fail criteria.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the channel power (CHP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the    power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for channel power (CHP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpSpan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpSpan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), around the center frequency, to acquire for the    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the channel power (CHP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRrcFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRrcFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired channel after    measuring the channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the channel    power (CHP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsAverageChannelPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsAverageChannelPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaged channel power (CHP), in dBm, measured in the specified integration bandwidth.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsCarrierAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the carrier power, in dBm, measured in the integration bandwidth that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetCarrierIntegrationBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 11:50:48 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsAverageChannelPowerPsd" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsAverageChannelPowerPsd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the spectral density of the averaged channel power (CHP), in dBm/Hz, in the specified    integration bandwidth.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable Spectrum measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for Spectrum measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumSpan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumSpan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), around the center frequency to be acquired for the    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumPowerUnits" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the units for the absolute power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the Spectrum measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Spectrum measurement.
</summary>
<lastupdated>8/28/2014 2:19:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the resolution bandwidth (RBW) is computed by the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter applied to the    acquired signal.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the sweep time, in seconds.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumResultsPeakAmplitude" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumResultsPeakAmplitude" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the peak amplitude, in dBm, of the averaged spectrum.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumResultsPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumResultsPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency, in hertz (Hz), at the peak amplitude of the averaged spectrum.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumResultsFrequencyResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumResultsFrequencyResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the Harmonics measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for Harmonics measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmFundamentalRbwFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmFundamentalRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmFundamentalRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmFundamentalRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition bandwidth of the fundamental.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmFundamentalRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmFundamentalRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmFundamentalMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmFundamentalMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the Harmonics measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmNumberOfHarmonics" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmNumberOfHarmonics" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of Harmonics, including fundamental, to measure.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmAutoSetupEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmAutoSetupEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable auto configuration of successive harmonics.
</summary>
<lastupdated>8/28/2014 2:15:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmHarmonicEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmHarmonicEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable a particular harmonic for measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmHarmonicOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmHarmonicOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the order of the harmonic.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmHarmonicBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmHarmonicBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the resolution bandwidth, in hertz (Hz), for the harmonic.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmHarmonicMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmHarmonicMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the harmonic.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the Harmonics measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the Harmonics    measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsFundamentalFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsFundamentalFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency, in hertz (Hz), used as the fundamental frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsAverageFundamentalPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsAverageFundamentalPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average power, in dBm, measured at the fundamental frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsTotalHarmonicDistortion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsTotalHarmonicDistortion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the total harmonics distortion (THD) measured in percentage of the power in fundamental.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsHarmonicFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsHarmonicFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency, in hertz (Hz), of the Harmonics specified by the selector string.
</summary>
<lastupdated>9/2/2014 10:42:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsHarmonicRbw" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsHarmonicRbw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the resolution bandwidth (RBW), in hertz (Hz), which is used by the harmonic measurement,    for the harmonic specified by the selector string.
</summary>
<lastupdated>9/2/2014 10:43:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsHarmonicAverageAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsHarmonicAverageAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average absolute power, in dBm, measured at the harmonic specified by the active    channel string.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.HarmResultsHarmonicAverageRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="HarmResultsHarmonicAverageRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average power, in dB, relative to the fundamental power measured at the harmonic    specified by the selector string.
</summary>
<lastupdated>9/2/2014 10:42:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the AMPM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAMToAMCurveFitOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test.
</summary>
<lastupdated>1/7/2015 10:54:00 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAMToAMCurveFitType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the cost-function for polynomial approximation of the AM-to-AM characteristic of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAMToPMCurveFitOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</summary>
<lastupdated>1/7/2015 10:54:11 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAMToPMCurveFitType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-PM characteristic.
</summary>
<lastupdated>1/7/2015 10:55:57 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the AMPM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:00:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the AMPM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmSignalType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmSignalType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMeasurementSampleRateMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the acquisition sample rate is based on the reference waveform.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMeasurementSampleRate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition sample rate, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.User" crefType="PartiallyQualified" />. 
</summary>
<lastupdated>1/7/2015 11:09:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmThresholdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the AMPM measurement
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmThresholdType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmThresholdLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmThresholdLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies either the relative or absolute threshold power level based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdType@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/7/2015 11:36:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmDutAverageInputPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmDutAverageInputPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average power, in dBm, of the signal at the input port of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the AMPM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of  threads used for parallelism for AMPM measurement. 
</summary>
<lastupdated>1/7/2015 11:39:25 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsAMToAMCurveFitCoefficients" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsAMToAMCurveFitCoefficients" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the coefficients of the polynomial that approximates the measured AM-to-AM characteristic of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsAMToPMCurveFitCoefficients" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsAMToPMCurveFitCoefficients" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the coefficients of the polynomial that approximates the measured AM-to-PM characteristic of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsMeanLinearGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsMeanLinearGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the average linear gain, in dB, of the device under test, computed by rejecting signal samples suffering gain compression.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsMeanPhaseError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsMeanPhaseError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the mean phase error, in degrees, of the acquired signal relative to the reference waveform caused by the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsMeanRmsEvm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsMeanRmsEvm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the ratio, as a percentage, of l2 norm of difference between the normalized reference and acquired waveforms, to the L2 norm of the normalized reference waveform.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsAMToAMCurveFitResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsAMToAMCurveFitResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the approximation error, in dB, in the polynomial approximation of the measured AM-to-AM characteristic of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsAMToPMCurveFitResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsAMToPMCurveFitResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the approximation error, in degrees, in the polynomial approximation of the measured AM-to-PM characteristic of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsGainErrorRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsGainErrorRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak-to-peak deviation, in dB, in the gain of the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResultsPhaseErrorRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResultsPhaseErrorRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the peak-to-peak deviation, in degrees, in the phase distortion of the acquired signal relative to the reference waveform caused by the device under test.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmResults1dBCompressionPoint" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmResults1dBCompressionPoint" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Returns the theoretical output power, in dBm, at which gain of the device under test drops by 1 dB from its mean linear gain. This function returns NaN when the AM-to-AM charecteristics of the device under test are flat.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the DPD measurement.
</summary>
<lastupdated>1/7/2015 11:23:55 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMeasurementSampleRateMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition sample rate configuration mode.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMeasurementSampleRate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition sample rate, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:39:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition time, in seconds, for the DPD measurement.
</summary>
<lastupdated>1/7/2015 11:24:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdSignalType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdSignalType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the reference waveform is a modulated signal or a combination of tones
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdDutAverageInputPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdDutAverageInputPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average power of the signal at the input port of the device under test. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdModel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the DPD model used by the DPD measurement.
</summary>
<lastupdated>1/7/2015 11:14:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdTargetGainType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdTargetGainType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the gain expected from the DUT after applying DPD on the input waveform.
</summary>
<lastupdated>9/11/2015 11:21:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableAMToAMCurveFitOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:15:51 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableAMToAMCurveFitType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-AM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:16:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableAMToPMCurveFitOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:17:34 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableAMToPMCurveFitType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-PM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:20:07 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableThresholdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:25:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableThresholdType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableThresholdLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableThresholdLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies either the relative or absolute threshold power level based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/7/2015 11:28:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableStepSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableStepSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the step size, in dB, of the input power levels in the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:23:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the order of the digital predistortion (DPD) polynomial when you set the DPD Model to Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the memory depth of the digital predistortion (DPD) polynomial when you set the DPD Model to Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialLeadOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lead order cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialLagOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lag order cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialLeadMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lead memory depth cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialLagMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lag memory depth cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialMaximumLead" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum lead stagger cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMemoryPolynomialMaximumLag" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum lag stagger cross term of the digital predistortion (DPD) polynomial when you set the DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdIterativeDpdEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdIterativeDpdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the digital predistortion (DPD) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of acquisitions used for averaging when you set the DPD Averaging Enabled to True
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the traces to be stored and retrieved after performing the digital predistortion (DPD) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum number of threads used for parallelism for the digital predistortion (DPD) measurement
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdConfigurationInput" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to use the configuration used by the DPD measurement for applying the digital predistortion (DPD).
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdLookupTableCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdLookupTableCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the predistortion type when you set the DPD Model to Lookup Table
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdMemoryModelCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdMemoryModelCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the predistortion type when DPD Model is Memory Polynomial or Generalized Memory Polynomial.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdHeadroomMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdHeadroomMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to compute and apply the headroom of the predistorted waveform or to apply the value specified using DPD Apply DPD Headroom on the predistorted waveform.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdHeadroom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdHeadroom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the headroom, in dB, applied to the predistorted waveform when you set the DPD Apply DPD Headroom Mode to Manual
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDutAverageInputPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserDutAverageInputPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average input power for the device under test, in dBm, that was used to compute the DPD Apply DPD User DPD Polynomial or the DPD Apply DPD User LUT Complex Gain when you set the DPD Apply DPD Config Input to User
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDpdModel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserDpdModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the DPD model for applying digital predistortion (DPD) when you set the DPD Apply DPD Config Input to User
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMeasurementSampleRate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition sample rate, in hertz (Hz), that was used to compute the DPD Apply DPD User DPD Polynomial or DPD Apply DPD User LUT Complex Gain when you set the DPD Apply DPD Config Input to User
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableInputPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserLookupTableInputPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the input power array, in dBm, for the predistortion lookup table when you set the DPD Apply DPD User DPD Model to Lookup Table
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the order of the DPD polynomial when you set the DPD Apply DPD User DPD Model to Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the memory depth of the DPD polynomial when you set the DPD Apply DPD User DPD Model to Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialLeadOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lead order cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialLagOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lag order cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialLeadMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lead memory depth cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Generalized Memory Polynomial
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialLagMemoryDepth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the lag memory depth cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Memory Polynomial or Generalized Memory Polynomial and set the DPD Apply DPD Config Input to User. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialMaximumLead" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum lead stagger cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Memory Polynomial or Generalized Memory Polynomial and set the DPD Apply DPD Config Input to User. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserMemoryPolynomialMaximumLag" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the maximum lag stagger cross term of the digital predistortion (DPD) polynomial when you set the DPD Apply DPD User DPD Model to Memory Polynomial or Generalized Memory Polynomial and set the DPD Apply DPD Config Input to User. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdResultsAverageGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdResultsAverageGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the average gain, in dB, of the device under test.
</summary>
<lastupdated>9/11/2015 11:53:19 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQPowerEdgeTriggerLevelType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" /> method.
</summary>
<lastupdated>9/11/2015 11:48:32 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpOffsetFrequencyDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the offset frequency definition for the ACP measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method. 
</summary>
<lastupdated>9/11/2015 11:55:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpNumberOfCarriers" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpNumberOfCarriers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of carriers.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the    power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpCarrierRrcFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired channel after measuring the channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpCarrierRrcFilterAlpha" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the roll-off factor for the root-raised-cosine (RRC) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:41:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsTotalCarrierPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsTotalCarrierPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the total integrated carrier power of all carriers, in dBm.
</summary>
<lastupdated>9/11/2015 11:56:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsFrequencyResolution" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsFrequencyResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the center frequency, in hertz (Hz), of the carrier relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetCenterFrequency(System.String,System.Double)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 11:58:51 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.
</summary>
<lastupdated>9/11/2015 12:03:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsCarrierPsd" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsCarrierPsd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the spectral density of the channel, in dBm/Hz.
</summary>
<lastupdated>9/11/2015 11:59:53 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpResultsCarrierRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsCarrierRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the carrier power, in dB, measured relative to the total carrier power of all carriers. 
</summary>
<lastupdated>9/11/2015 12:03:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:42:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierChannelBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierChannelBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the channel bandwidth, in hertz (Hz), of the carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemCarrierRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemCarrierRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:43:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:44:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemOffsetFrequencyDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:44:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeRbwFilterBandwidthDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>7/31/2015 1:44:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangePeakThreshold" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangePeakThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the threshold level, in dBm, above which the measurement detects spurs in the range that you specify using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStartFrequency(System.String,System.Double)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeStopFrequency(System.String,System.Double)" /> methods.
</summary>
<lastupdated>9/11/2015 12:06:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangePeakExcursion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangePeakExcursion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the peak excursion value, in dB, used to find the spurs in the spectrum. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered a spur.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the IQ measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQSampleRate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQSampleRate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the I/Q sample rate.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQNumberOfRecords" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQNumberOfRecords" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the number of records to acquire.
</summary>
<lastupdated>9/11/2015 12:11:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQAcquisitionTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQAcquisitionTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the I/Q acquisition time.
</summary>
<lastupdated>9/11/2015 12:12:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQPretriggerTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPretriggerTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the I/Q pretrigger time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQBandwidthAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQBandwidthAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the minimum acquisition bandwidth. 
</summary>
<lastupdated>9/11/2015 12:14:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the minimum acquisition bandwidth, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />.
</summary>
<lastupdated>9/11/2015 12:14:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IQDeleteRecordOnFetch" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQDeleteRecordOnFetch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement deletes the fetched record.
</summary>
<lastupdated>9/11/2015 12:15:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.FcntResultsAllanDeviation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FcntResultsAllanDeviation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the two-sample deviation of the measured frequency.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumNoiseCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmFrequencyOffsetCorrectionEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdLookupTableType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the type of the DPD lookup table (LUT).      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdFrequencyOffsetCorrectionEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable frequency offset correction for the DPD measurement.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdApplyDpdUserLookupTableType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable the IM measurement.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFrequencyDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalLowerToneFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFundamentalLowerToneFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequency of the tone that has a lower frequency among the two tones in the input signal. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFundamentalUpperToneFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFundamentalUpperToneFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequency of the tone that has a higher frequency among the two tones in the input signal. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAutoIntermodsSetupEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAutoIntermodsSetupEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement computes the intermod frequencies or uses user-specified frequencies.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMaximumIntermodOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMMaximumIntermodOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the order up to which the RFmx driver measures odd order intermodulation products when you set the Auto Intermods Setup Enabled method to True. The lower and upper intermodulation products are measured for each order.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfIntermods" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMNumberOfIntermods" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of intermods to measure when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMIntermodEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable an intermod for the IM measurement. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMIntermodOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the order of the intermod. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIntermodSide" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMIntermodSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLowerIntermodFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMLowerIntermodFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequency of the lower intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMUpperIntermodFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMUpperIntermodFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequency of the upper intermodulation product. This value is expressed in Hz. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMMeasurementMethod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the method used to perform the IM measurement.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMLocalPeakSearchEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMLocalPeakSearchEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement computes the RBW.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMRbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the response of the digital RBW filter.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement computes the sweep time.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable averaging for the IM measurement.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the FFT window type to use to reduce spectral leakage.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFftPadding" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFftPadding" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the factor by which the time-domain waveform is zero-padded before an FFT. The FFT size is given by the following formula:        <em>FFT size</em> = <em>waveform size</em> * <em>padding</em>        This method is used only when the acquisition span is less than the device instantaneous bandwidth.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMIFOutputPowerOffsetAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNearIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the offset by which to adjust the IF output power level for the intermods near the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMFarIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the offset by which to adjust the IF output power level for the intermods that are far from the carrier channel to improve the dynamic range of the signal analyzer. This value is expressed in dB. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable the traces to be stored and retrieved after performing the IM measurement.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the maximum number of threads used for parallelism for the IM measurement.          The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsFundamentalLowerTonePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsFundamentalLowerTonePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the peak power measured around the lower tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower tone frequency.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsFundamentalUpperTonePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsFundamentalUpperTonePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the peak power measured around the upper tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper tone frequency.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsIntermodOrder" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsIntermodOrder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the order of the intermod.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsLowerIntermodPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsLowerIntermodPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the peak power measured around the lower intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower intermod frequency.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsUpperIntermodPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsUpperIntermodPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the peak power measured around the upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper intermod frequency.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsLowerOutputInterceptPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsLowerOutputInterceptPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the lower output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsUpperOutputInterceptPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsUpperOutputInterceptPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the upper output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsWorstCaseOutputInterceptPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMResultsWorstCaseOutputInterceptPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the worst case output intercept power which is equal to the minimum of the values of the IM Results Upper Output Intercept Power and IM Results Lower Output Intercept Power results. This value is expressed in dBm.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Enables the noise figure (NF) measurement.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFFrequencyList" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFFrequencyList" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the list of frequencies at which the noise figure (NF) of the DUT is computed. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the effective noise-bandwidth in which power measurements are performed for the noise figure (NF) measurement. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFMeasurementInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the duration for which the signals are acquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable averaging for the noise figure (NF) measurement.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationSetupId" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFCalibrationSetupId" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies a unique string identifier with the hardware setup used to perform calibration for the NF measurement. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampPresent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFExternalPreampPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether an external preamplifier is present in the signal path. 

</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFExternalPreampFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" /> method. 

</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFExternalPreampGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the gain of the external preamplifier as a function of frequency. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutInputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutInputLossFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLoss" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutInputLoss" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the the ohmic losses between the noise source and the input port of the DUT, as a function of the frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure the loss using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        Specify the frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutInputLossTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the ohmic loss elements considered in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutOutputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutOutputLossFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLoss" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutOutputLoss" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />.        Specify the array of frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFDutOutputLossTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFCalibrationLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFCalibrationLossFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. THis value is expressed in Hz. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLoss" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFCalibrationLoss" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        This method specifies the frequencies at which the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method measures the losses.        </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFCalibrationLossTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementMethod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the measurement method used to perform the noise figure (NF) measurement.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnrFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceEnrFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of frequencies corresponding to the effective noise ratio (ENR) values specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnr" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceEnr" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the array of effective noise ratio (ENR) values of the noise source as a function of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceColdTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceColdTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceOffTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceOffTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceSettlingTime" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceSettlingTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is turned on or off. This value is expressed in seconds.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceLossFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLoss" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceLoss" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFYFactorNoiseSourceLossTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the ohmic loss elements specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswr" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceInputTerminationVswr" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of voltage standing wave ratios (VSWR) as a function of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswrFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceInputTerminationVswrFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of  frequencies corresponding to the voltage standing wave ratios (VSWR) of the microwave termination used in the cold source method as specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceInputTerminationTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutSParametersFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceDutSParametersFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of frequencies corresponding to the s-parameters of the DUT specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" crefType="FullyQualified" /> properties. This value is expressed in Hz.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS21" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceDutS21" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the gains of the DUT as a function of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS12" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceDutS12" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the input-isolations of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS11" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceDutS11" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the input-reflections of the DUT as a function of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB.       </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS22" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFColdSourceDutS22" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the output-reflections of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the maximum number of threads used for parallelism for the noise figure (NF) measurement.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutNoiseFigure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsDutNoiseFigure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the noise figures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutNoiseTemperature" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsDutNoiseTemperature" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the equivalent thermal noise temperatures of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsDutGain" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsDutGain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the available gains of the DUT measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsAnalyzerNoiseFigure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsAnalyzerNoiseFigure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the noise figures of the analyzer measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsMeasurementYFactor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsMeasurementYFactor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the measurement Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsCalibrationYFactor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsCalibrationYFactor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns an array of the calibration Y-Factors measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dB. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsYFactorHotPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsYFactorHotPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is enabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsYFactorColdPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsYFactorColdPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the array of powers measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method, when the noise source is disabled. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFResultsColdSourcePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NFResultsColdSourcePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the power measured at the frequencies specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in dBm. A valid result is returned only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to Cold-source.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.LimitedConfigurationChange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the set of properties that are considered by NI-RFmx in the locked signal configuration state.      </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpSequentialFftSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpSequentialFftSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the FFT size when you set the        <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AcpAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AcpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ChpAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ChpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.ObwAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ObwAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SemAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IMAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.AmpmMaximumTimingError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AmpmMaximumTimingError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMaximumTimingError" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DpdMaximumTimingError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumVbwFilterVbwToRbwRatio" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" /> .      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumDetectorType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the type of detector to be used.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpectrumDetectorPoints" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumDetectorPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of trace points after the detector is applied.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeDetectorType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeDetectorPoints" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeDetectorPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of range points after the detector is applied.        Use "range(n)" as the selector string to configure or read this method.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the video bandwidth (VBW) in Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SpurRangeVbwFilterVbwToRbwRatio" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpurRangeVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpVbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the video bandwidth when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" crefType="PartiallyQualified" />.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.TxpVbwFilterVbwToRbwRatio" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="TxpVbwFilterVbwToRbwRatio" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the VBW to RBW Ratio when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" crefType="PartiallyQualified" />.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable the phase noise measurement.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies how the measurement computes offset subranges.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>       Specifies the start offset frequency for the specified subrange when you set the PhaseNoise Range Definition method to Auto.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the stop frequency of the offset frequency range when you set the PhaseNoise Range Definition method to Auto.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRbwPercentage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRbwPercentage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the RBW as a percentage of the start frequency of each subrange when you set the PhaseNoise Range Definition method to Auto.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAveragingMultiplier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseAveragingMultiplier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the factor by which you increase the averaging count for each range. This setting applies to both Auto and Manual range definitions.     </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the FFT window to use.       </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseNumberOfRanges" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseNumberOfRanges" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of manual ranges.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRangeStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>       Specifies the start frequency for the specified subrange when you set the PhaseNoise Range Definition method to Manual.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRangeStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the stop frequency of the offset frequency range when you set the PhaseNoise Range Definition method to Manual.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeRbwPercentage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRangeRbwPercentage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the RBW as a percentage of the PhaseNoise Range Start Freq method of the specified subrange when you set the PhaseNoise Range Definition method to Manual.     </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseRangeAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the averaging count for the specified range.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseSmoothingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the smoothing type used to smoothen the log plot trace.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingPercentage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseSmoothingPercentage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the number of trace points to use in the moving average filter as a percentage of total number of points in the log plot trace.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpotNoiseFrequencyList" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseSpotNoiseFrequencyList" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseRangeDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseIntegratedNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies the frequency range for integrated noise measurements.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseIntegratedNoiseStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the start frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseIntegratedNoiseStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies an array of the stop frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Specifies whether to enable the traces to be stored and retrieved after performing the Phase Noise measurement.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseSpurRemovalEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to remove spurs from the log plot trace.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalPeakExcursion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseSpurRemovalPeakExcursion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the peak excursion to be used when spur detection is performed. Refer to the Phase Noise topic for more information on spur removal </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseCancellationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationThreshold" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseCancellationThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseCancellationFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies an array of frequencies where the reference phase noise has been measured.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationReferencePhaseNoise" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseCancellationReferencePhaseNoise" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies an array of reference phase noise at the frequencies specified by the Phase Noise Cancellation Frequency method. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsCarrierPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsCarrierPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the measured carrier power.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the measured carrier frequency.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsSpotPhaseNoise" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsSpotPhaseNoise" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the phase noise corresponding to the PhaseNoise Spot Noise Frequency List method  by using the smoothed log plot trace.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsIntegratedPhaseNoise" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsIntegratedPhaseNoise" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the integrated phase noise.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualPMInRadian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsResidualPMInRadian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the residual PM in radians.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualPMInDegree" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsResidualPMInDegree" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the residual PM in degrees.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualFM" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsResidualFM" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the residual FM in Hz.      </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsJitter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoiseResultsJitter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>        Returns the jitter in seconds.      </summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdSignalType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType.Modulated" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Modulated" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform is a cellular or connectivity standard signal.
</summary>
<lastupdated>12/12/2014 4:12:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType.Tones" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Tones" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform is a continuous signal.
</summary>
<lastupdated>12/12/2014 4:12:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdLookupTableThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>12/19/2014 4:58:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
All samples are considered for the DPD measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Samples above the threshold level specified are considered for the DPD measurement.
</summary>
<lastupdated>12/12/2014 4:10:20 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMIntermodSide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to measure intermodulation products corresponding to both lower and upper intermod frequencies or either one of them. This method is not used when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.GetAutoIntermodsSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled@)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" crefType="PartiallyQualified" />.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide.Lower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Lower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measures the intermodulation product corresponding to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLowerIntermodFrequency(System.String,System.Double)" crefType="FullyQualified" /> method.  </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide.Upper" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Upper" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measures the intermodulation product corresponding to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetUpperIntermodFrequency(System.String,System.Double)" crefType="FullyQualified" /> method.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIntermodSide.Both" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Both" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measures the intermodulation product corresponding to both IM Lower Intermod Freq and IM Upper Intermod Freq properties.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdUserLookupTableType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Input powers in the LUT are specified in dBm.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType.Linear" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Linear" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Input powers in the LUT are specified in watts.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the Marker measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults.FetchXY(System.String,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchXY" nihasget="0" nihasset="0" niparameters="selectorString,markerXLocation,markerYLocation" niparametertypes="System.String,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the X and Y locations of the marker.
</summary>
<param name="selectorString">Specifies the result name and marker number. Example: "marker0", "result::r1/marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="markerXLocation">Upon return, contains the marker X location. </param>
<param name="markerYLocation">Upon return, contains the marker Y location. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerFetchXY() function in C.</remarks>
<lastupdated>9/18/2014 4:06:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults.NextPeak(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NextPeak" nihasget="0" nihasset="0" niparameters="selectorString,nextPeak,nextPeakFound" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Moves the marker to the next highest, next left, or next right peak above the threshold on the configured trace.
</summary>
<param name="selectorString">Specifies the result name and marker number. Example: "marker0", "result::r1/marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="nextPeak"> Specifies the next peak on the trace. </param>
<param name="nextPeakFound">Upon return, indicates whether the next peak has been found on the trace. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerNextPeak() function in C.</remarks>
<lastupdated>9/18/2014 4:06:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults.PeakSearch(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PeakSearch" nihasget="0" nihasset="0" niparameters="selectorString,numberOfPeaks" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Moves the marker to the highest peak above the threshold on the configured trace.
</summary>
<param name="selectorString">Specifies the result name and marker number. Example: "marker0", "result::r1/marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="numberOfPeaks"> Upon return, contains the total number of peaks above the threshold, when you set the enable the marker threshold.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerPeakSearch() function in C.</remarks>
<lastupdated>9/18/2014 4:06:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the measurement.
</summary>
<lastupdated>8/12/2014 8:23:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the measurement is performed on a single acquisition.
</summary>
<lastupdated>7/10/2014 3:49:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the measurement uses the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method to calculate the number of acquisitions over which the measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:45:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the Spectrum measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,peakAmplitude,peakFrequency,frequencyResolution" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the peak amplitude and frequency at which the peak occurred in the spectrum.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="peakAmplitude"> Upon return, contains the peak amplitude, of the averaged spectrum. When you set the spectrum span to 0, this method returns the peak amplitude in the time domain power trace.</param>
<param name="peakFrequency">Upon return, contains the frequency, in hertz (Hz), at the peak amplitude of the averaged spectrum. This parameter is not valid if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSpan(System.String,System.Double)" crefType="PartiallyQualified" /> method to 0.</param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in Hz, of the spectrum acquired by the measurement. This parameter is not valid if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSpan(System.String,System.Double)" crefType="PartiallyQualified" /> method to 0.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumFetchMeasurement() function in C.</remarks>
<lastupdated>1/9/2015 1:25:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.FetchPowerTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchPowerTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,power" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>Fetches the power trace for the Spectrum measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="power">Upon return, contains the power versus time trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumFetchPowerTrace() function in C.</remarks>
<lastupdated>9/18/2014 11:41:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum used for the Spectrum measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="spectrum">Upon return, contains the Spectrum trace values.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumFetchSpectrum() function in C.</remarks>
<lastupdated>9/18/2014 11:41:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.Read(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Gets the hardware for acquisition, performs measurement on acquired data, and returns Spectrum measurement results.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. 
</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement.</param>
<param name="spectrum">Upon return, contains the spectrum trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumRead() function in C.</remarks>
<lastupdated>7/7/2014 3:20:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.GetPeakAmplitude(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPeakAmplitude" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak amplitude, in dBm, of the averaged spectrum.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak amplitude, in dBm, of the averaged spectrum.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetResultsPeakAmplitude() function in C.</remarks>
<lastupdated>9/18/2014 11:41:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.GetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at the peak amplitude of the averaged spectrum. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, at the peak amplitude of the averaged spectrum.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetResultsPeakFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:41:39 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumResults.GetFrequencyResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency resolution, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency resolution, in Hz, of the spectrum acquired by the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpectrumGetResultsFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 11:41:20 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the occupied bandwidth (OBW) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,occupiedBandwidth,averagePower,frequencyResolution,startFrequency,stopFrequency" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the occupied bandwidth (OBW) measurement results.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="occupiedBandwidth"> Upon return, contains the occupied bandwidth, in hertz (Hz).</param>
<param name="averagePower"> Upon return, contains the total integrated power of the averaged spectrum acquired by the OBW measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits.dBm" crefType="PartiallyQualified" />. </param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in Hz, of the spectrum acquired by the measurement. </param>
<param name="startFrequency">Upon return, contains the start frequency, in Hz, of the OBW. The OBW is calculated using the following formula: OBW = stop frequency - start frequency</param>
<param name="stopFrequency"> Upon return, contains the stop frequency, in Hz, of the OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWFetchMeasurement() function in C.</remarks>
<lastupdated>1/9/2015 11:50:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.FetchSpectrumTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrumTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum trace used for the occupied bandwidth (OBW) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="spectrum">Upon return, contains the spectrum trace used for the OBW measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWFetchSpectrumTrace() function in C.</remarks>
<lastupdated>9/18/2014 11:29:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.Read(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,occupiedBandwidth,averagePower,frequencyResolution,startFrequency,stopFrequency" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns occupied bandwidth (OBW) measurement results.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="occupiedBandwidth">Upon return, contains the occupied bandwidth, in hertz (Hz).</param>
<param name="averagePower">Upon return, contains the total integrated power of the averaged spectrum acquired by the OBW measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits.dBm" crefType="PartiallyQualified" />.</param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in Hz, of the spectrum acquired by the OBW measurement.</param>
<param name="startFrequency">Upon return, contains the start frequency, in Hz, of the OBW. The OBW is calculated using the following formula: OBW = stop frequency - start frequency</param>
<param name="stopFrequency">Upon return, contains the stop frequency, in Hz, of the OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWRead() function in C.</remarks>
<lastupdated>1/9/2015 11:51:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.GetOccupiedBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOccupiedBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), that occupies the percentage of the total power of the signal    that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the bandwidth, in Hz, that occupies the percentage of the total power of the signal    that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetResultsOccupiedBandwidth() function in C.</remarks>
<lastupdated>1/9/2015 11:50:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.GetAveragePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the total power, in dBm, measured in the averaged spectrum acquired by the occupied    bandwidth (OBW) measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the total power, in dBm, measured in the averaged spectrum acquired by the OBW measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetResultsAveragePower() function in C.</remarks>
<lastupdated>9/18/2014 11:29:29 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.GetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start frequency, in hertz (Hz), of the occupied bandwidth (OBW).
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the start frequency, in Hz, of the OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetResultsStartFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:29:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.GetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop frequency, in hertz (Hz), of the occupied bandwidth (OBW).
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the stop frequency, in Hz, of the OBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetResultsStopFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:29:57 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults.GetFrequencyResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency resolution, in hertz (Hz), of the spectrum acquired by the occupied bandwidth    (OBW) measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency resolution, in Hz, of the spectrum acquired by the OBW measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_OBWGetResultsFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 11:29:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the spurious emission (Spur) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
<lastupdated>7/10/2014 1:32:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The Spur measurement uses the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the Spur measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:43:34 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW). 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:42:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures the marker type.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Off" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Off" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker is disabled.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker is enabled as a normal marker.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Delta" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Delta" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The marker is enabled as a delta marker.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:37:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value which you configure in  the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:37:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpOffsetEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the offset channel for adjacent channel power (ACP) measurement.
</summary>
<lastupdated>7/10/2014 10:01:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the offset channel for ACP measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the offset channel for ACP measurement.
</summary>
<lastupdated>7/10/2014 10:01:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.
</summary>
<lastupdated>7/10/2014 9:49:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes.
</summary>
<lastupdated>7/10/2014 9:50:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
<lastupdated>7/10/2014 9:51:17 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
<lastupdated>7/10/2014 9:51:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
<lastupdated>7/10/2014 9:51:34 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
<lastupdated>7/10/2014 9:51:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate.
</summary>
<lastupdated>7/10/2014 9:51:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection &gt;90dB and having a moderately wide main lobe.
</summary>
<lastupdated>7/10/2014 9:51:09 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Separates two tones with frequencies close to each other but with widely-differing amplitudes.
</summary>
<lastupdated>7/10/2014 9:51:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXConstants" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies constants for I/O terminals.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:29 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.Pfi0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pfi0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PFI 1 connector on the NI 5142 and NI 5622.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.Pfi1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pfi1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 0.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 0.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 1.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine2" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 2.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine3" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine3" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 3.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine4" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 4.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine5" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 5.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine6" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine6" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 6.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiTriggerLine7" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine7" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The signal is exported to the PXI trigger line 7.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXConstants.PxiStarLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PxiStarLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The trigger is received on the PXI star trigger line.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the DPD measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:35 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the digital predistortion (DPD) measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingEnabled">
Specifies whether to enable averaging for the DPD measurement.</param>
<param name="averagingCount">
Specifies the number of acquisitions used to average the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgAveraging() function in C.</remarks>
<lastupdated>1/7/2015 3:11:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDpdModel" nihasget="0" nihasset="0" niparameters="selectorString,dpdModel" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" nireturnvaluetype="System.Int32">
      <summary>
Specifies the digital predistortion (DPD) model used by the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="dpdModel">
Specifies the DPD model used by the DPD measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgDPDModel() function in C.</remarks>
<lastupdated>1/7/2015 3:12:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureDutAverageInputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,dutAverageInputPower" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dutAverageInputPower">
Specifies the average power of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgDUTAverageInputPower() function in C.</remarks>
<lastupdated>12/12/2014 10:00:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureGeneralizedMemoryPolynomialCrossTerms(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureGeneralizedMemoryPolynomialCrossTerms" nihasget="0" nihasset="0" niparameters="selectorString,memoryPolynomialLeadOrder,memoryPolynomialLagOrder,memoryPolynomialLeadMemoryDepth,memoryPolynomialLagMemoryDepth,memoryPolynomialMaximumLead,memoryPolynomialMaximumLag" niparametertypes="System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the cross terms of the generalized memory polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="memoryPolynomialLeadOrder">
Specifies the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />. </param>
<param name="memoryPolynomialLagOrder">
Specifies the lag order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<param name="memoryPolynomialLeadMemoryDepth">
Specifies the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<param name="memoryPolynomialLagMemoryDepth">
Specifies the lag memory depth cross term of the DPD polynomial when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /></param>
<param name="memoryPolynomialMaximumLead">
Specifies the maximum lead stagger cross term of the DPD polynomial when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<param name="memoryPolynomialMaximumLag">
Specifies the maximum lag stagger cross term of the DPD polynomial when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgGeneralizedMemoryPolynomialCrossTerms() function in C.</remarks>
<lastupdated>12/19/2014 1:44:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureIterativeDpdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIterativeDpdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,iterativeDpdEnabled" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures the iterative computation of the DPD polynomial according to the indirect-learning architecture when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="iterativeDpdEnabled">
Specifies whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgIterativeDPDEnabled() function in C.</remarks>
<lastupdated>12/19/2014 1:47:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureLookupTableAMToAMCurveFit(System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureLookupTableAMToAMCurveFit" nihasget="0" nihasset="0" niparameters="selectorString,amToAMCurveFitOrder,amToAMCurveFitType" niparametertypes="System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Configures the degree of the polynomial and the approximation method used for polynomial approximation of the AM-to-AM response of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="amToAMCurveFitOrder">
Specifies the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<param name="amToAMCurveFitType">
Specifies the cost-function for polynomial approximation of the AM-to-AM characteristic of the device under test when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgLookupTableAMToAMCurveFit() function in C.</remarks>
<lastupdated>1/8/2015 2:05:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureLookupTableAMToPMCurveFit(System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureLookupTableAMToPMCurveFit" nihasget="0" nihasset="0" niparameters="selectorString,amToPMCurveFitOrder,amToPMCurveFitType" niparametertypes="System.String,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Configures the degree of the polynomial and the approximation method, used for polynomial approximation of the AM-to-PM response of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="amToPMCurveFitOrder">
Specifies the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<param name="amToPMCurveFitType">
Specifies the cost-function for polynomial approximation of the AM-to-PM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgLookupTableAMToPMCurveFit() function in C.</remarks>
<lastupdated>1/7/2015 3:13:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureLookupTableStepSize(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureLookupTableStepSize" nihasget="0" nihasset="0" niparameters="selectorString,stepSize" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the step size, in dB, of input power levels in the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="stepSize">
Specifies the step size, in dB, of the input power levels in the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgLookupTableStepSize() function in C.</remarks>
<lastupdated>1/7/2015 3:15:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureLookupTableThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureLookupTableThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,thresholdLevel,thresholdType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold level for the samples considered for the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="thresholdEnabled">
Specifies whether to enable thresholding for the acquired samples used in the DPD measurement.</param>
<param name="thresholdLevel">
Specifies either the relative or the absolute threshold power level based on the value of the thresholdType parameter.</param>
<param name="thresholdType">
Specifies the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgLookupTableThreshold() function in C.</remarks>
<lastupdated>12/19/2014 1:50:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>  
Configures the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="measurementInterval">
Specifies the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgMeasurementInterval() function in C.</remarks>
<lastupdated>8/10/2015 3:34:30 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureMeasurementSampleRate(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,sampleRateMode,sampleRate" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition sample rate, in samples per second (S/s), for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="sampleRateMode">
Specifies the acquisition sample rate configuration mode.</param>
<param name="sampleRate">
Specifies the acquisition sample rate, in  S/s, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.User" crefType="PartiallyQualified" />. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgMeasurementSampleRate() function in C.</remarks>
<lastupdated>7/6/2015 12:03:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureMemoryPolynomial(System.String,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMemoryPolynomial" nihasget="0" nihasset="0" niparameters="selectorString,memoryPolynomialOrder,memoryPolynomialMemoryDepth" niparametertypes="System.String,System.Int32,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the order and memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="memoryPolynomialOrder">
Specifies the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<param name="memoryPolynomialMemoryDepth">
Specifies the memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgMemoryPolynomial() function in C.</remarks>
<lastupdated>12/19/2014 1:51:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigurePreviousDpdPolynomial(System.String,NationalInstruments.ComplexSingle[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePreviousDpdPolynomial" nihasget="0" nihasset="0" niparameters="selectorString,previousDpdPolynomial" niparametertypes="System.String,NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the previous DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="previousDpdPolynomial">
Specifies the value of the previous DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgPreviousDPDPolynomial() function in C.</remarks>
<lastupdated>12/19/2014 1:52:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.ConfigureReferenceWaveform(System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdReferenceWaveformIdleDurationPresent,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceWaveform" nihasget="0" nihasset="0" niparameters="selectorString,referenceWaveform,idleDurationPresent,signalType" niparametertypes="System.String,NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Configures the complex baseband equivalent of the RF signal applied to the input port of the device under test while performing the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="referenceWaveform">
Specifies the complex baseband equivalent of the RF signal applied to the input port of the device under test, while performing the DPD measurement.</param>
<param name="idleDurationPresent">
Specifies whether the reference waveform contains an idle duration.</param>
<param name="signalType">
Specifies whether the reference waveform is a modulated signal or tones.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgReferenceWaveform() function in C.</remarks>
<lastupdated>1/7/2015 3:16:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableAMToAMCurveFitOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableAMtoAMCurveFitOrder() function in C.
</remarks>
<lastupdated>1/6/2015 3:12:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableAMToAMCurveFitOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableAMToAMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the degree of the polynomial used to approximate the AM-to-AM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableAMtoAMCurveFitOrder() function in C.
</remarks>
<lastupdated>1/6/2015 3:12:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableAMToAMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Gets the polynomial approximation cost-function of the device under test AM-to-AM characteristic.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the polynomial approximation cost-function of the device under test AM-to-AM characteristic.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableAMtoAMCurveFitType() function in C.
</remarks>
<lastupdated>1/7/2015 2:29:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableAMToAMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Sets the polynomial approximation cost-function of the device under test  AM-to-AM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the polynomial approximation cost-function of the device under test  AM-to-AM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableAMtoAMCurveFitType() function in C.
</remarks>
<lastupdated>1/7/2015 11:47:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableAMToPMCurveFitOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableAMtoPMCurveFitOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:26:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableAMToPMCurveFitOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableAMToPMCurveFitOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the degree of the polynomial used to approximate the AM-to-PM characteristic of the device under test when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableAMtoPMCurveFitOrder() function in C.
</remarks>
<lastupdated>12/19/2014 3:41:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableAMToPMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Gets the cost-function for polynomial approximation of the AM-to-PM characteristic of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the cost-function for polynomial approximation of the AM-to-PM characteristic of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableAMtoPMCurveFitType() function in C.
</remarks>
<lastupdated>12/18/2014 2:26:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableAMToPMCurveFitType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType" nireturnvaluetype="System.Int32">
      <summary>
Sets the polynomial approximation cost-function of the device under test AM-to-PM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the polynomial approximation cost-function of the device under test  AM-to-PM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableAMtoPMCurveFitType() function in C.
</remarks>
<lastupdated>1/7/2015 11:46:30 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging is enabled for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether averaging is enabled for the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetAveragingEnabled() function in C.
</remarks>
<lastupdated>1/7/2015 2:37:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies whether to enable averaging for the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetAveragingEnabled() function in C.
</remarks>
<lastupdated>12/18/2014 4:27:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the number of acquisitions used for averaging.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetAveragingCount() function in C.
</remarks>
<lastupdated>12/18/2014 2:22:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetAveragingCount() function in C.
</remarks>
<lastupdated>12/19/2014 2:00:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialLeadOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead order cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lead order cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialLeadOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:34:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialLeadOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lead order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the lead order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialLeadOrder() function in C.
</remarks>
<lastupdated>12/19/2014 4:10:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialLagOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the order of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialLagOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:31:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialLagOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialLagOrder() function in C.
</remarks>
<lastupdated>12/19/2014 4:04:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialLeadMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead memory depth cross term of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lead memory depth cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialLeadMemoryDepth() function in C.
</remarks>
<lastupdated>12/18/2014 2:32:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialLeadMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialLeadMemoryDepth() function in C.
</remarks>
<lastupdated>12/19/2014 4:07:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialLagMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lag memory depth cross term of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lag memory depth cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialLagMemoryDepth() function in C.
</remarks>
<lastupdated>1/7/2015 11:43:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialLagMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lag memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the lag memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialLagMemoryDepth() function in C.
</remarks>
<lastupdated>12/19/2014 4:01:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialMaximumLead(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum lead stagger cross term of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return,Specifies the maximum lead stagger cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialMaximumLead() function in C.
</remarks>
<lastupdated>12/18/2014 2:35:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialMaximumLead(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum lead stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the maximum lead stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />, and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialMaximumLead() function in C.
</remarks>
<lastupdated>1/8/2015 2:30:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialMaximumLag(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum lag stagger cross term of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the maximum lag stagger cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialMaximumLag() function in C.
</remarks>
<lastupdated>12/18/2014 2:34:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialMaximumLag(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum lag stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the maximum lag stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />, and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialMaximumLag() function in C.
</remarks>
<lastupdated>1/8/2015 2:29:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMeasurementInterval() function in C.
</remarks>
<lastupdated>8/10/2015 3:34:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the duration, in seconds, of the reference waveform considered for the DPD measurement. When the reference waveform contains an idle duration, the DPD measurement neglects the idle samples in the reference waveform leading upto the start of the first active portion of the reference waveform.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMeasurementInterval() function in C.
</remarks>
<lastupdated>8/10/2015 3:35:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetDutAverageInputPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the average power, in dBm, of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/17/2014 1:00:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetDutAverageInputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the average power, in dBm, of the signal at the input port of the device under test.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the average power, in dBm, of the signal at the input port of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/18/2014 4:28:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable DPD measurements.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
<see langword="True" /> if the DPD measurement is enabled; otherwise,  <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMeasurementEnabled() function in C.
</remarks>
<lastupdated>1/6/2015 5:07:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.
</param>
<param name="value">
<see langword="True" /> if the DPD measurement is enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMeasurementEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 2:50:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetSignalType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSignalType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetSignalType() function in C.
</remarks>
<lastupdated>12/17/2014 3:31:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetSignalType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSignalType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdSignalType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether the reference waveform is a modulated signal or a combination of one or more sinusoidal signals.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetSignalType() function in C.
</remarks>
<lastupdated>12/18/2014 4:31:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" nireturnvaluetype="System.Int32">
      <summary>
Gets the DPD model used by the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the DPD model used by the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetModel() function in C.
</remarks>
<lastupdated>12/17/2014 3:31:24 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" nireturnvaluetype="System.Int32">
      <summary>
Sets the DPD model used by the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the DPD model used by the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetModel() function in C.
</remarks>
<lastupdated>12/18/2014 4:31:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetTargetGainType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTargetGainType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType" nireturnvaluetype="System.Int32">
      <summary>
Gets the gain expected from the DUT after applying DPD on the input waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the gain expected from the DUT after applying DPD on the input waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetTargetGainType() function in C.
</remarks>
<lastupdated>9/11/2015 11:20:00 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetTargetGainType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetTargetGainType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdTargetGainType" nireturnvaluetype="System.Int32">
      <summary>
Sets the gain expected from the DUT after applying DPD on the input waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indiucates the gain expected from the DUT after applying DPD on the input waveform. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetTargetGainType() function in C.
</remarks>
<lastupdated>9/11/2015 11:19:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetIterativeDpdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIterativeDpdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetIterativeDPDEnabled() function in C.
</remarks>
<lastupdated>12/17/2014 3:30:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetIterativeDpdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIterativeDpdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetIterativeDPDEnabled() function in C.
</remarks>
<lastupdated>12/18/2014 4:28:11 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the traces to be stored and retrieved after performing the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the DPD measurement are enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetAllTracesEnabled() function in C.
</remarks>
<lastupdated>1/6/2015 5:07:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the DPD measurement are enabled; otherwise <see langword="False" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetAllTracesEnabled() function in C.
</remarks>
<lastupdated>1/5/2015 2:08:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the maximum number of threads used for parallelism for the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetNumberofAnalysisThreads() function in C.
</remarks>
<lastupdated>12/17/2014 1:07:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the maximum number of threads used for parallelism for the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetNumberofAnalysisThreads() function in C.
</remarks>
<lastupdated>12/19/2014 4:16:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableStepSize(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the step size, in dB, of the input power levels in the predistortion lookup table.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the  step size, in dB, of the input power levels in the predistortion lookup table.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableStepSize() function in C.
</remarks>
<lastupdated>12/18/2014 2:27:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableStepSize(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableStepSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the step size, in dB, of the input power levels in the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the  step size, in dB, of the input power levels in the predistortion lookup table when you set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableStepSize() function in C.
</remarks>
<lastupdated>12/19/2014 3:42:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMeasurementSampleRate(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate, in samples per second (S/s).
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition sample rate, in S/s.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMeasurementSampleRate() function in C.
</remarks>
<lastupdated>7/6/2015 12:03:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRate(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition sample rate, in samples per second (S/s), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the acquisition sample rate, in S/s, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMeasurementSampleRate() function in C.
</remarks>
<lastupdated>7/6/2015 12:04:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate configuration mode.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition sample rate configuration mode.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMeasurementSampleRateMode() function in C.
</remarks>
<lastupdated>12/17/2014 1:06:11 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition sample rate configuration mode.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the acquisition sample rate configuration mode.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMeasurementSampleRateMode() function in C.
</remarks>
<lastupdated>12/18/2014 4:30:16 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the order of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:35:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialOrder() function in C.
</remarks>
<lastupdated>12/19/2014 4:16:12 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMemoryPolynomialMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the memory depth of the DPD polynomial.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the memory depth of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetMemoryPolynomialMemoryDepth() function in C.
</remarks>
<lastupdated>12/18/2014 2:35:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMemoryPolynomialMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetMemoryPolynomialMemoryDepth() function in C.
</remarks>
<lastupdated>12/19/2014 4:15:35 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableThresholdLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets either the relative or absolute threshold power level.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains either the relative or absolute threshold power level.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableThresholdLevel() function in C.
</remarks>
<lastupdated>12/18/2014 2:28:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableThresholdLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableThresholdLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets either the relative or absolute threshold power level based on the value of <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains either the relative or absolute threshold power level based on the value of <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableThresholdLevel() function in C.
</remarks>
<lastupdated>12/19/2014 3:56:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable thresholding of the acquired samples to be used for the DPD measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether to enable thresholding of the acquired samples to be used for the DPD measurement.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableThresholdEnabled() function in C.
</remarks>
<lastupdated>1/7/2015 2:26:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableThresholdEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable thresholding of the acquired samples to be used for the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether to enable thresholding of the acquired samples to be used for the DPD measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableThresholdEnabled() function in C.
</remarks>
<lastupdated>12/19/2014 3:55:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Gets the reference for the power level used for thresholding.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetLookupTableThresholdType() function in C.
</remarks>
<lastupdated>12/17/2014 1:05:34 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableThresholdType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableThresholdType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" nireturnvaluetype="System.Int32">
      <summary>
Sets the reference for the power level used for thresholding.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the reference for the power level used for thresholding.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetLookupTableThresholdType() function in C.
</remarks>
<lastupdated>12/18/2014 4:29:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetLookupTableType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType" nireturnvaluetype="System.Int32">
      <summary>
Gets the type of the DPD lookup table (LUT).      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the type of the DPD lookup table (LUT).      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType.Log" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetLookupTableType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType" nireturnvaluetype="System.Int32">
      <summary>
Sets the type of the DPD lookup table (LUT).      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the type of the DPD lookup table (LUT).      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdLookupTableType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableType.Log" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetFrequencyOffsetCorrectionEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable frequency offset correction for the DPD measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable frequency offset correction for the DPD measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdFrequencyOffsetCorrectionEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetFrequencyOffsetCorrectionEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable frequency offset correction for the DPD measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable frequency offset correction for the DPD measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdFrequencyOffsetCorrectionEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled.True" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetApplyDpdUserLookupTableType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetApplyDpdUserLookupTableType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType" nireturnvaluetype="System.Int32">
      <summary>
Gets the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableType" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetApplyDpdUserLookupTableType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetApplyDpdUserLookupTableType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserLookupTableType" nireturnvaluetype="System.Int32">
      <summary>
Sets the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the DPD Lookup Table (LUT) type when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> method toUser.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableType" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetApplyDpdUserLookupTableInputPower(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetApplyDpdUserLookupTableInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the input power array for the predistortion lookup table when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDpdModel" crefType="PartiallyQualified" /> method to Lookup Table. This value is expressed in dBm.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the input power array for the predistortion lookup table when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDpdModel" crefType="PartiallyQualified" /> method to Lookup Table. This value is expressed in dBm.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableInputPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetApplyDpdUserLookupTableInputPower(System.String,System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetApplyDpdUserLookupTableInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the input power array for the predistortion lookup table when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDpdModel" crefType="PartiallyQualified" /> method to Lookup Table. This value is expressed in dBm.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the input power array for the predistortion lookup table when you set the <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserDpdModel" crefType="PartiallyQualified" /> method to Lookup Table. This value is expressed in dBm.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdApplyDpdUserLookupTableInputPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMaximumTimingError(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMaximumTimingError" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMaximumTimingError" crefType="PartiallyQualified" /> attribute.The default value is 0.00002.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetMaximumTimingError(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMaximumTimingError" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the maximum time alignment error expected between the acquired and the reference waveforms. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.DpdMaximumTimingError" crefType="PartiallyQualified" /> attribute.The default value is 0.00002.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
<lastupdated>7/10/2014 10:15:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3dB bandwidth of the RBW filter.
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the bin width of the spectrum 
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disables compensation of the channel powers for the noise floor of the signal analyzer.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumNoiseCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enables compensation of the channel powers for the noise floor of the signal analyzer. The noise floor of the signal analyzer is measured for the RF path used by the Spectrum measurement and cached for future use. If signal analyzer or measurement parameters change, noise floors are measured again.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the NF measurement
</summary>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Enables the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Enables the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Enables the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Enables the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetFrequencyList(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the list of frequencies at which the noise figure (NF) of the DUT is computed. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the list of frequencies at which the noise figure (NF) of the DUT is computed. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFFrequencyList" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the list of frequencies at which the noise figure (NF) of the DUT is computed. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the list of frequencies at which the noise figure (NF) of the DUT is computed. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFFrequencyList" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetMeasurementBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the effective noise-bandwidth in which power measurements are performed for the noise figure (NF) measurement. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the effective noise-bandwidth in which power measurements are performed for the noise figure (NF) measurement. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 100 kHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the effective noise-bandwidth in which power measurements are performed for the noise figure (NF) measurement. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the effective noise-bandwidth in which power measurements are performed for the noise figure (NF) measurement. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 100 kHz.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the duration for which the signals are acquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the duration for which the signals are acquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the duration for which the signals are acquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the duration for which the signals are acquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable averaging for the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable averaging for the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable averaging for the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetCalibrationSetupId(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationSetupId" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">
      <summary>Gets a unique string identifier with the hardware setup used to perform calibration for the NF measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, associates a unique string identifier with the hardware setup used to perform calibration for the NF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationSetupId" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationSetupId(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCalibrationSetupId" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">
      <summary>Sets a unique string identifier with the hardware setup used to perform calibration for the NF measurement.</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Associates a unique string identifier with the hardware setup used to perform calibration for the NF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetExternalPreampPresent(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetExternalPreampPresent" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent" nireturnvaluetype="System.Int32">
      <summary>Gets if an external preamplifier is present in the signal path.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether an external preamplifier is present in the signal path.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampPresent" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampPresent(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetExternalPreampPresent" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFExternalPreampPresent" nireturnvaluetype="System.Int32">
      <summary>Sets if an external preamplifier is present in the signal path.

</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether an external preamplifier is present in the signal path.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampPresent" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetExternalPreampFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetExternalPreampFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>Gets the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" /> method.

</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contatins the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampFrequency" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetExternalPreampFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>Sets the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" /> method.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampFrequency" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetExternalPreampGain(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetExternalPreampGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>Gets the gain of the external preamplifier as a function of frequency.

</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contatins the gain of the external preamplifier as a function of frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampGain" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetExternalPreampGain(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetExternalPreampGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>Sets the gain of the external preamplifier as a function of frequency.

</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the gain of the external preamplifier as a function of frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFExternalPreampGain" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutInputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutInputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps for the Y-Factor method, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutInputLossFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutInputLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutInputLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutInputLoss(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutInputLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the the ohmic losses between the noise source and the input port of the DUT, as a function of the frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure the loss using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        Specify the frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the the ohmic losses between the noise source and the input port of the DUT, as a function of the frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure the loss using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        Specify the frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutInputLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the the ohmic losses between the noise source and the input port of the DUT, as a function of the frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure the loss using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        Specify the frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the the ohmic losses between the noise source and the input port of the DUT, as a function of the frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure the loss using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        Specify the frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutInputLossTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutInputLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the ohmic loss elements considered in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the ohmic loss elements considered in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLossTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutInputLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the ohmic loss elements considered in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the ohmic loss elements considered in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutInputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutInputLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutOutputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutOutputLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutOutputLossFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutOutputLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutOutputLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutOutputLoss(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutOutputLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />.        Specify the array of frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />.        Specify the array of frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutOutputLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />.        Specify the array of frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />.        Specify the array of frequencies at which the losses were measured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetDutOutputLossTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDutOutputLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLossTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDutOutputLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFDutOutputLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCalibrationLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetCalibrationLossFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. THis value is expressed in Hz. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. THis value is expressed in Hz. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCalibrationLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. THis value is expressed in Hz. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. THis value is expressed in Hz. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetCalibrationLoss(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        This method specifies the frequencies at which the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method measures the losses.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        This method specifies the frequencies at which the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method measures the losses.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCalibrationLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        This method specifies the frequencies at which the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method measures the losses.        
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a function of frequency. This value is expressed in dB. This loss is accounted for by the noise figure (NF) measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.        This method specifies the frequencies at which the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method measures the losses.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetCalibrationLossTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCalibrationLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLossTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCalibrationLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFCalibrationLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Gets the measurement method used to perform the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the measurement method used to perform the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is  Y-Factor.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Sets the measurement method used to perform the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the measurement method used to perform the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is  Y-Factor.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Measure" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Measure" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceEnrFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceEnrFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of frequencies corresponding to the effective noise ratio (ENR) values specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of frequencies corresponding to the effective noise ratio (ENR) values specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnrFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceEnrFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of frequencies corresponding to the effective noise ratio (ENR) values specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of frequencies corresponding to the effective noise ratio (ENR) values specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnrFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceEnr(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceEnr" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the array of effective noise ratio (ENR) values of the noise source as a function of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the array of effective noise ratio (ENR) values of the noise source as a function of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnr" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnr(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceEnr" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the array of effective noise ratio (ENR) values of the noise source as a function of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the array of effective noise ratio (ENR) values of the noise source as a function of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceEnrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceEnr" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceColdTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceColdTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceColdTemperature" crefType="PartiallyQualified" /> attribute.The default value is 302.8.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceColdTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceColdTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceColdTemperature" crefType="PartiallyQualified" /> attribute.The default value is 302.8.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceOffTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceOffTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceOffTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceOffTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceOffTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceOffTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceSettlingTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceSettlingTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is turned on or off. This value is expressed in seconds.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is turned on or off. This value is expressed in seconds.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceSettlingTime" crefType="PartiallyQualified" /> attribute.The default value is 0.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceSettlingTime(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceSettlingTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>Sets the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is turned on or off. This value is expressed in seconds. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is turned on or off. This value is expressed in seconds. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.False" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceLossFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceLossFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceLoss(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceLoss" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" crefType="PartiallyQualified" />.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossCompensationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" crefType="PartiallyQualified" />.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLoss" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetYFactorNoiseSourceLossTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetYFactorNoiseSourceLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the ohmic loss elements specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the ohmic loss elements specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLossTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetYFactorNoiseSourceLossTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the ohmic loss elements specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the ohmic loss elements specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFYFactorNoiseSourceLossTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode.Measure" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode.Measure" crefType="PartiallyQualified" />.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceInputTerminationVswr(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceInputTerminationVswr" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of voltage standing wave ratios (VSWR) as a function of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of voltage standing wave ratios (VSWR) as a function of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswr" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceInputTerminationVswr" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of voltage standing wave ratios (VSWR) as a function of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of voltage standing wave ratios (VSWR) as a function of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswr" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceInputTerminationVswrFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceInputTerminationVswrFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of  frequencies corresponding to the voltage standing wave ratios (VSWR) of the microwave termination used in the cold source method as specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of  frequencies corresponding to the voltage standing wave ratios (VSWR) of the microwave termination used in the cold source method as specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswrFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswrFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceInputTerminationVswrFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of  frequencies corresponding to the voltage standing wave ratios (VSWR) of the microwave termination used in the cold source method as specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of  frequencies corresponding to the voltage standing wave ratios (VSWR) of the microwave termination used in the cold source method as specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationVswr(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationVswrFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceInputTerminationTemperature(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceInputTerminationTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceInputTerminationTemperature(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceInputTerminationTemperature" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceInputTerminationTemperature" crefType="PartiallyQualified" /> attribute.The default value is 297.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceDutSParametersFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceDutSParametersFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of frequencies corresponding to the s-parameters of the DUT specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" crefType="FullyQualified" /> properties. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of frequencies corresponding to the s-parameters of the DUT specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" crefType="FullyQualified" /> properties. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutSParametersFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceDutSParametersFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of frequencies corresponding to the s-parameters of the DUT specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" crefType="FullyQualified" /> properties. This value is expressed in Hz.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of frequencies corresponding to the s-parameters of the DUT specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" crefType="FullyQualified" /> properties. This value is expressed in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutSParametersFrequency" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceDutS21(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceDutS21" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the gains of the DUT as a function of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the gains of the DUT as a function of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS21" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS21(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceDutS21" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the gains of the DUT as a function of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the gains of the DUT as a function of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS21" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceDutS12(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceDutS12" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the input-isolations of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the input-isolations of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS12" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS12(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceDutS12" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the input-isolations of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the input-isolations of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS12" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceDutS11(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceDutS11" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the input-reflections of the DUT as a function of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the input-reflections of the DUT as a function of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS11" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS11(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceDutS11" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the input-reflections of the DUT as a function of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the input-reflections of the DUT as a function of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS11" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetColdSourceDutS22(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetColdSourceDutS22" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the output-reflections of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the output-reflections of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS22" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutS22(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetColdSourceDutS22" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the output-reflections of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the output-reflections of the DUT as a function of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceDutSParametersFrequency(System.String,System.Double[])" crefType="FullyQualified" /> method.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFColdSourceDutS22" crefType="PartiallyQualified" /> attribute.The default value is an empty array.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for the noise figure (NF) measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the maximum number of threads used for parallelism for the noise figure (NF) measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.NFNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureFrequencyListStartStopStep(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyListStartStopStep" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency,stepSize" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the list of frequencies at which to perform the noise figure (NF) measurement. The start frequency and stop frequency points are inclusive in the frequency list.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="startFrequency">Specifies the lowest frequency at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<param name="stopFrequency">Specifies the highest frequency at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<param name="stepSize">Specifies the spacing between adjacent frequency points in the list of frequencies at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureFrequencyListStartStopPoints(System.String,System.Double,System.Double,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyListStartStopPoints" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency,numberOfPoints" niparametertypes="System.String,System.Double,System.Double,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the list of frequencies at which the noise figure (NF) measurement has to be performed. The start frequency and stop frequency points are inclusive in the frequency list.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="startFrequency">Specifies the lowest frequency at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<param name="stopFrequency">Specifies the highest frequency at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<param name="numberOfPoints">Specifies the number of frequency points in the list of frequencies at which to perform the NF measurement. This value is expressed in Hz.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.RecommendReferenceLevel(System.String,System.Double,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RecommendReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,dutMaxGain,dutMaxNoiseFigure,referenceLevel" niparametertypes="System.String,System.Double,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Computes and sets an appropriate reference level based on the expected maximum DUT gain, maximum DUT noise figure, and other measurement and analyzer methods. You must not set Mixer Level, Mixer Level Offset, IF Output Power Level Offset, and IF Filter Bandwidth methods in order to obtain an appropriate recommended reference level.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="dutMaxGain">Upon return, contains  the expected maximum gain from the DUT. This value is expressed in dB.
			<br /></param>
<param name="dutMaxNoiseFigure">Upon return, contains  the expected maximum noise figure of the DUT. This value is expressed in dB.
			<br /></param>
<param name="referenceLevel">Upon return, contains  the recommended reference level for the NF measurement. This value is expressed in dBm.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureFrequencyList(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,frequencyList" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the list of frequencies at which to perform the noise figure (NF) measurement. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="frequencyList">Specifies the list of frequencies at which the NF of the DUT is computed. This value is expressed in Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureMeasurementBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,measurementBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the effective noise-bandwidth in which power measurements are performed in the noise figure (NF) measurement.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="measurementBandwidth">Specifies the effective noise-bandwidth in which power measurements are performed for the NF measurement. This value is expressed in Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the duration for which the signals are acquired at each frequency to perform the noise figure (NF) measurement. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="measurementInterval">Specifies the duration for which signals are aquired at each frequency which you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetFrequencyList(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the noise figure (NF) measurement.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFAveragingEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,measurementMethod" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod" nireturnvaluetype="System.Int32">
      <summary>
Configures the noise figure (NF) measurement to use either the Y-Factor or the cold source method.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="measurementMethod">Specifies the measurement method used to perform the NF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureYFactorMode" nihasget="0" nihasset="0" niparameters="selectorString,yFactorMode" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode" nireturnvaluetype="System.Int32">
      <summary>
Configures the Y-Factor based noise figure (NF) measurement to perform the calibration step or the measurement step.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="yFactorMode">Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureYFactorNoiseSourceEnr(System.String,System.Double[],System.Double[],System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureYFactorNoiseSourceEnr" nihasget="0" nihasset="0" niparameters="selectorString,enrFrequency,enr,coldTemperature,offTemperature" niparametertypes="System.String,System.Double[],System.Double[],System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures excess noise ratio (ENR) and temperature of the noise source used by the Y-Factor method.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="enrFrequency"></param>
<param name="enr">Specifies the array of ENR values of the noise source as a method of the frequency. This value is expressed in dB. The corresponding frequencies are specified by the <em>ENRFreq</em> parameter. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />. This value is expressed in dB.</param>
<param name="coldTemperature">Specifies the calibrated cold noise temperature of the noise source used in the Y-Factor method. This value is expressed in kelvin.</param>
<param name="offTemperature">Specifies the physical temperature of the noise source used in the Y-Factor method when the noise source is turned off. This value is expressed in kelvin.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureYFactorNoiseSourceLoss(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled,System.Double[],System.Double[],System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureYFactorNoiseSourceLoss" nihasget="0" nihasset="0" niparameters="selectorString,noiseSourceLossCompensationEnabled,noiseSourceLossFrequency,noiseSourceLoss,noiseSourceLossTemperature" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled,System.Double[],System.Double[],System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the ohmic loss inherent to the noise source used in the Y-Factor method that is common to the calibration and the measurement steps.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="noiseSourceLossCompensationEnabled">Specifies whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.</param>
<param name="noiseSourceLossFrequency">Specifies the array of the frequencies corresponding to the ohmic loss inherent to the noise source used in the Y-Factor method specified by the <em>noiseSourceLoss</em> parameter. This value is expressed in Hz.</param>
<param name="noiseSourceLoss">Specifies an array of the ohmic losses inherent to the noise source used in the Y-Factor method. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <em>noiseSourceLossCompensationEnabled</em> parameter to <em>true</em>. 
				You must specify the frequencies at which the losses were measured using the <em>noiseSourceLossFrequency</em> parameter. <br /></param>
<param name="noiseSourceLossTemperature">Specifies the physical temperature of the ohmic loss elements specified in the <em>noiseSourceLoss</em> parameter. This value is expressed in kelvin.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureYFactorNoiseSourceSettlingTime(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureYFactorNoiseSourceSettlingTime" nihasget="0" nihasset="0" niparameters="selectorString,settlingTime" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the time required for the acquisition to wait till the noise source used in the Y-Factor method settles to hot or cold state when the noise source is powered on or off.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="settlingTime">Specifies the time to wait till the noise source used in the Y-Factor method settles to either hot or cold state when the noise source is enabled or disabled. This value is expressed in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureDutInputLoss(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled,System.Double[],System.Double[],System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDutInputLoss" nihasget="0" nihasset="0" niparameters="selectorString,dutInputLossCompensationEnabled,dutInputLossFrequency,dutInputLoss,dutInputLossTemperature" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled,System.Double[],System.Double[],System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the ohmic loss, as a method of frequency, of the loss elements between the noise source and the input port of the DUT, excluding the losses that are common to the calibration step and the measurement step.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dutInputLossCompensationEnabled">Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the noise source and the input port of the DUT, excluding the losses that are common to calibration and the measurement steps, which are specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.</param>
<param name="dutInputLossFrequency">Specifies the array of frequencies corresponding to the value of the <em>DUTInputLoss</em> parameter. This value is expressed in Hz.</param>
<param name="dutInputLoss">Specifies the array of ohmic losses between the noise source and the input port of the DUT, as a method of the frequency. This value is expressed in dB. You must exclude any loss which is inherent to the noise source and is common between the calibration and measurement steps, and configure it using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This loss is accounted for by the NF measurement when you set the <em>DUTInputLossCompensationEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutInputLossCompensationEnabled.True" crefType="PartiallyQualified" />. 
			Specify the frequencies at which the losses were measured using the <em>DUTInputLossFrequency</em> parameter.  <br /></param>
<param name="dutInputLossTemperature">Specifies the physical temperature of the ohmic loss elements considered in the <em>DUTInputLoss</em> parameter. This value is expressed in kelvin.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureDutOutputLoss(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled,System.Double[],System.Double[],System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDutOutputLoss" nihasget="0" nihasset="0" niparameters="selectorString,dutOutputLossCompensationEnabled,dutOutputLossFrequency,dutOutputLoss,dutOutputLossTemperature" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled,System.Double[],System.Double[],System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the ohmic loss, as a method of frequency, of the loss elements between the output port of the DUT and the input port of the analyzer.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dutOutputLossCompensationEnabled">Specifies whether the noise figure (NF) measurement accounts for ohmic losses between the output port of the DUT and the input port of the analyzer.</param>
<param name="dutOutputLossFrequency">Specifies the array of frequencies corresponding to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" />  method. This value is expressed in Hz.</param>
<param name="dutOutputLoss">Specifies the array of ohmic losses between the output port of the DUT and the input port of the analyzer, as a method of frequency. This value is expressed in dB. This loss is accounted for by the NF measurement when you set the <em>DUTOutputLossCompensationEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFDutOutputLossCompensationEnabled.True" crefType="PartiallyQualified" />. 
			Specify the array of frequencies at which the losses were measured using the <em>DUTOutputLossFrequency</em> parameter.  <br /></param>
<param name="dutOutputLossTemperature">Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetDutOutputLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureCalibrationLoss(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled,System.Double[],System.Double[],System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCalibrationLoss" nihasget="0" nihasset="0" niparameters="selectorString,calibrationLossCompensationEnabled,calibrationLossFrequency,calibrationLoss,calibrationLossTemperature" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled,System.Double[],System.Double[],System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the ohmic loss, as a method of frequency, of the loss elements between the noise source and the input port of the analyzer during the calibration step, excluding the loss specified as the noise source loss.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="calibrationLossCompensationEnabled">Specifies whether the noise figure (NF) measurement accounts for the ohmic losses between the noise source and input port of the analyzer during the calibration step, excluding any losses which you have specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.</param>
<param name="calibrationLossFrequency">Specifies an array of frequencies corresponding to the ohmic losses between the source and the input port of the analyzer. This value is expressed in Hz. This parameter is applicable only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorMode.Calibrate" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" crefType="PartiallyQualified" />, or when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode.Calibrate" crefType="PartiallyQualified" /> and set the NF Meas Method method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" crefType="PartiallyQualified" />.</param>
<param name="calibrationLoss">Specifies the array of ohmic losses between the noise source and input port of the analyzer during calibration, as a method of frequency. You must exclude any loss specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetYFactorNoiseSourceLoss(System.String,System.Double[])" crefType="FullyQualified" /> method.  This loss is accounted for by the NF measurement when you set the <em>calibrationLossCompensationEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFCalibrationLossCompensationEnabled.True" crefType="PartiallyQualified" />. 
				This parameter specifies the frequencies at which the <em>calibrationLossFrequency</em> parameter measures the losses. 
			<br /></param>
<param name="calibrationLossTemperature">Specifies the physical temperature of the ohmic loss elements specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.SetCalibrationLoss(System.String,System.Double[])" crefType="FullyQualified" /> method. This value is expressed in kelvin.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureColdSourceMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureColdSourceMode" nihasget="0" nihasset="0" niparameters="selectorString,coldSourceMode" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode" nireturnvaluetype="System.Int32">
      <summary>
Configures the cold source based noise figure (NF) measurement to perform the calibration step or the measurement step.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="coldSourceMode">Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureColdSourceInputTermination(System.String,System.Double[],System.Double[],System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureColdSourceInputTermination" nihasget="0" nihasset="0" niparameters="selectorString,terminationVswr,terminationVswrFrequency,terminationTemperature" niparametertypes="System.String,System.Double[],System.Double[],System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the characteristics of the microwave termination used as a noise source in the cold source method.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="terminationVswr">Specifies an array of voltage standing wave ratios (VSWR) as a method of frequency of the microwave termination used as the noise source in cold source method. The corresponding array of frequencies is specified by the <em>terminationVSWRFrequency</em> parameter. 
			<br />
			 In most cases, the exact VSWR of the microwave termination may not be known. Hence, NI recommends that you set this parameter to an empty array, in which case the noise figure (NF) measurement assumes that the VSWR of the microwave termination is unity for all frequencies.

<br /></param>
<param name="terminationVswrFrequency">Specifies an array of  frequencies corresponding to the VSWRs of the microwave termination used in the cold source method as specified by the <em>terminationVSWR</em> parameter. This value is expressed in Hz.</param>
<param name="terminationTemperature">Specifies the physical temperature of the microwave termination used as the noise source in the cold source method. This value is expressed in kelvin.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ConfigureColdSourceDutSParameters(System.String,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureColdSourceDutSParameters" nihasget="0" nihasset="0" niparameters="selectorString,dutSParametersFrequency,dutS21,dutS12,dutS11,dutS22" niparametertypes="System.String,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the scattering parameters of the DUT as a method of the frequency, for use in the cold source measurement method.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dutSParametersFrequency">Specifies the array of frequencies corresponding to the s-parameters of the DUT specified by the  <em>DUTS21</em>, <em>DUTS12</em>, <em>DUTS11</em>, and <em>DUTS22</em> parameters. This value is expressed in Hz.</param>
<param name="dutS21">Specifies an array of the gains of the DUT as a method of freqency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <em>DUTSParametersFrequency</em> parameter.</param>
<param name="dutS12">Specifies an array of the input-isolations of the DUT as a method of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <em>DUTSParametersFrequency</em> parameter.</param>
<param name="dutS11">Specifies an array of the input-reflections of the DUT as a method of frequency, when the output port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <em>DUTSParametersFrequency</em> parameter.</param>
<param name="dutS22">Specifies an array of the output-reflections of the DUT as a method of frequency, when the input port of the DUT is terminated with an impedance equal to the characteristic impedance. This value is expressed in dB. The corresponding array of frequencies is specified by the <em>DUTSParametersFrequency</em> parameter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration.ClearCalibrationDatabase(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ClearCalibrationDatabase" nihasget="0" nihasset="0" niparameters="calibrationSetupId" niparametertypes="System.String" nireturnvaluetype="System.Int32">
      <summary>
Clears the noise figure calibration data for Cold Source and Y-Factor method. Calibration data associated with the selected VSA is cleared for the Cold Source method while calibration data associated with the noise source name and the VSA is cleared for the Y-Factor method.<br /></summary>
<param name="calibrationSetupId">Associates a unique string identifier with the hardware setup used to perform calibration for the NF measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNF" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNF" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents the NF measurement.
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNF.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the NF measurement
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNF.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the NF measurement results.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the IM measurement results.
</summary>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetFundamentalLowerTonePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalLowerTonePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured around the lower tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower tone frequency.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the peak power measured around the lower tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower tone frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsFundamentalLowerTonePower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetFundamentalUpperTonePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalUpperTonePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured around the upper tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper tone frequency.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use theÂ <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" />Â method to build the selectorString.</param>
<param name="value">Upon return, contains the peak power measured around the upper tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper tone frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsFundamentalUpperTonePower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetIntermodOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntermodOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the intermod.      
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the order of the intermod.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsIntermodOrder" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetLowerIntermodPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerIntermodPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured around the lower intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower intermod frequency.      
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power measured around the lower intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower intermod frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsLowerIntermodPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetUpperIntermodPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperIntermodPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured around the upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper intermod frequency.      
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power measured around the upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper intermod frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsUpperIntermodPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetLowerOutputInterceptPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOutputInterceptPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the lower output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the lower output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsLowerOutputInterceptPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetUpperOutputInterceptPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOutputInterceptPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the upper output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the upper output intercept power. This value is expressed in dBm. Refer to the IM topic for more information about this result.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsUpperOutputInterceptPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.GetWorstCaseOutputInterceptPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetWorstCaseOutputInterceptPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the worst case output intercept power which is equal to the minimum of the values of the IM Results Upper Output Intercept Power and IM Results Lower Output Intercept Power results. This value is expressed in dBm.       
</summary>
<param name="selectorString">Specifies the result name and ImIntermod number. Example: "ImIntermod0", "result::r1/ImIntermod0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the worst case output intercept power which is equal to the minimum of the values of the IM Results Upper Output Intercept Power and IM Results Lower Output Intercept Power results. This value is expressed in dBm.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.IMResultsWorstCaseOutputInterceptPower" crefType="PartiallyQualified" /> attribute.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchIntermodMeasurementArray(System.String,System.Double,System.Int32[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchIntermodMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,intermodOrder,lowerIntermodPower,upperIntermodPower" niparametertypes="System.String,System.Double,ref System.Int32[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches an array of peak powers of the lower and upper intermods.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="intermodOrder">Upon return, contains  an array of the orders of the intermods.
			<br /></param>
<param name="lowerIntermodPower">Upon return, contains  an array of the peak power values measured around the lower intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower intermod frequency.<br /></param>
<param name="upperIntermodPower">Upon return, contains  an array of the peak power values measured around the upper intermod frequency when you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper intermod frequency.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchInterceptPowerArray(System.String,System.Double,System.Int32[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchInterceptPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,intermodOrder,worstCaseOutputInterceptPower,lowerOutputInterceptPower,upperOutputInterceptPower" niparametertypes="System.String,System.Double,ref System.Int32[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the output intercept powers for the intermod.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="intermodOrder">Upon return, contains  an array of the orders of the intermods.
			<br /></param>
<param name="worstCaseOutputInterceptPower">Upon return, contains  an array of the worst case output intercept powers which are equal to the minimum of the values of the IM Results Upper Output Intercept Power and IM Results Lower Output Intercept Power results. This value is expressed in dBm.
			<br /></param>
<param name="lowerOutputInterceptPower">Upon return, contains  an array of the lower output intercept power values. This value is expressed in dBm.
			<br /></param>
<param name="upperOutputInterceptPower">Upon return, contains  an array of the upper output intercept power values. This value is expressed in dBm.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchFundamentalMeasurement(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchFundamentalMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,lowerTonePower,upperTonePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the peak powers of the two fundamental tones.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="lowerTonePower">Upon return, contains  the peak power measured around the lower tone frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower tone frequency.
			<br /></param>
<param name="upperTonePower">Upon return, contains  the peak power measured around the upper tone frequency when you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper tone frequency.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchIntermodMeasurement(System.String,System.Double,System.Int32@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchIntermodMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,intermodOrder,lowerIntermodPower,upperIntermodPower" niparametertypes="System.String,System.Double,out System.Int32,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the peak powers of the lower and upper intermods.<br />
		Use "intermod(n)" as the selector string to read results from this method.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and intermod number.  If you do not specify the result name, the default result instance is used. <br />
			Example:<br /><span class="monospace">"intermod0"</span><br /><span class="monospace">"result::r1/intermod0"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="intermodOrder">Upon return, contains  the order of the intermod.
			<br /></param>
<param name="lowerIntermodPower">Upon return, contains  the peak power measured around the lower intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the lower intermod frequency.<br /></param>
<param name="upperIntermodPower">Upon return, contains  the peak power measured around the upper intermod frequency when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLocalPeakSearchEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" crefType="PartiallyQualified" />. This value is expressed in dBm. When you set the IM Local Peak Search Enabled method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" crefType="PartiallyQualified" />, the measurement returns the power at the upper intermod frequency.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchInterceptPower(System.String,System.Double,System.Int32@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchInterceptPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,intermodOrder,worstCaseOutputInterceptPower,lowerOutputInterceptPower,upperOutputInterceptPower" niparametertypes="System.String,System.Double,out System.Int32,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the output intercept powers for the intermod.<br />
		Use "intermod(n)" as the selector string to read results from this method.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and intermod number.  If you do not specify the result name, the default result instance is used. <br />
			Example:<br /><span class="monospace">"intermod0"</span><br /><span class="monospace">"result::r1/intermod0"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildIntermodString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="intermodOrder">Upon return, contains  the order of the intermod.
			<br /></param>
<param name="worstCaseOutputInterceptPower">Upon return, contains  the worst case output intercept power which is equal to the minimum of the values of the IM Results Upper Output Intercept Power and IM Results Lower Output Intercept Power results. This value is expressed in dBm.
			<br /></param>
<param name="lowerOutputInterceptPower">Upon return, contains  the lower output intercept power. This value is expressed in dBm.
			<br /></param>
<param name="upperOutputInterceptPower">Upon return, contains  the upper output intercept power. This value is expressed in dBm.
			<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults.FetchSpectrum(System.String,System.Double,System.Int32,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrumIndex,spectrum" niparametertypes="System.String,System.Double,System.Int32,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum trace in IM measurement corresponding to the specified spectrumIndex.

</summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="spectrumIndex">Specifies the index of the spectrum to fetch. When you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Segmented" crefType="PartiallyQualified" />, each of the tone and intermod has a separate spectrum. You can fetch these spectrums one at a time by using a spectrumIndex. The following list shows the spectrumIndex to use while fetching tones and intermods:<list type="bullet">
<item>
<description>
Lower tone spectrum: 0
</description>
</item>
<item>
<description>
Upper tone spectrum: 1
</description>
</item>
<item>
<description>
Lower intermod&lt;n&gt; spectrum: 2n+2
</description>
</item>
<item>
<description>
Upper intermod&lt;n&gt; spectrum: 2n+3
</description>
</item>
</list> Hence, the segment index can range from 0 to 2*(Number of Intermods) + 1. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Normal" />, the IM measurement returns only one spectrum and a spectrumIndex equal to 0 is used to fetch the spectrum.</param>
<param name="spectrum">Upon return, contains the averaged power measured at each frequency bin. This value is expressed in dBm or dBm/Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable frequency offset correction for the DPD measurement.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement computes and corrects any frequency offset between the reference and the acquired waveforms.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdFrequencyOffsetCorrectionEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement does not perform frequency offset correction.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-AM characteristic.
</summary>
<lastupdated>12/17/2014 4:57:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType.LeastSquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastSquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the energy of the polynomial approximation error.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType.LeastAbsoluteResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastAbsoluteResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the magnitude of the polynomial approximation error.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToAMCurveFitType.Bisquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Bisquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Excludes the effect of data outliers while minimizing the energy of the polynomial apporoximation error.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
<lastupdated>7/10/2014 11:57:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method. </summary>
<lastupdated>1/9/2015 1:43:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:10 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObw" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents an OBW measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObw.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration">
      <summary>
Gets the  <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of OBW measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXObwConfiguration</value>
<lastupdated>1/9/2015 11:48:53 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObw.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve OBW measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXObwResults</value>
<lastupdated>1/9/2015 11:48:59 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the occupied bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
<lastupdated>7/10/2014 10:37:04 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The OBW measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the OBW measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:38:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify. This enum is used only when you set the Trigger Type to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:38:25 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope.Rising" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The trigger asserts when the signal power is rising.
</summary>
<lastupdated>7/10/2014 10:36:10 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope.Falling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The trigger asserts when the signal power is falling.
</summary>
<lastupdated>7/10/2014 10:36:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes an IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement.</summary>
<lastupdated>8/12/2014 8:14:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement sets the IF output power level offset using the values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetNearIFOutputPowerOffset(System.String,System.Double)" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetFarIFOutputPowerOffset(System.String,System.Double)" crefType="PartiallyQualified" /> methods. 
</summary>
<lastupdated>1/9/2015 1:35:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpIFOutputPowerOffsetAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement automatically computes an IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement.
</summary>
<lastupdated>7/10/2014 10:00:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQDeleteRecordOnFetch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement deletes the fetched record.</summary>
<lastupdated>8/12/2014 8:14:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement does not delete the fetched record.
</summary>
<lastupdated>6/24/2015 11:34:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement deletes the fetched record.
</summary>
<lastupdated>7/10/2014 10:00:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQ" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQ" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents an I/Q measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQ.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration" crefType="PartiallyQualified" /> instance that enables configuration of I/Q measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXIQConfiguration.</value>
<lastupdated>7/3/2015 3:27:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQ.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve I/Q measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXIQResults.</value>
<lastupdated>6/24/2015 11:10:04 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmReferenceWaveformIdleDurationPresent" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmReferenceWaveformIdleDurationPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the reference waveform contains an idle duration. 
</summary>
<lastupdated>12/12/2014 3:37:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmReferenceWaveformIdleDurationPresent.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform contains an idle duration.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmReferenceWaveformIdleDurationPresent.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform does not contain an idle duration.
</summary>
<lastupdated>12/12/2014 3:37:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdLookupTableThresholdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the reference for the power level used for thresholding.
</summary>
<lastupdated>12/12/2014 4:10:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is relative to the peak power, in dB, of the acquired samples.
</summary>
<lastupdated>12/12/2014 4:10:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableThresholdType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The threshold is the absolute power, in dBm.
</summary>
<lastupdated>12/12/2014 4:10:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMAutoIntermodsSetupEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the intermod frequencies or uses user-specified frequencies.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement uses the values that you specify for the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetLowerIntermodFrequency(System.String,System.Double)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetUpperIntermodFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAutoIntermodsSetupEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement computes the intermod frequencies. The maximum number of intermods that you can measure is based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMaximumIntermodOrder(System.String,System.Int32)" crefType="FullyQualified" /> method. </summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmSignalType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the reference waveform is a modulated signal or tones. 
</summary>
<lastupdated>1/8/2015 2:45:10 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType.Modulated" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Modulated" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform is a cellular or connectivity standard signal.
</summary>
<lastupdated>12/12/2014 3:38:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmSignalType.Tones" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Tones" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform is a continuous signal comprising of one or more tones.
</summary>
<lastupdated>1/7/2015 3:58:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-PM characteristic. 
</summary>
<lastupdated>1/2/2015 11:40:33 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType.LeastSquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastSquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the energy of the polynomial approximation error.
</summary>
<lastupdated>12/12/2014 3:00:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType.LeastAbsoluteResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastAbsoluteResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the magnitude of the polynomial approximation error.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAMToPMCurveFitType.Bisquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Bisquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Excludes the effect of data outliers while minimizing the energy of the polynomial apporoximation error.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
<lastupdated>7/10/2014 3:17:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:44:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:44:36 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRangeEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to measure the spurious emissions (Spur) in the frequency range.
</summary>
<lastupdated>7/10/2014 2:45:35 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the acquisition of the frequency range.
</summary>
<lastupdated>7/10/2014 2:45:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables measurement of Spurs in the frequency range.
</summary>
<lastupdated>7/10/2014 2:45:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for spectrum measurement.
</summary>
<lastupdated>7/10/2014 11:46:37 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
<lastupdated>7/10/2014 11:47:06 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
<lastupdated>7/10/2014 11:46:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
<lastupdated>7/10/2014 11:46:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
<lastupdated>7/10/2014 11:46:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
<lastupdated>7/10/2014 11:47:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetRelativeLimitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the relative limit mask is a flat line or a line with a slope. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The line specified by the values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitStop(System.String,System.Double)" crefType="PartiallyQualified" /> methods as the two ends is considered as the mask.
</summary>
<lastupdated>1/9/2015 1:42:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Couple" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The two ends of the line are coupled to the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitStart(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:42:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:20:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter. 
</summary>
<lastupdated>8/12/2014 8:20:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCarrierRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW) of the carrier. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method. </summary>
<lastupdated>1/9/2015 1:41:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW. 
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method. 
</summary>
<lastupdated>1/9/2015 1:38:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:38:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMeasurementTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the type of measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Acp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Acp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects ACP measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Ccdf" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Ccdf" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects CCDF measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Chp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Chp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects CHP measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Fcnt" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fcnt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects frequency count (Fcnt) measurement.
</summary>
<lastupdated>8/26/2014 11:59:20 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Harm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Harm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects Harmonics measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Obw" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Obw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects OBW measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Sem" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Sem" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects SEM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Spectrum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Spectrum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects Spectrum measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Spur" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Spur" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects Spur measurement.
</summary>
<lastupdated>9/3/2014 9:51:55 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Txp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Txp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects TXP measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Ampm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Ampm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects AMPM measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.Dpd" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Dpd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects DPD measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.IQ" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQ" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Selects I/Q measurement.
</summary>
<lastupdated>7/6/2015 10:10:30 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.IM" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IM" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Selects IM measurement.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.NF" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NF" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Selects NF measurement.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMeasurementTypes.PhaseNoise" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseNoise" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Selects PhaseNoise measurement.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable a particular harmonic for measurement. Only the enabled harmonics are used to measure the total harmonic distortion (THD). This enum is not used if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.True" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:38:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the Harmonics for measurement.
</summary>
<lastupdated>9/3/2014 9:45:40 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the Harmonics for measurement.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the units for the absolute power.
</summary>
<lastupdated>7/10/2014 10:04:09 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpPowerUnits.dBmPerHertz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBmPerHertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm/Hz.
</summary>
<lastupdated>7/10/2014 10:04:14 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.
</summary>
<lastupdated>7/10/2014 10:00:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables compensation of the channel powers for the noise floor of the signal analyzer.
</summary>
<lastupdated>7/10/2014 10:01:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpNoiseCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables compensation of the channel powers for the noise floor of the signal analyzer. The noise floor of the signal analyzer is measured for the RF path used by the ACP measurement and cached for future use. If signal analyzer or measurement parameters change, noise floors are measured again.
</summary>
<lastupdated>7/10/2014 10:01:10 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdIterativeDpdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable iterative computation of the DPD Results DPD Polynomial using indirect-learning architecture.
</summary>
<lastupdated>12/12/2014 4:00:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD Results DPD Polynomial is computed in a single shot.
</summary>
<lastupdated>12/12/2014 4:00:10 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdIterativeDpdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD Results DPD Polynomial is computed based on the value of the DPD Previous DPD Polynomial.
</summary>
<lastupdated>12/12/2014 4:08:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>12/19/2014 4:25:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType.MagnitudeAndPhase" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MagnitudeAndPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts the magnitude and phase of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType.MagnitudeOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MagnitudeOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts only the phase of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType.PhaseOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts only the magnitude of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:25 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the offset frequency definition used to specify the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetOffsetFrequency(System.String,System.Double)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/15/2015 9:18:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition.CarrierCenterToOffsetCenter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierCenterToOffsetCenter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The offset frequency is defined from the center of the closest carrier to the center of the offset channel.
</summary>
<lastupdated>6/8/2015 3:37:42 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetFrequencyDefinition.CarrierCenterToOffsetEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierCenterToOffsetEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The offset frequency is defined from the center of the closest carrier to the nearest edge of the offset channel.
</summary>
<lastupdated>6/8/2015 3:38:01 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" />  method.
</summary>
<lastupdated>9/11/2015 11:34:25 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3dB bandwidth of the RBW filter. When you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterType" /> method to FFT Based, RBW is the 3dB bandwidth of the window specified by the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow" /> method.
</summary>
<lastupdated>9/11/2015 11:38:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition.BandwidthDefinition6dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition6dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 6dB bandwidth of the RBW filter. When you set the Spectrum RBW Filter Type property to FFT Based, RBW is the 6dB bandwidth of the window specified by the Spectrum FFT Window property.
</summary>
<lastupdated>9/11/2015 11:38:49 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the spectrum bin width computed using FFT when you set the Spectrum RBW Filter Type property to FFT Based.
</summary>
<lastupdated>9/11/2015 11:40:37 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwFilterBandwidthDefinition.BandwidthDefinitionEnbw" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionEnbw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the ENBW bandwidth of the RBW filter. When you set the Spectrum RBW Filter Type method to FFT Based, RBW is the ENBW  bandwidth of the window specified by the Spectrum FFT Window method.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the noise figure (NF) measurement should account for ohmic losses inherent to the noise source used in the Y-Factor method common to the calibration and measurement steps.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ohmic losses are ignored.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFYFactorNoiseSourceLossCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ohmic losses are accounted for in the NF measurement.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the tones and intermod frequencies are relative to the RF center frequency, or are absolute frequencies.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The tone and intermod frequencies are relative to the RF center frequency.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMFrequencyDefinition.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The tone and intermod frequencies are absolute frequencies. The measurement ignores the RF center frequency.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding for the acquired samples to be used for the AMPM measurement.
</summary>
<lastupdated>12/12/2014 3:38:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
All samples are considered for the AMPM measurement.
</summary>
<lastupdated>12/12/2014 3:38:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Samples above the threshold level specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetThresholdLevel(System.String,System.Double@)" crefType="PartiallyQualified" /> method are considered for the AMPM measurement.
</summary>
<lastupdated>1/7/2015 4:00:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the Marker measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureNumberOfMarkers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfMarkers" nihasget="0" nihasset="0" niparameters="selectorString,numberOfMarkers" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of markers.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="numberOfMarkers">Specifies the number of markers.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgNumberOfMarkers() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureReferenceMarker(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceMarker" nihasget="0" nihasset="0" niparameters="selectorString,referenceMarker" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the marker to be used as reference marker when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Delta" crefType="PartiallyQualified" />. The value set by this method is not used when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Normal" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the marker number. Example: "marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="referenceMarker">Specifies the marker to be used as reference marker when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Delta" crefType="PartiallyQualified" />. The value set by this method is not used when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Normal" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgReferenceMarker() function in C.</remarks>
<lastupdated>1/9/2015 11:48:24 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureThreshold(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerThresholdEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureThreshold" nihasget="0" nihasset="0" niparameters="selectorString,thresholdEnabled,threshold" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerThresholdEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the threshold to use for peak search.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="thresholdEnabled">Specifies whether to enable the threshold for the trace while finding the peaks.</param>
<param name="threshold">Specifies the threshold for finding the peaks on the trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgThreshold() function in C.</remarks>
<lastupdated>9/10/2015 7:38:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigurePeakExcursion(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePeakExcursion" nihasget="0" nihasset="0" niparameters="selectorString,peakExcursionEnabled,peakExcursion" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the peak excursion.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="peakExcursionEnabled">Specifies whether to enable the peak excursion check for the trace while finding the peaks.
</param>
<param name="peakExcursion">Specifies the peak excursion value for finding the peaks on trace when you set the <format type="italics">peakExcursionEnabled </format> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled.True" />. The signal should rise and fall by at least the peak excursion value, above the threshold, to be considered a peak.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgPeakExcursion() function in C.</remarks>
<lastupdated>9/10/2015 7:38:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureTrace(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureTrace" nihasget="0" nihasset="0" niparameters="selectorString,trace" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerTrace" nireturnvaluetype="System.Int32">
      <summary>
Configures the measurement trace to be used by the marker.
</summary>
<param name="selectorString">Specifies the marker number. Example: "marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="trace">Specifies the measurement trace to be used by the marker.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgTrace() function in C.</remarks>
<lastupdated>9/18/2014 4:06:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureType" nihasget="0" nihasset="0" niparameters="selectorString,markerType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" nireturnvaluetype="System.Int32">
      <summary>
Configures the marker type.
</summary>
<param name="selectorString">Specifies the marker number. Example: "marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="markerType">Specifies whether the marker is disabled (Off) or is enabled (On) either as a normal marker or a delta marker.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgType() function in C.</remarks>
<lastupdated>9/18/2014 4:06:23 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration.ConfigureXLocation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureXLocation" nihasget="0" nihasset="0" niparameters="selectorString,markerXLocation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the X location of the marker. Ensure that you configure the reference marker X location or perform peak search on the reference marker before configuring the X location for the Delta marker.
</summary>
<param name="selectorString">Specifies the marker number. Example: "marker0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildMarkerString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="markerXLocation">Specifies the X location of the marker on the trace when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerType.Normal" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_MarkerCfgXLocation() function in C.</remarks>
<lastupdated>1/9/2015 11:48:40 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the transmit power (TXP) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:33:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageMeanPower,peakToAverageRatio,maximumPower,minimumPower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the powers measured using the transmit power (TXP) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="averageMeanPower"> Upon return, contains the mean power, in dBm, of the signal. Only the samples above the threshold are used by the measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.True" />. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" />, the mean power is measured on the power trace averaged over multiple acquisitions.</param>
<param name="peakToAverageRatio">Upon return, contains the ratio of the peak power of the signal to the mean power. Only the samples above the threshold are used by the measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.True" />. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" />, the peak and mean powers are measured using the power trace averaged over multiple acquisitions.</param>
<param name="maximumPower">Upon return, contains the maximum power, in dBm, of the averaged power trace.</param>
<param name="minimumPower">Upon return, contains the minimum power, in dBm, of the averaged power trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPFetchMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 12:02:12 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.FetchPowerTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchPowerTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,power" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the power trace used for the transmit power (TXP) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="power">Upon return, contains the power versus time traces.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPFetchPowerTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:02:18 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.Read(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageMeanPower,peakToAverageRatio,maximumPower,minimumPower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns the transmit power (TXP) measurement results.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement.</param>
<param name="averageMeanPower">Upon return, contains the mean power, in dBm, of the signal. Only the samples above the threshold are used by the measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.True" crefType="PartiallyQualified" />. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" crefType="PartiallyQualified" />, the mean power is measured on the power trace averaged over multiple acquisitions.</param>
<param name="peakToAverageRatio">Upon return, contains the ratio of the peak power of the signal to the mean power. Only the samples above the threshold are used by the measurement when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpThresholdEnabled.True" crefType="PartiallyQualified" />. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingEnabled.True" crefType="PartiallyQualified" />, the peak and mean powers are measured using the power trace averaged over multiple acquisitions.</param>
<param name="maximumPower">Upon return, contains the maximum power, in dBm, of the averaged power trace.</param>
<param name="minimumPower">Upon return, contains the minimum power, in dBm, of the averaged power trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPRead() function in C.</remarks>
<lastupdated>1/9/2015 1:35:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.GetAverageMeanPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageMeanPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the mean power, in dBm, of the signal.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the mean power, in dBm, of the signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetResultsAverageMeanPower() function in C.</remarks>
<lastupdated>9/18/2014 12:02:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.GetPeakToAverageRatio(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPeakToAverageRatio" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the ratio of the peak power of the signal to the mean power.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the ratio of the peak power of the signal to the mean power. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetResultsPeaktoAverageRatio() function in C.</remarks>
<lastupdated>9/18/2014 12:02:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.GetMaximumPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMaximumPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum power, in dBm, of the averaged power trace.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the maximum power, in dBm, of the averaged power trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetResultsMaximumPower() function in C.</remarks>
<lastupdated>9/18/2014 12:02:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults.GetMinimumPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMinimumPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the minimum power, in dBm, of the averaged power trace.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the minimum power, in dBm, of the averaged power trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_TXPGetResultsMinimumPower() function in C.</remarks>
<lastupdated>9/18/2014 12:02:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.
</summary>
<lastupdated>8/12/2014 8:22:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
<lastupdated>7/10/2014 2:42:44 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
<lastupdated>7/10/2014 2:42:35 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
<lastupdated>7/10/2014 2:42:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the units for the absolute power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBmPerHertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm/Hz.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the offset segment is present on one side, or on both sides of the carrier.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband.Negative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Negative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures a lower offset segment to the left of the leftmost carrier.
</summary>
<lastupdated>8/14/2015 9:07:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband.Positive" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Positive" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures an upper offset segment to the right of the rightmost carrier.
</summary>
<lastupdated>6/30/2015 8:00:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband.Both" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Both" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Configures both negative and positive offset segments. 
</summary>
<lastupdated>8/14/2015 9:07:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the criteria to determine the measurement fail status. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask.AbsoluteAndRelative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AbsoluteAndRelative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement fails if the power in the segment exceeds both the absolute and relative masks.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask.AbsoluteOrRelative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AbsoluteOrRelative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement fails if the power in the segment exceeds either the absolute or relative mask.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement fails if the power in the segment exceeds the absolute mask.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement fails if the power in the segment exceeds the relative mask.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCarrierRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
No RBW filtering is performed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:19:49 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:20:05 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
<lastupdated>7/10/2014 10:38:09 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Separates two tones with frequencies close to each other but with widely-differing amplitudes. 
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for occupied bandwidth (OBW) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the shape of the digital resolution bandwidth (RBW) filter.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement does not use any RBW filtering.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a Gaussian response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a flat response.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.SynchTuned4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 4-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:17:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.SynchTuned5" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SynchTuned5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RBW filter has a response of a 5-pole synchronously-tuned filter.
</summary>
<lastupdated>8/12/2014 8:17:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType.Rrc" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rrc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The RRC filter with the roll-off specified by the is used as the RBW filter.
</summary>
<lastupdated>7/10/2014 10:35:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the active edge for the trigger. This enum is used only when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/9/2015 1:37:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Rising" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The trigger asserts on the rising edge of the signal.
</summary>
<lastupdated>7/10/2014 10:19:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDigitalEdgeTriggerEdge.Falling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The trigger asserts on the falling edge of the signal.
</summary>
<lastupdated>7/10/2014 10:19:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.
</summary>
<lastupdated>7/10/2014 10:05:44 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:36:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement calculates the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:36:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel before measuring the carrier channel power.
</summary>
<lastupdated>7/10/2014 9:49:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The channel power of the acquired carrier channel is measured directly.
</summary>
<lastupdated>7/10/2014 9:49:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpCarrierRrcFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement applies the RRC filter on the acquired carrier channel before measuring the carrier channel power.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpm" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents an AMPM measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpm.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of AMPM measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXAmpmConfiguration.</value>
<lastupdated>12/8/2014 1:40:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpm.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve AMPM measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXAmpmResults.</value>
<lastupdated>12/8/2014 1:40:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the DPD measurement.
</summary>
<lastupdated>12/12/2014 3:57:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Performs the measurement on a single acquisition.
</summary>
<lastupdated>12/12/2014 3:58:20 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD measurement uses the value returned by <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetAveragingCount(System.String,System.Int32@)" crefType="PartiallyQualified" /> as the number of acquisitions over which to average the signal.
</summary>
<lastupdated>12/12/2014 3:59:54 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<lastupdated>9/11/2015 11:41:18 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition.BandwidthDefinition3dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinition3dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the 3 dB bandwidth of the RBW filter. When you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType)" crefType="FullyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.FftBased" />, RBW is the 3 dB bandwidth of the window specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwFftWindow)" crefType="FullyQualified" /> method.
</summary>
<lastupdated>9/11/2015 11:42:42 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterBandwidthDefinition.BandwidthDefinitionBinWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BandwidthDefinitionBinWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the RBW in terms of the bin width of the spectrum computed using an FFT when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType)" crefType="FullyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwRbwFilterType.FftBased" />.</summary>
<lastupdated>9/11/2015 11:43:37 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the sweep time.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="FullyQualified" /> method. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement computes the sweep time based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging the power over multiple acquisitions. The averaged power trace is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.
</summary>
<lastupdated>8/12/2014 8:23:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power trace is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
<lastupdated>7/10/2014 3:49:42 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power trace is averaged in a logarithm scale.
</summary>
<lastupdated>7/10/2014 3:49:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power trace is averaged.
</summary>
<lastupdated>7/10/2014 3:49:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the power trace at each sample instance is retained from one acquisition to the next.
</summary>
<lastupdated>7/10/2014 3:49:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the power trace at each sample instance is retained from one acquisition to the next.
</summary>
<lastupdated>7/10/2014 3:49:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarmConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the Harmonics measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureAutoHarmonics(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAutoHarmonics" nihasget="0" nihasset="0" niparameters="selectorString,autoHarmonicsSetupEnabled" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures auto configuration of successive harmonics. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="autoHarmonicsSetupEnabled">Specifies whether to enable a particular harmonic for measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgAutoHarmonics() function in C.</remarks>
<lastupdated>9/1/2014 12:07:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the Harmonics measurement.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled)" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled.True" crefType="PartiallyQualified" />.  </param>
<param name="averagingType"> Specifies the averaging type for averaging the power over multiple acquisitions. The averaged power trace is used for the measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 11:45:14 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureFundamentalMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFundamentalMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the acquisition time, in seconds, for acquiring the fundamental signal.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="measurementInterval">Specifies the acquisition time, in seconds, for acquiring the fundamental signal.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgFundamentalMeasurementInterval() function in C.</remarks>
<lastupdated>7/21/2014 9:17:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureFundamentalRbw(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFundamentalRbw" nihasget="0" nihasset="0" niparameters="selectorString,rbw,rbwFilterType,rrcAlpha" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter to be applied on the acquired signal. The bandwidth of the filter specified is used to measure the fundamental signal.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbw">Specifies the bandwidth, in hertz (Hz), of the RBW filter used to acquire the fundamental signal.  </param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.   </param>
<param name="rrcAlpha">Specifies the roll-off factor for the root-raised-cosine (RRC) filter.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgFundamentalRBW() function in C.</remarks>
<lastupdated>7/21/2014 9:20:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureHarmonic(System.String,System.Int32,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureHarmonic" nihasget="0" nihasset="0" niparameters="selectorString,harmonicOrder,harmonicBandwidth,harmonicEnabled,harmonicMeasurementInterval" niparametertypes="System.String,System.Int32,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the harmonic frequency, acquisition bandwidth, and acquisition time for the harmonic, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.False" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="harmonicOrder"> Specifies the order of the harmonic.</param>
<param name="harmonicBandwidth"> Specifies the resolution bandwidth, in hertz (Hz), for the harmonic. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="harmonicEnabled">Specifies whether to enable a particular harmonic for measurement. Only the enabled Harmonics are used to measure the total harmonic distortion (THD).</param>
<param name="harmonicMeasurementInterval"> Specifies the acquisition time, in seconds, for the harmonic.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgHarmonic() function in C.</remarks>
<lastupdated>1/9/2015 11:45:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureNumberOfHarmonics(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfHarmonics" nihasget="0" nihasset="0" niparameters="selectorString,numberOfHarmonics" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the  number of harmonics, including fundamental, to measure.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="numberOfHarmonics">Specifies the number of harmonics, including fundamental, to measure.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgNumberOfHarmonics() function in C.</remarks>
<lastupdated>9/17/2014 6:08:05 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetAveragingCount() function in C.</remarks>
<lastupdated>7/9/2014 11:26:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled.True" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled.True" crefType="PartiallyQualified" />.    
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:46:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging for the Harmonics measurement is enabled.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether averaging for the Harmonics measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:53:09 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the Harmonics measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether to enable averaging for the Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:59:55 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetAveragingType() function in C.</remarks>
<lastupdated>7/5/2014 3:43:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Harmonics measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetAveragingType() function in C.</remarks>
<lastupdated>8/12/2014 10:59:59 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetFundamentalMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the Harmonics measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the acquisition time, in seconds, for the Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetFundamentalMeasurementInterval() function in C.</remarks>
<lastupdated>1/6/2015 3:42:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetFundamentalMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the Harmonics measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the acquisition time, in seconds, for the Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetFundamentalMeasurementInterval() function in C.</remarks>
<lastupdated>1/6/2015 3:42:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for Harmonics measurement.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 3:46:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for Harmonics measurement.  
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies the maximum number of threads used for parallelism for Harmonics measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/12/2014 11:01:02 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetNumberOfHarmonics(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfHarmonics" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of harmonics, including fundamental, to measure.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of harmonics, including fundamental, to measure.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetNumberOfHarmonics() function in C.</remarks>
<lastupdated>9/15/2014 4:18:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetNumberOfHarmonics(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfHarmonics" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of Harmonics, including fundamental, to measure.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of Harmonics, including fundamental, to measure.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetNumberOfHarmonics() function in C.</remarks>
<lastupdated>8/12/2014 11:01:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAutoSetupEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether auto configuration of successive harmonics is enabled.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, indicates whether auto configuration of successive harmonics is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetAutoSetupEnabled() function in C.</remarks>
<lastupdated>9/15/2014 4:17:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAutoSetupEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable auto configuration of successive harmonics.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether to enable auto configuration of successive harmonics.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetAutoSetupEnabled() function in C.</remarks>
<lastupdated>9/15/2014 4:18:28 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether Harmonics measurement is enabled.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if Harmonics measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetMeasurementEnabled() function in C.</remarks>
<lastupdated>9/2/2014 10:27:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the Harmonics measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the Harmonics measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/12/2014 11:00:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the traces to be stored and retrieved after performing the Harmonics    measurement are enabled.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if the traces to be stored and retrieved after performing the Harmonics measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 2:52:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the Harmonics    measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the Harmonics measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/12/2014 10:59:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetHarmonicBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the resolution bandwidth, in hertz (Hz), for the harmonic.
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the resolution bandwidth, in hertz (Hz), for the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetHarmonicBandwidth() function in C.</remarks>
<lastupdated>1/9/2015 11:46:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetHarmonicBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHarmonicBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the resolution bandwidth, in hertz (Hz), for the harmonic. The value set by this method is not used if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the resolution bandwidth, in hertz (Hz), for the harmonic. The value set by this method is not used if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.True" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetHarmonicBandwidth() function in C.</remarks>
<lastupdated>1/9/2015 11:47:04 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetHarmonicMeasurementInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the harmonic.    
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the acquisition time, in seconds, for the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetHarmonicMeasurementInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:46:22 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetHarmonicMeasurementInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHarmonicMeasurementInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the harmonic.    
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the acquisition time, in seconds, for the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetHarmonicMeasurementInterval() function in C.</remarks>
<lastupdated>9/18/2014 12:31:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetHarmonicEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether a particular harmonic for measurement is enabled.    
</summary>
<param name="selectorString">Specifies the harmonic number. Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates whether a particular harmonic for measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetHarmonicEnabled() function in C.</remarks>
<lastupdated>1/9/2015 11:46:17 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetHarmonicEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHarmonicEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable a particular harmonic for measurement. Only the enabled Harmonics are    used to measure the total harmonic distortion (THD).    
</summary>
<param name="selectorString">Specifies the harmonic number.  Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether to enable a particular harmonic for measurement. Only the enabled Harmonics are    used to measure the THD.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetHarmonicEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:31:01 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetHarmonicOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHarmonicOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the harmonic.
</summary>
<param name="selectorString">Specifies the harmonic number.  Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the order of the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetHarmonicOrder() function in C.</remarks>
<lastupdated>1/9/2015 11:46:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetHarmonicOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHarmonicOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order of the harmonic.
</summary>
<param name="selectorString">Specifies the harmonic number.  Example: "harmonic0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildHarmonicString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the order of the harmonic.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetHarmonicOrder() function in C.</remarks>
<lastupdated>9/18/2014 12:31:21 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetFundamentalRbwFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetFundamentalRBWFilterAlpha() function in C.</remarks>
<lastupdated>7/5/2014 3:43:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetFundamentalRbwFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalRbwFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetFundamentalRBWFilterAlpha() function in C.</remarks>
<lastupdated>8/12/2014 11:00:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetFundamentalRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition bandwidth of the fundamental.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the acquisition bandwidth of the fundamental. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetFundamentalRBWFilterBandwidth() function in C.</remarks>
<lastupdated>7/5/2014 3:43:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetFundamentalRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the resolution bandwidth (RBW) filter to be applied on the acquired signal. The bandwidth of the filter specified is applicable for fundamental signal.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the RBW filter to be applied on the acquired signal. The bandwidth of the filter specified is applicable for fundamental signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetFundamentalRBWFilterBandwidth() function in C.</remarks>
<lastupdated>8/12/2014 11:00:17 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.GetFundamentalRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFundamentalRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmGetFundamentalRBWFilterType() function in C.</remarks>
<lastupdated>7/5/2014 3:44:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetFundamentalRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFundamentalRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmSetFundamentalRBWFilterType() function in C.</remarks>
<lastupdated>8/12/2014 11:00:24 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.ConfigureHarmonicArray(System.String,System.Int32[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureHarmonicArray" nihasget="0" nihasset="0" niparameters="selectorString,harmonicOrder,harmonicBandwidth,harmonicEnabled,harmonicMeasurementInterval" niparametertypes="System.String,System.Int32[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmHarmonicEnabled[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the harmonic frequency, acquisition bandwidth, and acquisition time for the harmonic, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration.SetAutoSetupEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled)" crefType="PartiallyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmAutoHarmonicsSetupEnabled.False" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="harmonicOrder"> Specifies an array representing the order of the harmonic.</param>
<param name="harmonicBandwidth"> Specifies an array representing the resolution bandwidth, in hertz (Hz), for the harmonic.</param>
<param name="harmonicEnabled">Specifies an array representing whether to enable a particular harmonic for measurement. Only the enabled Harmonics are used to measure the total harmonic distortion (THD).   </param>
<param name="harmonicMeasurementInterval"> Specifies an array representing the acquisition time, in seconds, for the harmonic.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_HarmCfgHarmonicArray() function in C.</remarks>
<lastupdated>1/9/2015 11:45:58 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates the overall measurement status.
</summary>
<lastupdated>7/10/2014 2:43:31 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the amplitude of the detected spurs is greater than the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchRangeAbsoluteLimitTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the amplitude of the detected spurs is lower than the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurAbsoluteLimit(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:43:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the spectral emission mask (SEM) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The SEM measurement uses the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the SEM measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:41:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwPowerUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the units for the absolute power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits.dBm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwPowerUnits.dBmPerHertz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="dBmPerHertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The absolute powers are reported in dBm/Hz.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the threshold for the trace while finding the peaks.  
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the threshold for the trace while finding the peaks.
</summary>
<lastupdated>7/10/2014 10:36:27 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the threshold for the trace while finding the peaks.
</summary>
<lastupdated>7/10/2014 10:36:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for the frequency count (Fcnt) measurement. The averaged instantaneous signal phase difference is used for the measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType.Mean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Mean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The mean of the instantaneous signal phase difference over multiple acquisitions is used for the frequency measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The maximum instantaneous signal phase difference over multiple acquisitions is used for the frequency measurement. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The minimum instantaneous signal phase difference over multiple acquisitions is used for the frequency measurement. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntAveragingType.MinMax" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MinMax" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The maximum instantaneous signal phase difference over multiple acquisitions is used for the frequency measurement. The sign of the phase difference is ignored to find the maximum instantaneous value.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type used to reduce spectral leakage.
</summary>
<lastupdated>7/8/2014 3:19:01 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
<lastupdated>7/10/2014 10:14:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection &gt;90dB and having a moderately wide main lobe. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Separates two tones with frequencies close to each other but with widely-differing amplitudes.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for adjacent channel power (ACP) measurement.
</summary>
<lastupdated>7/8/2014 3:27:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor.
</summary>
<lastupdated>7/10/2014 9:48:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power spectrum is averaged in a logarithm scale.
</summary>
<lastupdated>7/8/2014 3:27:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The square root of the power spectrum is averaged.
</summary>
<lastupdated>7/8/2014 3:27:50 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
<lastupdated>7/8/2014 3:27:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The least power in the spectrum at each frequency bin is retained from one acquisition to the next.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingType.Vector" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Vector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The complex FFT vector is averaged across multiple acquisitions. Vector averaging reduces noise from synchronous signals and usually requires a trigger to improve block-to-block phase coherence.
</summary>
<lastupdated>7/8/2014 3:27:58 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerNextPeak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Moves the marker to the next highest, next left, or next right peak above the threshold on the configured trace.
</summary>
<lastupdated>8/12/2014 8:18:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak.NextHighest" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NextHighest" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Moves the marker to the next highest peak above the threshold on the configured trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak.NextLeft" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NextLeft" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Moves the marker to the next peak to the left of the configured trace.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerNextPeak.NextRight" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NextRight" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Moves the marker to the next peak to the right of the configured trace.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the DPD model used by the DPD measurement.
</summary>
<lastupdated>12/12/2014 4:11:25 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LookupTable" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the complex gain coefficients applied when performing digital predistortion to linearize systems with negligible memory effects.
</summary>
<lastupdated>12/12/2014 4:11:44 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MemoryPolynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the memory polynomial predistortion coefficients used to linearize systems with moderate memory effects.
</summary>
<lastupdated>12/12/2014 4:11:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GeneralizedMemoryPolynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
This model computes the generalized memory polynomial predistortion coefficients used to linearize systems with significant memory effects.
</summary>
<lastupdated>12/12/2014 4:11:38 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the IM measurement.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The power spectrum is averaged in a logarithmic scale. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The square root of the power spectrum is averaged. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The peak power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The least power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<lastupdated>12/19/2014 4:25:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType.MagnitudeAndPhase" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MagnitudeAndPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts the magnitude and phase of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType.MagnitudeOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="MagnitudeOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts only the magnitude of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType.PhaseOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="PhaseOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement predistorts only the phase of the input waveform.
</summary>
<lastupdated>12/12/2014 3:54:25 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables frequency offset correction for the measurement.When Frequency Offset Correction Enabled is True, the measurement computes and corrects any frequency offset between the reference and the acquired waveforms.When Frequency Offset Correction Enabled is False, frequency offset correction is not performed.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmFrequencyOffsetCorrectionEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarm" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXHarm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a Harmonics measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:47 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarm.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of Harmonics measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXHarmConfiguration.</value>
<lastupdated>1/9/2015 11:44:47 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarm.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXHarmResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve Harmonics measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXHarmResults.</value>
<lastupdated>1/9/2015 11:44:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the minimum quiet time used for triggering.
</summary>
<lastupdated>7/10/2014 3:22:31 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The minimum quiet time for triggering is the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetTriggerMinimumQuietTimeDuration(System.String,System.Double)" crefType="PartiallyQualified" /> method. </summary>
<lastupdated>1/9/2015 1:44:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerMinimumQuietTimeMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the minimum quiet time used for triggering.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels.
</summary>
<lastupdated>6/8/2015 3:44:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierCenterToMeasurementBandwidthCenter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierCenterToMeasurementBandwidthCenter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The start frequency and stop frequency are defined from the center of the closest carrier channel bandwidth to the center of the offset segment measurement bandwidth.
<format type="italics">Measurement Bandwidth</format> = <format type="italics">Resolution Bandwidth</format> * <format type="italics">Bandwidth Integral</format>.
</summary>
<lastupdated>7/3/2015 11:54:31 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierCenterToMeasurementBandwidthEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierCenterToMeasurementBandwidthEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The start frequency and stop frequency are defined from the center of the closest carrier channel bandwidth to the nearest edge of the offset segment measurement bandwidth.
</summary>
<lastupdated>6/8/2015 3:45:47 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierEdgeToMeasurementBandwidthCenter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The start frequency and stop frequency are defined from the nearest edge of the closest carrier channel bandwidth to the center of the nearest offset segment measurement bandwidth.
</summary>
<lastupdated>6/8/2015 3:46:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="CarrierEdgeToMeasurementBandwidthEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The start frequency and stop frequency are defined from the nearest edge of the closest carrier channel bandwidth to the edge of the nearest offset segment measurement bandwidth.
</summary>
<lastupdated>6/8/2015 3:46:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
<lastupdated>7/10/2014 10:15:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method. 
</summary>
<lastupdated>1/9/2015 1:37:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW).
</summary>
<lastupdated>7/10/2014 10:04:29 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:36:19 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpOffsetRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired offset channel before measuring the offset channel power.
</summary>
<lastupdated>7/10/2014 10:03:20 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The channel power of the acquired offset channel is measured directly.
</summary>
<lastupdated>7/10/2014 10:03:28 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpOffsetRrcFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement applies the RRC filter on the acquired offset channel before measuring the offset channel power.
</summary>
<lastupdated>7/10/2014 10:03:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the acquisition sample rate configuration mode.
</summary>
<lastupdated>12/12/2014 4:10:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.User" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="User" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The acquisition sample rate is defined by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.GetMeasurementSampleRateMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/7/2015 11:57:31 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdMeasurementSampleRateMode.ReferenceWaveform" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ReferenceWaveform" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The acquisition sample rate is set to match the sample rate of the reference waveform.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-AM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:53:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType.LeastSquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastSquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the energy of the polynomial approximation error.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType.LeastAbsoluteResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastAbsoluteResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the magnitude of the polynomial approximation error
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToAMCurveFitType.Bisquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Bisquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Excludes the effect of data outliers while minimizing the energy of the polynomial approximation error
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFColdSourceMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement should calibrate the noise characteristics of the analyzer or compute the noise characteristics of the DUT for the cold source method.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode.Measure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Measure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The noise figure (NF) measurement computes the noise characteristics of the DUT and compensates for the noise figure of the analyzer.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFColdSourceMode.Calibrate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Calibrate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement computes the noise characteristics of the analyzer.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIM" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIM" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents the IM measurement.
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIM.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the IM measurement
</summary>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIM.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the IM measurement results.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarker" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarker" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a Marker measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:58 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarker.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of Marker measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXMarkerConfiguration</value>
<lastupdated>1/9/2015 11:47:31 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarker.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve Marker measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXMarkerResults</value>
<lastupdated>1/9/2015 11:47:37 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcp" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents an ACP measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:30:52 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcp.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration">
      <summary>
Gets the RFmxSpecAnMXAcpConfiguration instance that allows configuration of ACP measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXAcpConfiguration.</value>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcp.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpResults">
      <summary>
Gets the RFmxSpecAnMXAcpResults instance that provides methods to retrieve ACP measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXAcpResults.</value>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdfThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the complementary    cumulative distribution function (CCDF) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
All samples are considered for the CCDF measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The samples above the threshold level specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdLevel(System.String,System.Double)" crefType="PartiallyQualified" /> method are considered for the CCDF measurement.
</summary>
<lastupdated>1/9/2015 1:36:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXMarkerPeakExcursionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable the peak excursion check for the trace while finding the peaks. 
</summary>
<lastupdated>9/11/2015 11:39:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Disables the peak excursion check while finding the peaks on trace.
</summary>
<lastupdated>6/30/2015 10:20:00 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXMarkerPeakExcursionEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Enables the peak excursion check while finding the peaks on trace.
</summary>
<lastupdated>6/30/2015 10:20:13 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the polynomial approximation cost-function of the device under test AM-to-PM characteristic when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<lastupdated>1/7/2015 11:54:42 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType.LeastSquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastSquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the energy of the polynomial approximation error.
</summary>
<lastupdated>12/12/2014 4:09:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType.LeastAbsoluteResidual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="LeastAbsoluteResidual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Minimizes the magnitude of the polynomial approximation error.
</summary>
<lastupdated>12/12/2014 4:09:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdLookupTableAMToPMCurveFitType.Bisquare" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Bisquare" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Excludes the effect of data outliers while minimizing the energy of the polynomial approximation error
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the set of properties that are considered by NI-RFmx in the locked signal configuration state.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>This is the normal mode of NI-RFmx operation. All configuration changes in RFmxInstr properties or in personality properties will be applied during RFmx Commit. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.NoChange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal configuration is locked after the first Commit of the named signal configuration. Any configuration change thereafter either in RFmxInstr properties or personality properties will not be considered by subsequent RFmx Commits or Initiates of this signal.  Use No Change if you have created named signal configurations for all measurement configurations but are setting some RFmxInstr properties. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.Frequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Frequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal configuration, other than center frequency and external attenuation, is locked after first Commit of the named signal configuration. Thereafter, only the Center Frequency and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="FullyQualified" /> method value changes will be considered by subsequent driver Commits or Initiates of this signal.  Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.  </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.ReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal configuration, other than the reference level, is locked after first Commit of the named signal configuration. Thereafter only the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method value change will be considered by subsequent driver Commits or Initiates of this signal. If you have configured this signal to use an IQ Power Edge Trigger, NI recommends that you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> to Relative so that the trigger level is automatically adjusted as you adjust the reference level. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXLimitedConfigurationChange.FrequencyAndReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FrequencyAndReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal configuration, other than center frequency, reference level, and external attenuation, is locked after first Commit of the named signal configuration. Thereafter only Center Frequency, Reference Level, and External Attenuation method value changes will be considered by subsequent driver Commits or Initiates of this signal. If you have configured this signal to use an IQ Power Edge Trigger, NI recommends you set the IQ Power Edge  Level Type to Relative so that the trigger level is automatically adjusted as you adjust the reference level. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode. </summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the spectral emission mask (SEM) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchAbsoluteMaskTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAbsoluteMaskTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absoluteMask" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the absolute mask trace used for SEM measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="absoluteMask">Upon return, contains the absolute mask trace, in dBm or dBm/Hz, used for the channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchAbsoluteMaskTrace() function in C.</remarks>
<lastupdated>9/18/2014 11:31:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchCarrierMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCarrierMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,peakAbsolutePower,peakFrequency,totalRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the carrier power measurement.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="absolutePower">Upon return, contains the carrier power. The power is measured in dBm when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" />, and in dBm/Hz when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" />.</param>
<param name="peakAbsolutePower">Upon return, contains the peak power in the carrier channel. The power is measured in dBm when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" />, and in dBm/Hz when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" />.</param>
<param name="peakFrequency"> Upon return, contains the frequency, in hertz (Hz), at which the peak power occurs in the carrier channel.</param>
<param name="totalRelativePower"> Upon return, contains the carrier power, in dB, relative to the total carrier power of all enabled carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchCarrierMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 11:31:50 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchCompositeMeasurementStatus(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCompositeMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,timeout,compositeMeasurementStatus" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Fetches the overall SEM measurement status based on the measurement limits and the fail criteria that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method for each offset segment. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="compositeMeasurementStatus">Indicates the overall measurement status based on the measurement limits and the fail criteria that you set in the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask" crefType="PartiallyQualified" /> method for each offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchCompositeMeasurementStatus() function in C.</remarks>
<lastupdated>1/9/2015 11:57:54 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchFrequencyResolution(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequencyResolution" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete</param>
<param name="frequencyResolution">Upon return, contains the frequency bin spacing, in Hz, of the spectrum acquired by the measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 11:32:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchLowerOffsetMargin(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the measurement status and margin from the limit line measured in the lower offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="measurementStatus">Indicates the lower offset measurement status based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.</param>
<param name="margin">Upon return, contains the margin, in dB, from the limit mask value that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method. Margin is defined as the maximum difference between the spectrum and the limit mask.</param>
<param name="marginFrequency">Upon return, contains the frequency, in hertz (Hz), at which the margin occurred in the lower (negative) offset.</param>
<param name="marginAbsolutePower">Upon return, contains the power, in dBm or dBm/Hz, at which the margin occurred in the lower (negative) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="marginRelativePower">Upon return, contains the power, in dB, at which the margin occurred in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchLowerOffsetMargin() function in C.</remarks>
<lastupdated>1/9/2015 11:58:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchLowerOffsetPower(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the lower offset segment power measurements.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="totalAbsolutePower">Upon return, contains the lower (negative) offset segment power measured.</param>
<param name="totalRelativePower">Upon return, contains the peak power in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.</param>
<param name="peakAbsolutePower">Upon return, contains the peak power measured in the lower (negative) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="peakFrequency"> Upon return, contains the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.</param>
<param name="peakRelativePower"> Upon return, contains the peak power in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchLowerOffsetPower() function in C.</remarks>
<lastupdated>1/9/2015 12:01:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchRelativeMaskTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchRelativeMaskTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,relativeMask" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the relative mask trace used for spectral emission mask (SEM) measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="relativeMask">Upon return, contains the relative mask trace, in dB, used for the channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchRelativeMaskTrace() function in C.</remarks>
<lastupdated>9/18/2014 11:33:34 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spectrum used for spectral emission mask (SEM) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="spectrum">Upon return, contains the data for the spectrum.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchSpectrum() function in C.</remarks>
<lastupdated>9/18/2014 11:33:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchTotalCarrierPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalCarrierPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the total integrated power, in dBm, of all the enabled carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />. Gets the power spectral density, in dBm/Hz, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="totalCarrierPower"> Upon return, contains the total integrated power, in dBm, of all the active carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />. Upon return, contains the power spectral density, in dBm/Hz, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchTotalCarrierPower() function in C.</remarks>
<lastupdated>8/14/2015 9:08:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchUpperOffsetMargin(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the measurement status and margin from the limit line measured in the upper offset segment.
</summary>
<param name="selectorString"> Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="measurementStatus">Indicates the upper offset measurement status based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.</param>
<param name="margin">Upon return, contains the margin, in dB, from the limit mask value that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method. Margin is defined as the maximum difference between the spectrum and the limit mask.</param>
<param name="marginFrequency">Upon return, contains the frequency, in hertz (Hz), at which the margin occurred in the upper (positive) offset.</param>
<param name="marginAbsolutePower">Upon return, contains the power, in dBm or dBm/Hz, at which the margin occurred in the upper (positive) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="marginRelativePower">Upon return, contains the power, in dB, at which the margin occurred in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchUpperOffsetMargin() function in C.</remarks>
<lastupdated>1/9/2015 1:16:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchUpperOffsetPower(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the upper offset segment power measurements.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="totalAbsolutePower">Upon return, contains the upper (positive) offset segment power measured.</param>
<param name="totalRelativePower">Upon return, contains the power in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier.</param>
<param name="peakAbsolutePower">Upon return, contains the peak power measured in the upper (positive) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" />  method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="peakFrequency">Upon return, contains the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.</param>
<param name="peakRelativePower">Upon return, contains the peak power in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchUpperOffsetPower() function in C.</remarks>
<lastupdated>1/9/2015 1:22:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz), of the carrier. 
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the center frequency, in Hz, of the carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierFrequency() function in C.</remarks>
<lastupdated>1/6/2015 2:31:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.     
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency range, in hertz (Hz), over which the measurement integrates the carrier power.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>1/6/2015 2:08:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier power.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:35:32 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierTotalRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierTotalRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier power, in dB, relative to the total carrier power of all enabled carriers.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier power, in dB, relative to the total carrier power of all enabled carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierTotalRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:36:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierPeakAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power in the carrier channel.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power in the carrier channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierPeakAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:35:53 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCarrierPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at which the peak power occurred in the carrier channel.
</summary>
<param name="selectorString">Specifies the result name and carrier number. Example: "carrier0", "result::r1/carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, at which the peak power occurred in the carrier channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCarrierPeakFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:36:05 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the start frequency, in Hz, of the offset segment relative to the closest configured carrier offset.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetStartFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:38:00 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the stop frequency, in Hz, of the offset segment relative to the closest configured carrier offset.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetStopFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:38:08 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetTotalAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetTotalAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the lower (negative) offset segment power measured.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the lower (negative) offset segment power measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetTotalAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:38:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetTotalRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetTotalRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetTotalRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:38:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetPeakAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured in the lower (negative) offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power measured in the lower (negative) offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetPeakAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:37:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetPeakRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPeakRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power in the lower (negative) offset segment relative to the integrated or peak power    of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetPeakRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:37:44 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, at which the peak power occurred in the offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetPeakFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:37:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the margin, in dB, from the limit mask.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the margin, in dB, from the limit mask.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetMargin() function in C.</remarks>
<lastupdated>9/18/2014 11:36:43 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetMarginAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, at which the margin occurred in the lower (negative) offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, at which the margin occurred in the lower (negative) offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetMarginAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:36:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetMarginRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, at which the margin occurred in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, at which the margin occurred in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetMarginRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:37:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetMarginFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at which the margin occurred in the lower (negative) offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in hertz (Hz), at which the margin occurred in the lower (negative) offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetMarginFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:37:03 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetPowerReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index for measured power that was used as reference to define the lower    (negative) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index for measured power that was used as reference to define the lower    (negative) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>9/18/2014 11:37:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetLowerOffsetMeasurementStatus(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Gets the lower offset measurement status based on measurement limits and the fail criteria.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Indicates the lower offset measurement status based on measurement limits and the fail criteria.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsLowerOffsetMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 11:37:19 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetTotalCarrierPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTotalCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the total integrated power, in dBm, of all the enabled carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />. Gets the power spectral density, in dBm/Hz, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />.  
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the total integrated power of all the enabled  carriers measured when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsTotalCarrierPower() function in C.</remarks>
<lastupdated>8/7/2015 1:09:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetFrequencyResolution(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyResolution" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency bin spacing, in hertz (Hz), of the spectrum acquired by the measurement</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsFrequencyResolution() function in C.</remarks>
<lastupdated>9/18/2014 11:36:31 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetCompositeMeasurementStatus(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Gets the overall measurement status based on the measurement limits and the fail criteria. 
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Indicates the overall measurement status based on the measurement limits and the fail criteria.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsCompositeMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 11:36:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the start frequency, in Hz, of the offset segment relative to the closest configured carrier offset.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetStartFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:40:05 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier offset.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the stop frequency, in Hz, of the offset segment relative to the closest configured carrier offset.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetStopFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:40:11 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetTotalAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetTotalAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the upper (positive) offset segment power.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the upper (positive) offset segment power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetTotalAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:40:16 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetTotalRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetTotalRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power in the upper (positive) offset segment relative to the integrated or peak power    of the reference carrier. 
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power in the upper (positive) offset segment relative to the integrated or peak power    of the reference carrier.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetTotalRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:40:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetPeakAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPeakAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power measured in the upper (positive) offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power measured in the upper (positive) offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetPeakAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:39:38 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetPeakRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPeakRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power in the upper (positive) offset segment relative to the integrated or peak    power of the reference carrier. 
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power in the upper (positive) offset segment relative to the integrated or peak    power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetPeakRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:39:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at which the peak power occurred in the offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, at which the peak power occurred in the offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetPeakFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:39:45 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the margin, in dB, from the limit mask.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the margin, in dB, from the limit mask.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetMargin() function in C.</remarks>
<lastupdated>9/18/2014 11:39:00 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetMarginAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, at which the margin occurred in the upper (positive) offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, at which the margin occurred in the upper (positive) offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetMarginAbsolutePower() function in C.</remarks>
<lastupdated>9/18/2014 11:39:07 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetMarginRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, at which the margin occurred in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, at which the margin occurred in the upper (positive) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetMarginRelativePower() function in C.</remarks>
<lastupdated>9/18/2014 11:39:22 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetMarginFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), at which the margin occurred in the upper (positive) offset.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the frequency, in Hz, at which the margin occurred in the upper (positive) offset.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetMarginFrequency() function in C.</remarks>
<lastupdated>9/18/2014 11:39:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetPowerReferenceCarrier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPowerReferenceCarrier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the carrier index for measured power that was used as reference to define the upper    (positive) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.
</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the carrier index for measured power that was used as reference to define the upper    (positive) offset segment relative power. The reference carrier is the carrier that has an offset    closest to the offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetPowerReferenceCarrier() function in C.</remarks>
<lastupdated>9/18/2014 11:39:58 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.GetUpperOffsetMeasurementStatus(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Gets the upper offset measurement status based on measurement limits and the fail criteria.</summary>
<param name="selectorString">Specifies the result name and offset number. Example: "offset0", "result::r1/offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the upper offset measurement status based on measurement limits and the fail criteria.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetResultsUpperOffsetMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 11:39:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchLowerOffsetMarginArray(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetMarginArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the array of measurement statuses and margins from the limit line measured in the lower offset segments.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="measurementStatus"> Upon return, contains the array of lower offset measurement statuses based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.</param>
<param name="margin">Upon return, contains the array of margins, in dB, from the limit mask value that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method. Margin is defined as the maximum difference between the spectrum and the limit mask.</param>
<param name="marginFrequency">Upon return, contains the array of frequencies, in hertz (Hz), at which the margin occurred in each lower (negative) offset segment.</param>
<param name="marginAbsolutePower"> Upon return, contains the array of powers, in dBm or dBm/Hz, at which the margin occurred in the lower (negative) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />.
</param>
<param name="marginRelativePower">Upon return, contains the array of powers, in dB, at which the margin occurred in each lower (negative) offset segment relative to the integrated or peak power of the reference carrier. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchLowerOffsetMarginArray() function in C.</remarks>
<lastupdated>1/9/2015 12:00:20 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchLowerOffsetPowerArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the arrays of lower offset segment power measurements.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="totalAbsolutePower"> Upon return, contains the array of lower (negative) offset segment powers measured.</param>
<param name="totalRelativePower">Upon return, contains the array of powers in each lower (negative) offset segment relative to the integrated or peak power of the reference carrier.</param>
<param name="peakAbsolutePower">Upon return, contains the array of peak powers measured in each lower (negative) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="peakFrequency">Upon return, contains the array of frequencies, in hertz (Hz), at which the peak power occurred in each offset segment.</param>
<param name="peakRelativePower">Upon return, contains the array of peak powers in the lower (negative) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchLowerOffsetPowerArray() function in C.</remarks>
<lastupdated>1/9/2015 12:02:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchUpperOffsetMarginArray(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetMarginArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemUpperOffsetMeasurementStatus[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the measurement status and margin from the limit line measured in the upper offset segments.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the methods waits until the measurement is complete.</param>
<param name="measurementStatus">Upon return, contains the array of upper offset measurement statuses based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.</param>
<param name="margin">Upon return, contains the array of margins, in dB, from the limit mask value that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method. Margin is defined as the maximum difference between the spectrum and the limit mask.</param>
<param name="marginFrequency">Upon return, contains the array of frequencies, in hertz (Hz), at which the margin occurred in each upper (positive) offset.</param>
<param name="marginAbsolutePower"> Upon return, contains the array of powers, in dBm or dBm/Hz, at which the margin occurred in each upper (positive) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="marginRelativePower">Upon return, contains the array of powers, in dB, at which the margin occurred in each upper (positive) offset segment relative to the integrated or peak power of the reference carrier. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchUpperOffsetMarginArray() function in C.</remarks>
<lastupdated>1/9/2015 1:16:57 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemResults.FetchUpperOffsetPowerArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the arrays of upper offset segment power measurements.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="totalAbsolutePower">Upon return, contains the array of upper (positive) offset segment powers measured.</param>
<param name="totalRelativePower">Upon return, contains the array of powers measured in each upper (positive) offset segment relative to the integrated or peak power of the reference carrier.</param>
<param name="peakAbsolutePower">Upon return, contains the array of peak powers measured in each upper (positive) offset segment. The power is measured in dBm when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBm" crefType="PartiallyQualified" />, and in dBm/Hz when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits.dBmPerHertz" crefType="PartiallyQualified" />. </param>
<param name="peakFrequency">Upon return, contains the array of frequencies, in hertz (Hz), at which the peak power occurred in each offset segment.</param>
<param name="peakRelativePower"> Upon return, contains the array of peak powers measured in each upper (positive) offset segment relative to the integrated or peak power of the reference carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMFetchUpperOffsetPowerArray() function in C.</remarks>
<lastupdated>1/9/2015 1:22:52 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the SEM measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled,System.Int32,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Configures averaging for the spectral emission mask (SEM) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="averagingEnabled"> Specifies whether to enable averaging for the measurement. </param>
<param name="averagingCount">Specifies the number of acquisitions used for averaging when you set the averagingEnabled parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled.True" crefType="PartiallyQualified" />. </param>
<param name="averagingType"> Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement. Refer to the Averaging section of the Spectrum topic for more information about averaging types.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgAveraging() function in C.</remarks>
<lastupdated>1/9/2015 11:51:29 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierEnabled" nihasget="0" nihasset="0" niparameters="selectorString,carrierEnabled" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled" nireturnvaluetype="System.Int32">
      <summary>
Configures whether to consider the carrier power as part of total carrier power measurement. 
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="carrierEnabled">Specifies whether to consider the carrier power as part of total carrier power measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:33:01 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,integrationBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the frequency range, in hertz (Hz), over which the measurement integrates the carrier channel power. 
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="integrationBandwidth">Specifies the frequency range, in Hz, over which the measurement integrates the carrier channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>6/29/2015 2:38:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,carrierFrequency" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the center frequency, in hertz (Hz), of the carrier, relative to the RF center frequency
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="carrierFrequency">Specifies the center frequency, in Hz, of the carrier, relative to the RF center frequency. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierFrequency() function in C.</remarks>
<lastupdated>9/18/2014 12:33:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter of the carrier signal.
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW of the carrier. Refer to the SEM topic for more details on RBW. </param>
<param name="rbw">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the acquired carrier signal, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 11:51:50 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierRrcFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierRrcFilter" nihasget="0" nihasset="0" niparameters="selectorString,rrcFilterEnabled,rrcAlpha" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the root raised cosine (RRC) channel filter to apply on the acquired carrier channel before measuring the channel power. RRC alpha is the filter roll off.
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="rrcFilterEnabled">Specifies whether to apply the RRC filter on the acquired carrier channel before measuring the carrier channel power.</param>
<param name="rrcAlpha">Specifies the roll-off factor for the RRC filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierRRCFilter() function in C.</remarks>
<lastupdated>9/18/2014 12:33:25 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureFft(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFft" nihasget="0" nihasset="0" niparameters="selectorString,fftWindow,fftPadding" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures window and FFT to obtain a spectrum for the spectral emission mask (SEM) measurement.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="fftWindow">Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectrum topic for more information about FFT window types.</param>
<param name="fftPadding">Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is given by the following formula: waveform size * padding. This parameter is used only when the acquisition span is less than the device instantaneous bandwidth of the device. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgFFT() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,numberOfCarriers" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of carriers for the spectral emission mask (SEM) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="numberOfCarriers">Specifies the number of carriers for the SEM measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgNumberOfCarriers() function in C.</remarks>
<lastupdated>8/13/2014 8:02:36 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of offset segments for the spectral emission mask (SEM) measurement. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="numberOfOffsets">Specifies the number of offset segments for the SEM measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgNumberOfOffsets() function in C.</remarks>
<lastupdated>7/9/2014 11:56:42 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetAbsoluteLimit(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetAbsoluteLimit" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitMode,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the absolute limit mode and specifies the absolute power limits corresponding to the beginning and end of the offset segment.
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="absoluteLimitMode">Specifies whether the absolute limit mask is a flat line or a line with a slope. </param>
<param name="absoluteLimitStart">Specifies the absolute power limit, in dBm, corresponding to the beginning of the offset segment. The value of this parameter is also set as the stop limit for the offset segment when you set the absoluteLimitMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" />. </param>
<param name="absoluteLimitStop"> Specifies the absolute power limit, in dBm, corresponding to the end of the offset segment. This parameter is ignored when you set the absoluteLimitMode parameter to Couple.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetAbsoluteLimit() function in C.</remarks>
<lastupdated>9/18/2014 12:33:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetBandwidthIntegral(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthIntegral" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution of the spectrum to compare with spectral mask limits as an integer multiple of the resolution bandwidth (RBW). If you set this method to a value greater than 1, the measurement acquires the spectrum with a narrow resolution and then processes it digitally to get a wider resolution that is equal to the product of the bandwidth integral and the RBW. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="bandwidthIntegral"> Specifies the resolution of the spectrum to compare with spectral mask limits as an integer multiple of the RBW. If you set this method to a value greater than 1, the measurement acquires the spectrum with a narrow resolution and then processes it digitally to get a wider resolution that is equal to the product of the bandwidth integral and the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetBandwidthIntegral() function in C.</remarks>
<lastupdated>9/18/2014 12:34:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequency(System.String,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,offsetStartFrequency,offsetStopFrequency,offsetEnabled,offsetSideband" niparametertypes="System.String,System.Double,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband" nireturnvaluetype="System.Int32">
      <summary>
Configures the offset frequency start and stop values and specifies whether the offset segment is present on one side, or on both sides of the carriers.
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="offsetStartFrequency">Specifies the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method. </param>
<param name="offsetStopFrequency"> Specifies the stop frequency, in Hz, of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method. </param>
<param name="offsetEnabled"> Specifies whether to enable the offset segment for the SEM measurement.</param>
<param name="offsetSideband"> Specifies whether the offset segment is present on one side, or on both sides of the carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetFrequency() function in C.</remarks>
<lastupdated>8/14/2015 9:04:40 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,limitFailMask" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">
      <summary>
Configures the criteria to determine the measurement fail status. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="limitFailMask">Specifies the criteria to determine the measurement fail status.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetLimitFailMask() function in C.</remarks>
<lastupdated>9/18/2014 12:34:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRbwFilter(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter of the offset segment.
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="rbwAuto"> Specifies whether the measurement computes the RBW. Refer to the RBW and Sweep Time section in the SEM topic for more details on RBW and sweep time.</param>
<param name="rbw"> Specifies the bandwidth, in hertz (Hz), of the RBW filter used to sweep the acquired offset segment, when you set the rbwAuto parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth.False" crefType="PartiallyQualified" />. </param>
<param name="rbwFilterType"> Specifies the shape of the digital RBW filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRBWFilter() function in C.</remarks>
<lastupdated>1/9/2015 11:52:20 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the attenuation, in dB, relative to the external attenuation. Use this method to compensate for variations in external attenuation when the offset channels are spread wide in frequency.
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="relativeAttenuation">Specifies the attenuation, in dB, relative to the external attenuation.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>9/18/2014 12:34:48 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRelativeLimit(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeLimit" nihasget="0" nihasset="0" niparameters="selectorString,relativeLimitMode,relativeLimitStart,relativeLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the relative limit mode and specifies the relative power limits corresponding to the beginning and end of the offset segment. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="relativeLimitMode">Specifies whether the relative limit mask is a flat line or a line with a slope. </param>
<param name="relativeLimitStart">Specifies the relative power limit, in dB, corresponding to the beginning of the offset segment. The value of this parameter is also set as the stop limit for the offset segment when you set the relativeLimitMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" />.</param>
<param name="relativeLimitStop">Specifies the relative power limit, in dB, corresponding to the end of the offset segment. This parameter is ignored if you set the relativeLimitMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRelativeLimit() function in C.</remarks>
<lastupdated>9/18/2014 12:34:54 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigurePowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigurePowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,powerUnits" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Configures the units for the absolute power.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="powerUnits">Specifies the units for the absolute power.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgPowerUnits() function in C.</remarks>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureReferenceType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceType" nihasget="0" nihasset="0" niparameters="selectorString,referenceType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType" nireturnvaluetype="System.Int32">
      <summary>
Configures whether the power reference is the integrated power or the peak power in the closest carrier channel.  The leftmost carrier is the carrier closest to all the lower (negative) offset segments. The rightmost carrier offset is the carrier closest to all the upper (positive) offset segments.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="referenceType">Specifies whether the power reference is the integrated power or the peak power in the closest carrier channel. The leftmost carrier is the carrier closest to all the lower (negative) offset segments. The rightmost carrier offset is the carrier closest to all the upper (positive) offset segments.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgReferenceType() function in C.</remarks>
<lastupdated>7/9/2014 1:39:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the sweep time. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="sweepTimeAuto"> Specifies whether the measurement computes the sweep time. </param>
<param name="sweepTimeInterval"> Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgSweepTime() function in C.</remarks>
<lastupdated>1/9/2015 11:53:17 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureCarrierChannelBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCarrierChannelBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,carrierChannelBandwidth" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the channel bandwidth, in hertz (Hz), of the carrier. 
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="carrierChannelBandwidth">Specifies the channel bandwidth, in hertz (Hz), of the carrier. The channel bandwidth is used to calculate the  values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" /> methods when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgCarrierChannelBandwidth() function in C.</remarks>
<lastupdated>9/11/2015 12:27:54 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,offsetFrequencyDefinition" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Configures the offset frequency definition for the SEM measurement. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="offsetFrequencyDefinition"> Specifies the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>7/29/2015 3:38:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetAbsoluteLimitStart(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the absolute power limit, in dBm, corresponding to the beginning of the offset segment.       
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the absolute power limit, in dBm, corresponding to the beginning of the offset segment. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetAbsoluteLimitStart() function in C.</remarks>
<lastupdated>9/18/2014 12:36:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitStart(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the absolute power limit, in dBm, corresponding to the beginning of the offset segment.    This power limit is also set as the absolute power limit for the offset segment when you set the    <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the absolute power limit, in dBm, corresponding to the beginning of the offset segment.    This power limit is also set as the absolute power limit for the offset segment when you set the   <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetAbsoluteLimitStart() function in C.</remarks>
<lastupdated>1/9/2015 11:55:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetAbsoluteLimitStop(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the absolute power limit, in dBm, corresponding to the end of the offset segment. </summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the absolute power limit, in dBm, corresponding to the end of the offset segment. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetAbsoluteLimitStop() function in C.</remarks>
<lastupdated>9/18/2014 12:36:12 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitStop(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the absolute power limit, in dBm, corresponding to the end of the offset segment. This    power limit is also set as the absolute power limit for the offset segment when you set the   <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode)" crefType="PartiallyQualified" /> method  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the absolute power limit, in dBm, corresponding to the end of the offset segment. This    power limit is also set as the absolute power limit for the offset segment when you set the   <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetAbsoluteLimitStop() function in C.</remarks>
<lastupdated>1/9/2015 11:56:01 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the absolute limit mask is a flat line or is a line with a slope. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the absolute limit mask is a flat line or is a line with a slope.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetAbsoluteLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 12:35:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetAbsoluteLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetAbsoluteLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the absolute limit mask is a flat line or is a line with a slope. 
</summary>
<param name="selectorString">Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether the absolute limit mask is a flat line or is a line with a slope.   </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetAbsoluteLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 12:38:57 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of acquisitions used for averaging.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the number of acquisitions used for averaging.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetAveragingCount() function in C.</remarks>
<lastupdated>7/5/2014 4:56:16 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of acquisitions used for averaging when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled.True" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of acquisitions used for averaging when you set the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled.True" crefType="PartiallyQualified" />.    
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetAveragingCount() function in C.</remarks>
<lastupdated>1/9/2015 11:55:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether averaging for the spectral emission mask (SEM) measurement is enabled. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether averaging for the SEM measurement is enabled.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetAveragingEnabled() function in C.</remarks>
<lastupdated>9/2/2014 3:01:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable averaging for the spectral emission mask (SEM) measurement. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Specifies whether to enable averaging for the SEM measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetAveragingEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:08:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spectral emission mask (SEM) measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetAveragingType() function in C.</remarks>
<lastupdated>7/5/2014 4:56:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAveragingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for spectral emission mask (SEM) measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is    used for SEM measurement. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetAveragingType() function in C.</remarks>
<lastupdated>8/13/2014 8:08:29 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the center frequency, in hertz (Hz), of the carrier, relative to the RF center    frequency.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the center frequency, in Hz, of the carrier, relative to the RF center    frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierFrequency() function in C.</remarks>
<lastupdated>9/18/2014 12:35:11 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the center frequency, in hertz (Hz), of the carrier, relative to the RF center    frequency.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the center frequency, in Hz, of the carrier, relative to the RF center    frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierFrequency() function in C.</remarks>
<lastupdated>9/18/2014 12:38:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range, in hertz (Hz), over which the measurement integrates the carrier channel   power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the frequency range, in Hz, over which the measurement integrates the carrier channel   power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>6/29/2015 2:39:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierIntegrationBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range, in hertz (Hz), over which the measurement integrates the carrier    power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the frequency range, in Hz, over which the measurement integrates the carrier    power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierIntegrationBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:38:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetNumberOfCarriers(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of carriers.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetNumberOfCarriers() function in C.</remarks>
<lastupdated>7/5/2014 5:03:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetNumberOfCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of carriers.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetNumberOfCarriers() function in C.</remarks>
<lastupdated>8/13/2014 8:09:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the carrier power is considered as part of total carrier power measurement.  
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the carrier power is considered as part of total carrier power measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:35:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to consider the carrier power as part of total carrier power measurement.  
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies whether to consider the carrier power as part of total carrier power measurement.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:38:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetFftPadding(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value"> Upon return, contains the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetFFTPadding() function in C.</remarks>
<lastupdated>7/9/2014 1:42:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetFftPadding(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftPadding" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value"> Specifies the factor by which the time-domain waveform is zero-padded before FFT. The FFT size is    given by the following formula:   waveform size * padding.   This method is applicable only    when the acquisition span is less than the device instantaneous bandwidth of the device.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetFFTPadding() function in C.</remarks>
<lastupdated>8/13/2014 8:09:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.   </param>
<param name="value"> Upon return, contains the FFT window type used to reduce spectral leakage. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetFFTWindow() function in C.</remarks>
<lastupdated>8/13/2014 8:05:21 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window type used to reduce spectral leakage.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value"> Specifies the FFT window type used to reduce spectral leakage. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetFFTWindow() function in C.</remarks>
<lastupdated>8/13/2014 8:09:38 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRelativeAttenuation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the attenuation, in dB, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use this method  to    compensate for the variations in external attenuation when offset segments are spread wide in    frequency.    
</summary>
<param name="selectorString"> Specifies the offset number. Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the attenuation, in dB, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>1/9/2015 11:53:55 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the attenuation, in dB, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. Use this method to    compensate for the variations in external attenuation when offset segments are spread wide in    frequency.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the attenuation, in dB, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetExternalAttenuation(System.String,System.Double)" crefType="PartiallyQualified" /> method. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRelativeAttenuation() function in C.</remarks>
<lastupdated>1/9/2015 11:56:45 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetStartFrequency() function in C.</remarks>
<lastupdated>6/30/2015 7:55:44 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the start frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the start frequency, in Hz, of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetStartFrequency() function in C.</remarks>
<lastupdated>6/30/2015 7:57:29 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the stop frequency, in Hz, of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetStopFrequency() function in C.</remarks>
<lastupdated>6/30/2015 7:56:53 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the stop frequency, in hertz (Hz), of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifiesthe stop frequency, in Hz, of the offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetStopFrequency() function in C.</remarks>
<lastupdated>6/30/2015 7:58:10 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetNumberOfOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of offset segment configurations.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, contains the number of offset segment configurations.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetNumberOfOffsets() function in C.</remarks>
<lastupdated>7/5/2014 5:05:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of offset segment configurations.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the number of offset segment configurations.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetNumberOfOffsets() function in C.</remarks>
<lastupdated>8/13/2014 8:09:56 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetBandwidthIntegral(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the resolution of the spectrum to compare with spectral mask limits as an integer    multiple of the resolution bandwidth (RBW).    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the resolution of the spectrum to compare with spectral mask limits as an integer    multiple of the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetBandwidthIntegral() function in C.</remarks>
<lastupdated>9/18/2014 12:36:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetBandwidthIntegral(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the resolution of the spectrum to compare with spectral mask limits as an integer    multiple of the resolution bandwidth (RBW).    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the resolution of the spectrum to compare with spectral mask limits as an integer    multiple of the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetBandwidthIntegral() function in C.</remarks>
<lastupdated>9/18/2014 12:39:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">
      <summary>
Gets the criteria to determine the measurement fail status.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the criteria to determine the measurement fail status.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetLimitFailMask() function in C.</remarks>
<lastupdated>9/18/2014 12:36:30 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">
      <summary>
Sets the criteria to determine the measurement fail status.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the criteria to determine the measurement fail status.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetLimitFailMask() function in C.</remarks>
<lastupdated>9/18/2014 12:39:29 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the offset segment for the spectral emission mask (SEM)    measurement is enabled.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the offset segment for the SEM    measurement is enabled.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:36:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the offset segment for the spectral emission mask (SEM)    measurement.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether to enable the offset segment for the SEM    measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:39:22 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the offset segment is present on one side, or on both sides of the    carriers.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the offset segment is present on one side, or on both sides of the    carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetSideband() function in C.</remarks>
<lastupdated>9/18/2014 12:37:39 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the offset segment is present on one side, or on both sides of the    carriers.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether the offset segment is present on one side, or on both sides of the    carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetSideband() function in C.</remarks>
<lastupdated>9/18/2014 12:40:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired carrier signal.    
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired carrier signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:35:31 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired carrier signal.    
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired carrier signal.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:38:32 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired offset segment.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the bandwidth, in Hz, of the RBW filter used to sweep the    acquired offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:36:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth, in hertz (Hz), of the resolution bandwidth (RBW) filter used to sweep the    acquired offset segment.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the bandwidth, in Hz, of the RBW filter used to sweep the    acquired offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRBWFilterBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:39:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW) of the carrier.  
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the measurement computes the RBW of the carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:35:26 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW) of the carrier.  
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether the measurement computes the RBW of the carrier.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:38:23 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 12:35:38 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 12:38:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:59:10 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" /> method.    
</summary>
<param name="selectorString"> Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRbwFilterBandwidth(System.String,System.Double)" /> method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 8:59:39 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:36:50 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the resolution bandwidth (RBW).     
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether the measurement computes the RBW.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRBWFilterAutoBandwidth() function in C.</remarks>
<lastupdated>9/18/2014 12:39:37 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Gets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Specifies the offset number. Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 12:36:59 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">
      <summary>
Sets the shape of the digital resolution bandwidth (RBW) filter.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the shape of the digital RBW filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRBWFilterType() function in C.</remarks>
<lastupdated>9/18/2014 12:39:47 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString"> Specifies the offset number. Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the bandwidth definition which you use to specify the value of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>8/4/2015 4:00:08 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidthDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterBandwidthDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterBandwidthDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the bandwidth definition which you use to specify the value of the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" /> method.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies  the bandwidth definition which you use to specify the value of the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRBWFilterBandwidthDefinition() function in C.</remarks>
<lastupdated>9/11/2015 1:37:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRelativeLimitStart(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the relative power limit, in dB, corresponding to the beginning of the offset segment.   
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value"> Upon return, contains the relative power limit, in dB, corresponding to the beginning of the offset segment.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRelativeLimitStart() function in C.</remarks>
<lastupdated>9/18/2014 12:37:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitStart(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the relative power limit, in dB, corresponding to the beginning of the offset segment.    This power limit is also set as the relative power limit for the offset segment when you set the    <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value"> Specifies the relative power limit, in dB, corresponding to the beginning of the offset segment. This power limit is also set as the relative power limit for the offset segment when you set the    <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRelativeLimitStart() function in C.</remarks>
<lastupdated>1/9/2015 11:57:06 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRelativeLimitStop(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the relative power limit, in dB, corresponding to the end of the offset segment.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the relative power limit, in dB, corresponding to the end of the offset segment. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRelativeLimitStop() function in C.</remarks>
<lastupdated>1/9/2015 11:54:43 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitStop(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the relative power limit, in dB, corresponding to the end of the offset segment. This    method is ignored if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the relative power limit, in dB, corresponding to the end of the offset segment. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRelativeLimitStop() function in C.</remarks>
<lastupdated>1/9/2015 11:57:16 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the relative limit mask is a flat line or a line with a slope. 
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the relative limit mask is a flat line or a line with a slope.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetRelativeLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 12:37:12 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeLimitMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the relative limit mask is a flat line or a line with a slope. 
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies whether the relative limit mask is a flat line or a line with a slope.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetRelativeLimitMode() function in C.</remarks>
<lastupdated>9/18/2014 12:39:55 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRrcFilterAlpha(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:35:43 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRrcFilterAlpha(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterAlpha" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the roll-off factor for the root-raised-cosine (RRC) filter.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the roll-off factor for the RRC filter.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRRCFilterAlpha() function in C.</remarks>
<lastupdated>9/18/2014 12:38:41 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the root-raised-cosine (RRC) filter is applied on the acquired carrier channel    after measuring the carrier channel power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, indicates whether the RRC filter is applied on the acquired carrier channel    after measuring the carrier channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:35:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierRrcFilterEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel    after measuring the carrier channel power.    
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value"> Specifies whether to apply the RRC filter on the acquired carrier channel    after measuring the carrier channel power.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierRRCFilterEnabled() function in C.</remarks>
<lastupdated>9/18/2014 12:38:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Gets the power units.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the power units.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetPowerUnits() function in C.</remarks>
<lastupdated>7/5/2014 5:08:06 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetPowerUnits(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetPowerUnits" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemPowerUnits" nireturnvaluetype="System.Int32">
      <summary>
Sets the power units.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the power units.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetPowerUnits() function in C.</remarks>
<lastupdated>8/13/2014 8:11:20 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum number of threads used for parallelism for spectral emission mask (SEM)    measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the maximum number of threads used for parallelism for SEM    measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>7/5/2014 5:03:28 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum number of threads used for parallelism for spectral emission mask (SEM)    measurement.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the maximum number of threads used for parallelism for SEM    measurement.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetNumberOfAnalysisThreads() function in C.</remarks>
<lastupdated>8/13/2014 8:09:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetReferenceType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the power reference is the integrated power or the peak power in the closest    carrier channel. The least carrier offset is the carrier closest to all the lower (negative)    offset segments. The highest carrier offset is the carrier closest to all the upper (positive)    offsets segments.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value"> Upon return, indicates whether the power reference is the integrated power or the peak power in the closest    carrier channel. The least carrier offset is the carrier closest to all the lower (negative)    offset segments. The highest carrier offset is the carrier closest to all the upper (positive)    offsets segments. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetReferenceType() function in C.</remarks>
<lastupdated>8/13/2014 8:07:46 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetReferenceType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the power reference is the integrated power or the peak power in the closest    carrier channel. The least carrier offset is the carrier closest to all the lower (negative)    offset segments. The highest carrier offset is the carrier closest to all the upper (positive)    offsets segments.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value"> Specifies whether the power reference is the integrated power or the peak power in the closest    carrier channel.  </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetReferenceType() function in C.</remarks>
<lastupdated>8/13/2014 8:11:25 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable spectral emission mask (SEM) measurement.    
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
<see langword="True" /> if SEM measurement is enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:05:47 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable spectral emission mask (SEM) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable OBW measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetMeasurementEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:09:42 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets if the traces to be stored and retrieved after performing the spectral    emission mask (SEM) measurement are enabled.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> if  traces to be stored and retrieved after performing the SEM measurement are enabled; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetAllTracesEnabled() function in C.</remarks>
<lastupdated>9/2/2014 12:51:50 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the spectral    emission mask (SEM) measurement.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the traces to be stored and retrieved after performing the SEM measurement; otherwise <see langword="False" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetAllTracesEnabled() function in C.</remarks>
<lastupdated>8/13/2014 8:08:12 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the sweep time, in seconds.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Upon return, contains the sweep time, in seconds.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetSweepTimeInterval() function in C.</remarks>
<lastupdated>7/9/2014 1:50:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto)" crefType="PartiallyQualified" /> method to   <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />.    
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies the sweep time, in seconds, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto)" crefType="PartiallyQualified" /> method to   <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetSweepTimeInterval() function in C.</remarks>
<lastupdated>1/9/2015 11:57:38 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the sweep time.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">Upon return, indicates whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/13/2014 8:07:57 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemSweepTimeAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the sweep time.     
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">Specifies whether the measurement computes the sweep time.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetSweepTimeAuto() function in C.</remarks>
<lastupdated>8/13/2014 8:11:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetCarrierChannelBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierChannelBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the channel bandwidth, in hertz (Hz), of the carrier. The channel bandwidth is used to calculate the  values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" /> methods when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" />.
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, contains the channel bandwidth, in hertz (Hz), of the carrier. The channel bandwidth is used to calculate the  values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" /> methods when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetCarrierChannelBandwidth() function in C.</remarks>
<lastupdated>6/29/2015 2:46:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetCarrierChannelBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCarrierChannelBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the channel bandwidth, in hertz (Hz), of the carrier. The channel bandwidth is used to calculate the  values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" /> methods when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" />.
</summary>
<param name="selectorString">Specifies the carrier number.  Example: "carrier0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildCarrierString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the channel bandwidth, in hertz (Hz), of the carrier. The channel bandwidth is used to calculate the  values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" /> methods when you set the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthCenter" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition.CarrierEdgeToMeasurementBandwidthEdge" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetCarrierChannelBandwidth() function in C.</remarks>
<lastupdated>6/29/2015 2:46:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Upon return, gets the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMGetOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>7/3/2015 11:56:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels.
</summary>
<param name="selectorString"> Specifies the offset number.  Example: "offset0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildOffsetString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string. </param>
<param name="value">Specifies the definition of the start frequency and stop frequency of the offset segments from the nearest carrier channels. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMSetOffsetFrequencyDefinition() function in C.</remarks>
<lastupdated>9/11/2015 1:34:57 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetAbsoluteLimitArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode[],System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetAbsoluteLimitArray" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitMode,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode[],System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the absolute limit mode and specifies the absolute power limits corresponding to the beginning and end of the offset segment.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="absoluteLimitMode"> Specifies whether the absolute limit mask is a flat line or a line with a slope. </param>
<param name="absoluteLimitStart">Specifies the array of absolute power limits, in dBm, corresponding to the beginning of the offset segment. The value of this parameter is also set as the stop limit for the offset segment when you set the absoluteLimitMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<param name="absoluteLimitStop">Specifies the array of absolute power limits, in dBm, corresponding to the end of the offset segment. This parameter is ignored when you set the absoluteLimitMode parameter  to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetAbsoluteLimitMode.Couple" crefType="PartiallyQualified" />. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetAbsoluteLimitArray() function in C.</remarks>
<lastupdated>1/9/2015 11:52:04 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetFrequencyArray(System.String,System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequencyArray" nihasget="0" nihasset="0" niparameters="selectorString,offsetStartFrequency,offsetStopFrequency,offsetEnabled,offsetSideband" niparametertypes="System.String,System.Double[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetEnabled[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetSideband[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the offset frequency start and stop values, and specifies whether the offset segment is present on one side, or on both sides of the carriers. 
</summary>
<param name="selectorString">  Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="offsetStartFrequency">Specifies the array of start frequencies, in hertz (Hz), of each offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method.  </param>
<param name="offsetStopFrequency"> Specifies the array of stop frequencies, in Hz, of each offset segment relative to the closest configured carrier channel bandwidth center or carrier channel bandwidth edge based on the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetFrequencyDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetFrequencyDefinition)" /> method. </param>
<param name="offsetEnabled">Specifies whether to enable the offset segment for the SEM measurement.</param>
<param name="offsetSideband">Specifies whether the offset segment is present on one side, or on both sides of the carriers.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetFrequencyArray() function in C.</remarks>
<lastupdated>8/14/2015 9:05:40 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRbwFilterArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRbwFilterArray" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth[],System.Double[],NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwFilterType[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the resolution bandwidth (RBW) filter of the offset segment.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="rbwAuto">Specifies whether the measurement computes the RBW. Refer to the SEM topic for details on RBW and sweep time.</param>
<param name="rbw">Specifies the array of bandwidths, in hertz (Hz), of the RBW filter used to sweep the acquired offset segment, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRbwAutoBandwidth.False" crefType="PartiallyQualified" />.</param>
<param name="rbwFilterType">Specifies the shape of the digital RBW filter. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRBWFilterArray() function in C.</remarks>
<lastupdated>1/9/2015 11:52:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRelativeAttenuationArray(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeAttenuationArray" nihasget="0" nihasset="0" niparameters="selectorString,relativeAttenuation" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the attenuation, in dB, relative to the external attenuation. Use this method to compensate for the variations in external attenuation when offset channels are spread wide in frequency.
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="relativeAttenuation">Specifies an array of attenuation values, in dB, relative to the external attenuation.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRelativeAttenuationArray() function in C.</remarks>
<lastupdated>9/16/2014 3:22:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.ConfigureOffsetRelativeLimitArray(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode[],System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeLimitArray" nihasget="0" nihasset="0" niparameters="selectorString,relativeLimitMode,relativeLimitStart,relativeLimitStop" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode[],System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the relative limit mode and specifies the relative power limits corresponding to the beginning and end of the offset segment. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="relativeLimitMode"> Specifies whether the relative limit mask is a flat line or a line with a slope. </param>
<param name="relativeLimitStart">Specifies the array of relative power limits, in dB, corresponding to the beginning of the offset segment. The value of this parameter is also set as the stop limit for the offset segment when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<param name="relativeLimitStop">Specifies the array of relative power limits, in dB, corresponding to the end of the offset segment. This parameter is ignored if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetRelativeLimitMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetRelativeLimitMode.Couple" crefType="PartiallyQualified" />.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SEMCfgOffsetRelativeLimitArray() function in C.</remarks>
<lastupdated>1/9/2015 11:53:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.SemAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCarrierEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to consider the carrier power as part of the total carrier power measurement. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The carrier power is not considered as part of the total carrier power.
</summary>
<lastupdated>7/10/2014 10:48:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The carrier power is considered as part of the total carrier power.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcnt" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcnt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a frequency count (Fcnt) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/26/2014 11:43:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcnt.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration">
      <summary>
Gets the RFmxSpecAnMXFcntConfiguration instance that allows configuration of frequency count (Fcnt) measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXFcntConfiguration</value>
<lastupdated>8/26/2014 11:43:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcnt.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntResults">
      <summary>
Gets the RFmxSpecAnMXFcntResults instance that provides methods to retrieve frequency count (Fcnt) measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXFcntResults.</value>
<lastupdated>8/26/2014 11:43:54 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the AMPM measurement.
</summary>
<lastupdated>12/12/2014 3:00:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Performs the measurement on a single acquisition.
</summary>
<lastupdated>12/12/2014 3:01:27 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The AMPM measurement uses the value set by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which to average the signal.

</summary>
<lastupdated>1/2/2015 12:16:14 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the DPD measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:41 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.FetchAverageGain(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAverageGain" nihasget="0" nihasset="0" niparameters="selectorString,timeout,averageGain" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the average gain, in dB, of the device under test for the DPD measurement.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. </param>
<param name="averageGain">
Upon return, contains the average gain, in dB, of the device under test.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDFetchAverageGain() function in C.</remarks>
<lastupdated>1/7/2015 11:58:14 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.FetchDpdPolynomial(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchDpdPolynomial" nihasget="0" nihasset="0" niparameters="selectorString,timeout,dpdPolynomial" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the memory polynomial or generalized memory polynomial coefficients when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. </param>
<param name="dpdPolynomial">
Upon return, contains the memory polynomial or generalized memory polynomial coefficients when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDFetchDPDPolynomial() function in C.</remarks>
<lastupdated>12/22/2014 4:55:57 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.FetchLookupTable(System.String,System.Double,System.Single[]@,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchLookupTable" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inputPowers,complexGains" niparametertypes="System.String,System.Double,ref System.Single[],ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement. </param>
<param name="inputPowers">
Upon return, contains the lookup table power levels, in dBm.</param>
<param name="complexGains">
Returns the lookup table complex gain values, in dB, for magnitude and phase predistortion.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDFetchLookupTable() function in C.</remarks>
<lastupdated>12/22/2014 4:56:18 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.FetchProcessedMeanAcquiredWaveform(System.String,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchProcessedMeanAcquiredWaveform" nihasget="0" nihasset="0" niparameters="selectorString,timeout,processedMeanAcquiredWaveform" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the averaged acquired waveform, corrected for frequency, phase and direct current (DC) offsets, used to perform the DPD measurement.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="processedMeanAcquiredWaveform">
Upon return, contains the averaged acquired waveform, corrected for frequency, phase and DC offsets, used to perform the DPD measurement</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDFetchProcessedMeanAcquiredWaveform() function in C.</remarks>
<lastupdated>1/8/2015 2:33:49 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.FetchProcessedReferenceWaveform(System.String,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchProcessedReferenceWaveform" nihasget="0" nihasset="0" niparameters="selectorString,timeout,processedReferenceWaveform" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the segment of the reference waveform used to perform the DPD measurement.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="timeout">
Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="processedReferenceWaveform">
Upon return, contains the segment of the reference waveform used to perform the DPD measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDFetchProcessedReferenceWaveform() function in C.</remarks>
<lastupdated>1/7/2015 1:48:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdResults.GetAverageGain(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAverageGain" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Returns the average gain, in dB, of the device under test.
</summary>
<param name="selectorString">
Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="PartiallyQualified" /> method to build the selectorString.
</param>
<param name="value">
Upon return, contains the average gain, in dB, of the device under test. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetResultsAverageGain() function in C.
</remarks>
<lastupdated>1/7/2015 1:52:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXNFMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the measurement method used to perform the noise figure (NF) measurement.      
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.YFactor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="YFactor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement computes the noise figure of the DUT using a noise source with a calibrated excess-noise ratio (ENR).Supported Devices: NI 5668R</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXNFMeasurementMethod.ColdSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ColdSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The NF measurement computes the noise figure of the DUT using a 50 ohm microwave termination as the noise source.Supported Devices: NI 5644R/5645R/5646R</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxp" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents a transmit power (TXP) measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxp.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of transmit power (TXP) measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXTxpConfiguration</value>
<lastupdated>1/9/2015 1:32:45 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxp.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve transmit power (TXP) measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXTxpResults</value>
<lastupdated>1/9/2015 1:32:51 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the spurious emission (Spur) measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:32:46 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchMeasurementStatus(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Fetches the overall spurious emission (Spur) measurement status.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="measurementStatus">Upon return contains the overall measurement status.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 11:42:16 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchRangeAbsoluteLimitTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchRangeAbsoluteLimitTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absoluteLimit" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the absolute limit line used in the range. 
</summary>
<param name="selectorString">Specifies the result name and range number. Example: "range0", "result::r1/range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. 
A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="absoluteLimit">Upon return, contains the absolute limit trace, in dBm, used for the channel.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchRangeAbsoluteLimitTrace() function in C.</remarks>
<lastupdated>9/11/2015 11:09:13 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchRangeSpectrumTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchRangeSpectrumTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rangeSpectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the measured range spectrum trace. You can fetch traces only for the range index specified by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.GetTraceRangeIndex(System.String,System.Int32@)" /> method.
</summary>
<param name="selectorString">Specifies the result name and range number. Example: "range0", "result::r1/range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. 
A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="rangeSpectrum">Specifies the spectrum of the range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchRangeSpectrumTrace() function in C.</remarks>
<lastupdated>9/22/2014 3:52:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchRangeStatus(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchRangeStatus" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rangeStatus,detectedSpurs" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Fetches the range status for spurious emission (Spur) measurements.
</summary>
<param name="selectorString">Specifies the result name and range number. Example: "range0", "result::r1/range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="rangeStatus">Indicates the measurement status for the frequency range. </param>
<param name="detectedSpurs">Returns the number of detected Spurs in the specified frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchRangeStatus() function in C.</remarks>
<lastupdated>9/18/2014 4:12:17 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchSpurMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpurMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spurFrequency,spurAmplitude,spurMargin,spurAbsoluteLimit" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the information about spurious emissions (Spur) in the range.
</summary>
<param name="selectorString">Specifies the result name, range number and spur number. Example: "range0/spur0", "result::r1/range0/spur0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the VI waits until the measurement is complete. </param>
<param name="spurFrequency">Upon return, contains the frequency, in hertz (Hz), of the detected spur.</param>
<param name="spurAmplitude">Upon return, contains the power, in dBm, of the detected spur. </param>
<param name="spurMargin">Upon return, contains the difference between the spur amplitude and the absolute limit at the spur frequency.</param>
<param name="spurAbsoluteLimit">Upon return, contains the threshold, in dBm, used to calculate the margin of the detected spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchSpurMeasurement() function in C.</remarks>
<lastupdated>9/18/2014 4:12:24 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeMeasurementStatus(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus" nireturnvaluetype="System.Int32">
      <summary>
Gets the measurement status for the frequency range.
</summary>
<param name="selectorString">Specifies the range number.  Example: "range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="PartiallyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates the measurement status for the frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeMeasurementStatus() function in C.</remarks>
<lastupdated>1/9/2015 1:32:30 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetMeasurementStatus(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurMeasurementStatus" nireturnvaluetype="System.Int32">
      <summary>
Gets the overall measurement status.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the overall measurement status.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsMeasurementStatus() function in C.</remarks>
<lastupdated>9/18/2014 11:46:33 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSpurFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency, in hertz (Hz), of the detected spurious emission (Spur).
</summary>
<param name="selectorString">Specifies the result name, range number and spur number.  Example: "range0/spur0","result::r1/range0/spur0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="value">Upon return, contains the frequency, in Hz, of the detected Spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeFrequency() function in C.</remarks>
<lastupdated>9/18/2014 4:12:56 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurAmplitude(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSpurAmplitude" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dBm, of the detected spurious emission (Spur).
</summary>
<param name="selectorString">Specifies the result name, range number and spur number.  Example: "range0/spur0","result::r1/range0/spur0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="value">Upon return, contains the power, in dBm, of the detected Spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeAmplitude() function in C.</remarks>
<lastupdated>9/18/2014 4:12:51 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurAbsoluteLimit(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSpurAbsoluteLimit" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the threshold, in dBm, used to calculate the margin of the detected spurious emission (Spur).
</summary>
<param name="selectorString">Specifies the result name, range number and spur number. Example: "range0/spur0","result::r1/range0/spur0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="value">Upon return, contains the threshold, in dBm, used to calculate the margin of the detected Spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeAbsoluteLimit() function in C.</remarks>
<lastupdated>9/18/2014 4:12:45 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSpurMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the difference between the amplitude and the absolute limit of the detected spurious emission (Spur).
</summary>
<param name="selectorString">Specifies the result name, range number and spur number. Example: "range0/spur0","result::r1/range0/spur0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildSpurString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
</param>
<param name="value">Upon return, contains the difference between the amplitude and the absolute limit of the detected Spur.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeMargin() function in C.</remarks>
<lastupdated>9/18/2014 4:13:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.GetRangeSpurNumberOfDetectedSpurs(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeSpurNumberOfDetectedSpurs" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of detected spurious emissions (Spur) in the specified frequency range.
</summary>
<param name="selectorString">Specifies the result name and range number. Example: "range0", "result::r1/range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, indicates the number of detected Spurs in the specified frequency range.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurGetResultsRangeNumberOfDetectedSpurs() function in C.</remarks>
<lastupdated>9/18/2014 4:13:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchRangeStatusArray(System.String,System.Double,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus[]@,System.Int32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchRangeStatusArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rangeStatus,numberOfDetectedSpurs" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeStatus[],ref System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the range status for spurious emission (Spur) measurements.
</summary>
<param name="selectorString">Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="rangeStatus">Upon return, contains the array of measurement statuses for each frequency range.</param>
<param name="numberOfDetectedSpurs">Upon return, contains the array of number of detected Spurs in each frequency range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchRangeStatusArray() function in C.</remarks>
<lastupdated>9/18/2014 11:44:51 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchSpurMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpurMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spurFrequency,spurAmplitude,spurAbsoluteLimit,spurMargin" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the information about spurious emissions (Spur) in the range.
</summary>
<param name="selectorString">Specifies the result name and range number. Example: "range0", "result::r1/range0". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="spurFrequency">Upon return, contains the array of frequencies, in hertz (Hz), of the detected spurs.</param>
<param name="spurAmplitude">Upon return, contains the array of powers, in dBm, of the detected spurs.</param>
<param name="spurAbsoluteLimit">Upon return, contains the array of thresholds, in dBm, used to calculate the margin of the detected spurs.</param>
<param name="spurMargin">Upon return, contains the array of differences between the spur amplitude and the absolute limit at the spur frequency.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchSpurMeasurementArray() function in C.</remarks>
<lastupdated>9/18/2014 4:12:29 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurResults.FetchAllSpurs(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Int32[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchAllSpurs" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spurFrequency,spurAmplitude,spurMargin,spurAbsoluteLimit,spurRangeTraceIndex" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches all the spurs across all ranges.
</summary>
<param name="selectorString">Specifies the signal name and result name. Example: "signal::sig1", "result::r1" "signal::sig1/result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString2(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete. </param>
<param name="spurFrequency">Upon return, contains the array of frequencies, in hertz (Hz), of all detected spurs across all ranges.</param>
<param name="spurAmplitude">Upon return, contains the array of powers, in dBm, of all detected spurs across all ranges.</param>
<param name="spurAbsoluteLimit">Upon return, contains the array of thresholds, in dBm, used to calculate the margin of the detected spurs.</param>
<param name="spurMargin">Upon return, contains the array of differences between the spur amplitude and the absolute limit at the spur frequency.</param>
<param name="spurRangeTraceIndex">Upon return, contains the array containing range indices corresponding to the detected spurs. 
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_SpurFetchAllSpurs() function in C.</remarks>
<lastupdated>9/15/2015 10:15:14 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdfResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the CCDF measurement results.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:08 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.FetchBasicPowerProbabilities(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchBasicPowerProbabilities" nihasget="0" nihasset="0" niparameters="selectorString,timeout,tenPercentPower,onePercentPower,oneTenthPercentPower,oneHundredthPercentPower,oneThousandthPercentPower,oneTenThousandthPercentPower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches complementary cumulative distribution function (CCDF) power probabilities.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="tenPercentPower">Upon return, contains the power, in dB, above the mean power, over which 10% of the total samples in the signal are present.</param>
<param name="onePercentPower"> Upon return, contains the power, in dB, above the mean power, over which 1% of the total samples in the signal are present.</param>
<param name="oneTenthPercentPower">Upon return, contains the power, in dB, above the mean power, over which 0.1% of the total samples in the signal are present.</param>
<param name="oneHundredthPercentPower">Upon return, contains the power, in dB, above the mean power, over which 0.01% of the total samples in the signal are present.</param>
<param name="oneThousandthPercentPower">Upon return, contains the power, in dB, above the mean power, over which 0.001% of the total samples in the signal are present.</param>
<param name="oneTenThousandthPercentPower">Upon return, contains the power, in dB, above the mean power, over which 0.0001% of the total samples in the signal are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFFetchBasicPowerProbabilities() function in C.</remarks>
<lastupdated>9/18/2014 12:21:38 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.FetchGaussianProbabilitiesTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchGaussianProbabilitiesTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,gaussianProbabilities" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the Gaussian probabilities trace for the complementary cumulative distribution function (CCDF) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="gaussianProbabilities">Upon return, contains the Gaussian probabilities trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFFetchGaussianProbabilitiesTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:21:49 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.FetchPower(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,meanPower,meanPowerPercentile,peakPower,measuredSamplesCount" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Fetches the mean power and peak power for the CCDF measurement. 
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="meanPower">Upon return, contains the average power, in dBm, of all the samples. If you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" />, samples above the threshold are measured. </param>
<param name="meanPowerPercentile">Upon return, contains the percentage of samples that have more power than the mean power.</param>
<param name="peakPower">Upon return, contains the peak power of the acquired signal, relative to the mean power.</param>
<param name="measuredSamplesCount">Upon return, contains the total number of samples measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFFetchPower() function in C.</remarks>
<lastupdated>9/18/2014 12:21:58 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.FetchProbabilitiesTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchProbabilitiesTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,probabilities" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Fetches the probabilities trace for the complementary cumulative distribution function (CCDF) measurement.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.  </param>
<param name="probabilities">Upon return, contains the probabilities trace including the start, delta, and actual values.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFFetchProbabilitiesTrace() function in C.</remarks>
<lastupdated>9/18/2014 12:22:05 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.Read(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Read" nihasget="0" nihasset="0" niparameters="selectorString,timeout,meanPower,meanPowerPercentile,peakPower,measuredSamplesCount" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures hardware for acquisition, performs measurement on acquired data, and returns complementary cumulative distribution function (CCDF) measurement results. 
</summary>
<param name="selectorString"> Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="timeout"> Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time longer than expected for fetching the measurement.  </param>
<param name="meanPower">Upon return, contains the average power, in dBm, of all the samples. If you set the  <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled" crefType="PartiallyQualified" /> to  <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" crefType="PartiallyQualified" />, samples above the threshold are measured.</param>
<param name="meanPowerPercentile">Upon return, contains the percentage of samples that have more power than the mean power.</param>
<param name="peakPower">Upon return, contains the peak power of the acquired signal, relative to the mean power.</param>
<param name="measuredSamplesCount">Upon return, contains the total number of samples measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFRead() function in C.</remarks>
<lastupdated>1/9/2015 11:41:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average power, in dBm, of all the samples. 
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the average power, in dBm, of all the samples.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsMeanPower() function in C.</remarks>
<lastupdated>9/18/2014 12:22:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPowerPercentile(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeanPowerPercentile" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the percentage of samples that have more power than the value returned by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the percentage of samples that have more power than the value returned by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsMeanPowerPercentile() function in C.</remarks>
<lastupdated>1/9/2015 11:40:07 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetTenPercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetTenPercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 10% of the total samples in the signal    are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 10% of the total samples in the signal    are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsTenPercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:23:27 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetOnePercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOnePercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 1% of the total samples in the signal    are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 1% of the total samples in the signal    are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsOnePercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:22:47 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetOneTenthPercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOneTenthPercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 0.1% of the total samples in the signal    are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 0.1% of the total samples in the signal    are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsOneTenthPercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:23:04 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetOneHundredthPercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOneHundredthPercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 0.01% of the total samples in the signal    are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 0.01% of the total samples in the signal    are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsOneHundredthPercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:22:40 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetOneThousandthPercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOneThousandthPercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 0.001% of the total samples in the    signal are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 0.001% of the total samples in the    signal are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsOneThousandthPercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:23:13 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetOneTenThousandthPercentPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetOneTenThousandthPercentPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the power, in dB, above the mean power, over which 0.0001% of the total samples in the    signal are present.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the power, in dB, above the mean power, over which 0.0001% of the total samples in the    signal are present.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsOneTenThousandthPercentPower() function in C.</remarks>
<lastupdated>9/18/2014 12:22:57 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetPeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak power of the acquired signal, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the peak power of the acquired signal, relative to the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeanPower(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsPeakPower() function in C.</remarks>
<lastupdated>1/9/2015 11:40:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults.GetMeasuredSamplesCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasuredSamplesCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the total number of samples measured. The total number of samples includes only the samples    above the threshold, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString"> Specifies the result name. Example: "", "result::r1". You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the total number of samples measured. The total number of samples includes only the samples    above the threshold, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration.SetThresholdEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfThresholdEnabled.True" crefType="PartiallyQualified" />.
</param>
<returns>Returns the status code of this method. The status code either indicates success or describes an error or warning condition.</returns>
<remarks>This method maps to the RFmxSpecAn_CCDFGetResultsMeasuredSampleCount() function in C.</remarks>
<lastupdated>1/9/2015 11:40:25 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage. Refer to the Window and FFT section of the Spectrum topic for more information about FFT window types.
</summary>
<lastupdated>8/12/2014 8:22:41 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes.
</summary>
<lastupdated>7/10/2014 2:43:20 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
<lastupdated>7/10/2014 2:43:10 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
<lastupdated>7/10/2014 2:43:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
<lastupdated>7/10/2014 2:43:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate.
</summary>
<lastupdated>7/10/2014 2:43:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe. 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Separates two tones with frequencies close to each other but with widely-differing amplitudes. 
</summary>
<lastupdated>7/10/2014 2:43:03 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes the resolution bandwidth (RBW). 
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:42:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement computes the RBW.
</summary>
<lastupdated>7/10/2014 11:57:15 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window type to use to reduce spectral leakage.
</summary>
<lastupdated>7/10/2014 11:47:26 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Measures single-tone amplitudes accurately.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.
</summary>
<lastupdated>7/10/2014 11:54:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes closely-spaced sine waves.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.
</summary>
<lastupdated>7/10/2014 11:54:42 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate.
</summary>
<lastupdated>7/10/2014 11:47:30 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe.
</summary>
<lastupdated>7/10/2014 11:54:35 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Separates two tones with frequencies close to each other but with widely-differing amplitudes.
</summary>
<lastupdated>7/10/2014 11:54:52 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates the lower offset segment measurement status based on measurement limits and the fail criteria that you specify in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:41:44 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the measurement has failed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemLowerOffsetMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates that the measurement has passed.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXFcntThresholdEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable thresholding of the acquired samples to be used for the frequency count (Fcnt) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
All samples are considered for the Fcnt measurement. 
</summary>
<lastupdated>9/10/2014 11:40:13 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntThresholdEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The samples above the threshold level specified in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXFcntConfiguration.SetThresholdLevel(System.String,System.Double)" crefType="PartiallyQualified" /> method are considered for the Fcnt measurement. 
</summary>
<lastupdated>1/9/2015 1:37:48 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the channel power (CHP) measurement.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement is performed on a single acquisition.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The ACP measurement uses the value which you specify in the  <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the CHP measurement is averaged. 
</summary>
<lastupdated>1/9/2015 1:36:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to apply DPD measurements.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/4/2015 9:04:24 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureConfigurationInput" nihasget="0" nihasset="0" niparameters="selectorString,configurationInput" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" nireturnvaluetype="System.Int32">
      <summary>
Configures the source of measurement settings for applying DPD.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="configurationInput">
Specifies the mode of configuring parameters for applying the DPD.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDCfgApplyDPDConfigurationInput() function in C.
</remarks>
<lastupdated>1/7/2015 4:53:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureHeadroom(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureHeadroom" nihasget="0" nihasset="0" niparameters="selectorString,headroomMode,headroom" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the headroom, in dB, for the predistorted waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="headroomMode">
Specifies the mode of applying headroom on the predistorted waveform.</param>
<param name="headroom">
Specifies the headroom, in dB, to apply to the predistorted waveform when you set the headroomMode
parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Manual" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgApplyDPDHeadroom() function in C.</remarks>
<lastupdated>1/9/2015 1:48:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureLookupTableCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureLookupTableCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,lutCorrectionType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Configures the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="lutCorrectionType">
Specifies the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgApplyDPDLookupTableCorrectionType() function in C.</remarks>
<lastupdated>1/6/2015 3:19:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureUserLookupTable(System.String,System.Single[],NationalInstruments.ComplexSingle[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureUserLookupTable" nihasget="0" nihasset="0" niparameters="selectorString,lutInputPowers,lutComplexGains" niparametertypes="System.String,System.Single[],NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="lutInputPowers">
Specifies the array of lookup table power levels, in dBm.
</param>
<param name="lutComplexGains">
Specifies the array of lookup table complex gain values for magnitude and phase predistortion.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgApplyDPDUserLookupTable() function in C.</remarks>
<lastupdated>1/6/2015 3:20:06 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureUserDpdPolynomial(System.String,NationalInstruments.ComplexSingle[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureUserDpdPolynomial" nihasget="0" nihasset="0" niparameters="selectorString,dpdPolynomial" niparametertypes="System.String,NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the array of memory polynomial or generalized memory polynomial coefficients when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="dpdPolynomial">
Specifies the array of memory polynomial or generalized memory polynomial coefficients.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgApplyDPDUserDPDPolynomial() function in C.</remarks>
<lastupdated>1/6/2015 3:20:29 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ConfigureMemoryModelCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMemoryModelCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,memoryModelCorrectionType" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Configures the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="memoryModelCorrectionType">
Specifies the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDCfgApplyDPDMemoryModelCorrectionType() function in C.</remarks>
<lastupdated>8/5/2015 1:31:58 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ApplyDpd(System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdIdleDurationPresent,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ApplyDpd" nihasget="0" nihasset="0" niparameters="selectorString,waveformIn,idleDurationPresent,measurementTimeout,waveformOut,appliedHeadroom" niparametertypes="System.String,NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Scales the input waveform to DUT Average Input Power and then predistorts the waveform using the DPD polynomial or the lookup table. 
</summary>
<remarks>
<para>
To scale the waveform correctly, specify whether the idle duration is present in the waveform.
</para>
<para>
This method maps to the RFmxSpecAn_DPDApplyDPD() function in C.
</para>
</remarks>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="waveformIn">
Specifies the complex baseband equivalent of the RF signal on which to apply digital predistortion.</param>
<param name="idleDurationPresent">
Specifies whether the waveform contains an idle duration.</param>
<param name="measurementTimeout">
Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="appliedHeadroom">
Specifies the  headroom, in dB, applied to the predistorted waveform when you set the headroomMode parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Manual" crefType="PartiallyQualified" />.
</param>
<param name="waveformOut">
Upon return, contains the complex baseband equivalent of the RF signal on which to apply digital predistortion.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<lastupdated>1/12/2015 2:35:59 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetHeadroom(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHeadroom" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the headroom, in dB, to apply to the predistorted waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the headroom, in dB, to apply to the predistorted waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDHeadroom() function in C.
</remarks>
<lastupdated>12/18/2014 11:20:23 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHeadroom" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the headroom, in dB, to apply to the predistorted waveform when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroomMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Manual" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the headroom, in dB, applied to the predistorted waveform when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroomMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode.Manual" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDHeadroom() function in C.
</remarks>
<lastupdated>1/7/2015 3:09:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetConfigurationInput" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to use the configuration used by the DPD measurement for applying DPD.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether to use the configuration used by the DPD measurement, for applying DPD.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDConfigurationInput() function in C.
</remarks>
<lastupdated>1/7/2015 3:19:26 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetConfigurationInput" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to use the configuration used by the DPD measurement for applying DPD.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether to use the configuration used by the DPD measurement for applying DPD.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDConfigurationInput() function in C.
</remarks>
<lastupdated>1/7/2015 3:08:25 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetLookupTableCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetLookupTableCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets the predistortion type.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates the predistortion type.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDLookupTableCorrectionType() function in C.
</remarks>
<lastupdated>9/11/2015 11:14:19 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetLookupTableCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetLookupTableCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdLookupTableCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDLookupTableCorrectionType() function in C.
</remarks>
<lastupdated>12/19/2014 11:23:05 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetHeadroomMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetHeadroomMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to compute and apply the headroom of the predistorted waveform or to apply the value that you specify using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" crefType="PartiallyQualified" /> method on the predistorted waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates whether to compute and apply the headroom of the predistorted waveform or to apply the value that you specify using <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" crefType="PartiallyQualified" /> on the predistorted waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDHeadroomMode() function in C.
</remarks>
<lastupdated>1/8/2015 2:51:03 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroomMode(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetHeadroomMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdHeadroomMode" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to compute and apply the headroom of the predistorted waveform, or to apply the value that you specify using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" crefType="PartiallyQualified" /> method, on the predistorted waveform.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates whether to compute and apply the headroom of the predistorted waveform, or to apply the value that you specify using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetHeadroom(System.String,System.Double)" crefType="PartiallyQualified" /> method, on the predistorted waveform.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDHeadroomMode() function in C.
</remarks>
<lastupdated>12/19/2014 11:21:03 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialLeadOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead order cross term of the DPD polynomial..
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lead order cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialLeadOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:03:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialLeadOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialLeadOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the lead order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialLeadOrder() function in C.
</remarks>
<lastupdated>1/8/2015 3:00:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialLagOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lag order cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lag order cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialLagOrder() function in C.
</remarks>
<lastupdated>12/18/2014 1:52:56 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialLagOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialLagOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lag order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the lag order cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialLagOrder() function in C.
</remarks>
<lastupdated>12/19/2014 11:38:50 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialLeadMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead memory depth cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lead memory depth cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialLeadMemoryDepth() function in C.
</remarks>
<lastupdated>12/18/2014 2:02:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialLeadMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialLeadMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialLeadMemoryDepth() function in C.
</remarks>
<lastupdated>12/19/2014 11:40:57 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialLagMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the lead memory depth cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the lead memory depth cross term of the DPD polynomial.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialLagMemoryDepth() function in C.
</remarks>
<lastupdated>12/18/2014 1:52:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialLagMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialLagMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the lead memory depth cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialLagMemoryDepth() function in C.
</remarks>
<lastupdated>12/19/2014 11:33:14 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialMaximumLead(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum lead stagger cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the maximum lead stagger cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialMaximumLead() function in C.
</remarks>
<lastupdated>12/18/2014 2:18:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialMaximumLead(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialMaximumLead" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum lead stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the maximum lead stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialMaximumLead() function in C.
</remarks>
<lastupdated>1/8/2015 3:02:04 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialMaximumLag(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the maximum lag stagger cross term of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the maximum lag stagger cross term of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialMaximumLag() function in C.
</remarks>
<lastupdated>12/18/2014 2:03:46 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialMaximumLag(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialMaximumLag" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the maximum lag stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the maximum lag stagger cross term of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialMaximumLag() function in C.
</remarks>
<lastupdated>1/8/2015 3:01:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserLookupTableInputPower(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserLookupTableInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the input power array, in dBm, for the predistortion lookup table.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the input power array, in dBm, for the predistortion lookup table.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserLookupTableInputPower() function in C.
</remarks>
<lastupdated>12/18/2014 11:47:02 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserLookupTableInputPower(System.String,System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserLookupTableInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Sets the input power array, in dBm, for the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the input power array, in dBm, for the predistortion lookup table when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.LookupTable" crefType="PartiallyQualified" />.
</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserLookupTableInputPower() function in C.
</remarks>
<lastupdated>12/19/2014 11:31:46 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialOrder(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the order of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the order of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialOrder() function in C.
</remarks>
<lastupdated>12/18/2014 2:21:20 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialOrder(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialOrder" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the order of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialOrder() function in C.
</remarks>
<lastupdated>12/19/2014 1:22:37 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMemoryPolynomialMemoryDepth(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the memory depth of the DPD polynomial.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the memory depth of the DPD polynomial.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMemoryPolynomialMemoryDepth() function in C.
</remarks>
<lastupdated>12/18/2014 2:19:30 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMemoryPolynomialMemoryDepth(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMemoryPolynomialMemoryDepth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the memory depth of the DPD polynomial when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" crefType="PartiallyQualified" /> method to 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or 
<see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" /> and set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMemoryPolynomialMemoryDepth() function in C.
</remarks>
<lastupdated>1/8/2015 3:02:13 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserDutAverageInputPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the average input power for the device under test, in dBm, used to compute the DPD User DPD Polynomial or the DPD User LUT Complex Gain.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the average input power for the device under test, in dBm, used to compute the DPD User DPD Polynomial or the DPD User LUT Complex Gain.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/18/2014 11:42:34 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDutAverageInputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserDutAverageInputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the average input power for the device under test, in dBm, used to compute the DPD User DPD Polynomial or the DPD User LUT Complex Gain when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the average input power for the device under test, in dBm, used to compute the DPD User DPD Polynomial or the DPD User LUT Complex Gain when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserDUTAverageInputPower() function in C.
</remarks>
<lastupdated>12/19/2014 11:29:34 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserMeasurementSampleRate(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate, in hertz (Hz), used to compute the DPD User DPD Polynomial or DPD User LUT Complex Gain.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition sample rate, in hertz (Hz), that was used to compute the DPD User DPD Polynomial or DPD User LUT Complex Gain.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserMeasurementSampleRate() function in C.
</remarks>
<lastupdated>12/18/2014 1:46:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserMeasurementSampleRate(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserMeasurementSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate, in hertz (Hz), used to compute the DPD User DPD Polynomial or the DPD User LUT Complex Gain when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains the acquisition sample rate, in hertz (Hz), used to compute the DPD User DPD Polynomial or DPD User LUT Complex Gain when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserMeasurementSampleRate() function in C.
</remarks>
<lastupdated>12/19/2014 3:53:34 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetUserDpdModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel" nireturnvaluetype="System.Int32">
      <summary>
Gets the DPD model used to apply DPD.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the DPD model used to apply DPD.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDGetApplyDPDUserDPDModel() function in C.
</remarks>
<lastupdated>12/18/2014 11:42:47 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetUserDpdModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetUserDpdModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdUserDpdModel" nireturnvaluetype="System.Int32">
      <summary>
Sets the DPD model used to apply DPD when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates the DPD model used to apply DPD when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetConfigurationInput(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>
This method maps to the RFmxSpecAn_DPDSetApplyDPDUserDPDModel() function in C.
</remarks>
<lastupdated>12/19/2014 11:26:30 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.GetMemoryModelCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMemoryModelCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Gets the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains a value that indicates the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDGetApplyDpdMemoryModelCorrectionType() function in C.</remarks>
<lastupdated>9/11/2015 11:16:54 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.SetMemoryModelCorrectionType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMemoryModelCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdMemoryModelCorrectionType" nireturnvaluetype="System.Int32">
      <summary>
Sets the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Contains a value that indicates the predistortion type when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdConfiguration.SetModel(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel)" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.MemoryPolynomial" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdModel.GeneralizedMemoryPolynomial" crefType="PartiallyQualified" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_DPDSetApplyDpdMemoryModelCorrectionType() function in C.</remarks>
<lastupdated>9/11/2015 11:17:11 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpd.ApplyDigitalPredistortion(System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdIdleDurationPresent,System.Double,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle}@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ApplyDigitalPredistortion" nihasget="0" nihasset="0" niparameters="selectorString,waveformIn,idleDurationPresent,measurementTimeout,waveformOut,papr,powerOffset" niparametertypes="System.String,NationalInstruments.ComplexWaveform`1" nireturnvaluetype="System.Int32">
      <summary>
Scales the input waveform to DUT average input power and then predistorts using the DPD polynomial or the lookup table. To scale the waveform correctly, specify if the idle duration is present in the waveform.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="waveformIn">Specifies the complex baseband equivalent of the RF signal on which to apply digital predistortion.
			<br /></param>
<param name="idleDurationPresent">Specifies whether the waveform contains an idle duration.</param>
<param name="measurementTimeout">Specifies the timeout, in seconds, for fetching the specified measurement.</param>
<param name="waveformOut">Upon return, contains  the complex baseband equivalent of the RF signal on which to apply digital predistortion.
			<br /></param>
<param name="papr">Upon return, contains  the peak-to-average power ratio of the waveform obtained after applying digital predistortion. This value is expressed in dB. <br /></param>
<param name="powerOffset">Upon return, contains  the change in the average power in the waveform due to applying digital predistion. This value is expressed in dB.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired channel after    measuring the channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The channel power of the acquired channel is measured directly.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpCarrierRrcFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement applies the RRC filter on the acquired channel before measuring the channel power.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMLocalPeakSearchEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable a local peak search around the tone or intermod frequencies to account for small frequency offsets.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement returns the power at the tone and intermod frequencies. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMLocalPeakSearchEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement performs a local peak search around the tone and intermod frequencies to return the peak power.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the IM measurement.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement is performed on a single acquisition. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The IM measurement uses the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the IM measurement is averaged.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAmpmMeasurementSampleRateMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the acquisition sample rate is based on the reference waveform.
</summary>
<lastupdated>12/12/2014 3:34:40 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.User" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="User" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The acquisition sample rate is defined by the value returned by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmConfiguration.GetMeasurementSampleRate(System.String,System.Double@)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/7/2015 3:30:17 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAmpmMeasurementSampleRateMode.ReferenceWaveform" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ReferenceWaveform" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The acquisition sample rate is set to match the sample rate of the reference waveform.
</summary>
<lastupdated>12/12/2014 3:36:31 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the trigger type.
</summary>
<lastupdated>7/10/2014 3:23:19 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that no reference trigger is configured.
</summary>
<lastupdated>7/10/2014 3:25:36 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies that the reference trigger is not asserted until a digital edge is detected. The source of the digital edge is specified using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetDigitalEdgeTriggerSource(System.String,System.String)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:44:50 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.IQPowerEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference trigger is asserted when the signal changes past the level specified by the slope (rising or falling), which is configured using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQPowerEdgeTriggerSlope)" crefType="PartiallyQualified" /> method.
</summary>
<lastupdated>1/9/2015 1:44:55 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTriggerType.Software" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Software" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The Reference Trigger is not asserted until a software trigger occurs.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChp" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents the CHP measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:14 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChp.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpConfiguration">
      <summary>
Gets the RFmxSpecAnMXChpConfiguration instance that allows configuration of channel power (CHP) measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXChpConfiguration.</value>
<lastupdated>7/5/2014 2:11:34 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChp.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpResults" /> instance that provides methods to retrieve channel power (CHP) measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXChpResults.</value>
<lastupdated>7/5/2014 2:12:07 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdf" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXCcdf" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents the CCDF measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>8/22/2014 2:31:02 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdf.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfConfiguration" crefType="PartiallyQualified" /> instance that allows configuration of CCDF measurement.
</summary>
<value>Returns an object of type RFmxSpecAnMXCcdfConfiguration.</value>
<lastupdated>1/9/2015 11:39:16 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdf.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXCcdfResults" crefType="PartiallyQualified" /> instance that provides methods to retrieve CCDF measurement results.
</summary>
<value>Returns an object of type RFmxSpecAnMXCcdfResults.</value>
<lastupdated>1/9/2015 11:39:24 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemReferenceType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the power reference is the integrated power or the peak power in the closest carrier channel. The leftmost carrier is the carrier closest to all the lower (negative) offset segments. The rightmost carrier is the carrier closest to all the upper (positive) offset segments.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType.Integration" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Integration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power reference is the integrated power of the closest carrier.
</summary>
<lastupdated>7/10/2014 10:59:38 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemReferenceType.Peak" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Peak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The power reference is the peak power of the closest carrier.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCompositeMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Indicates the overall measurement status based on the measurement limits and the fail criteria that you set in the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemOffsetLimitFailMask)" crefType="PartiallyQualified" /> method for each offset segment.
</summary>
<lastupdated>1/9/2015 1:41:33 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement has failed.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCompositeMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement has passed.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemCarrierRrcFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to apply the root-raised-cosine (RRC) filter on the acquired carrier channel before measuring the carrier channel power.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The channel power of the acquired carrier channel is measured directly.
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemCarrierRrcFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The measurement applies the RRC filter on the acquired carrier channel before measuring the carrier channel power.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXAcpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable averaging for the adjacent channel power (ACP) measurement.
</summary>
<lastupdated>9/18/2014 4:13:50 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The ACP measurement is performed on a single acquisition.
</summary>
<lastupdated>8/12/2014 8:14:23 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The ACP measurement uses the value set by the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXAcpConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="PartiallyQualified" /> method as the number of acquisitions over which the ACP measurement is averaged.
</summary>
<lastupdated>1/9/2015 1:35:39 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIQConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the I/Q measurement.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx SpecAn, refer to the NI-RFmx SpecAn Help.</remarks>
<lastupdated>7/3/2015 3:07:22 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the I/Q measurement is enabled. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
<see langword="True" /> if the I/Q measurement is enabled; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetMeasurementEnabled() function in C.</remarks>
<lastupdated>7/6/2015 10:06:52 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the I/Q measurement.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.  </param>
<param name="value">
<see langword="True" /> to enable the I/Q measurement; otherwise <see langword="False" />.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetMeasurementEnabled() function in C.</remarks>
<lastupdated>6/24/2015 11:20:35 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetSampleRate(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition sample rate, in samples per second (S/s).
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition sample rate, in S/s.</param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetSampleRate() function in C.</remarks>
<lastupdated>9/11/2015 11:27:56 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetSampleRate(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSampleRate" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition sample rate, in samples per second (S/s).
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the acquisition sample rate, in S/s. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetSampleRate() function in C.</remarks>
<lastupdated>9/11/2015 11:28:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetNumberOfRecords(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfRecords" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the  the number of records to acquire. </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
<param name="value">
Upon return, contains the number of records to acquire.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetNumberOfRecords() function in C.</remarks>
<lastupdated>6/24/2015 11:14:09 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetNumberOfRecords(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfRecords" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of records to acquire.  
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the number of records to acquire. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetNumberOfRecords() function in C.</remarks>
<lastupdated>7/3/2015 3:48:16 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetAcquisitionTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAcquisitionTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the acquisition time, in seconds, for the I/Q measurement. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the acquisition time, in seconds, for the I/Q measurement.   </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetAcquisitionTime() function in C.</remarks>
<lastupdated>7/3/2015 3:46:53 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetAcquisitionTime(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAcquisitionTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the acquisition time, in seconds, for the I/Q measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the acquisition time, in seconds, for the I/Q measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetAcquisitionTime() function in C.</remarks>
<lastupdated>7/3/2015 3:47:41 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetPretriggerTime(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetPretriggerTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the pretrigger time, in seconds, for the I/Q measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the pretrigger time, in seconds, for the I/Q measurement.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetPretriggerTime() function in C.</remarks>
<lastupdated>7/3/2015 3:47:28 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetPretriggerTime(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetPretriggerTime" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the pretrigger time, in seconds, for the I/Q measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the pretrigger time, in seconds, for the I/Q measurement. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetPretriggerTime() function in C.</remarks>
<lastupdated>7/3/2015 3:48:23 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement computes the minimum acquisition bandwidth.  </summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains whether the measurement computes the minimum acquisition bandwidth.   </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetBandwidthAuto() function in C.</remarks>
<lastupdated>7/3/2015 3:47:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto" nireturnvaluetype="System.Int32">
      <summary>
Sets whether the measurement computes the minimum acquisition bandwidth. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies whether the measurement computes the minimum acquisition bandwidth. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetBandwidthAuto() function in C.</remarks>
<lastupdated>7/3/2015 3:48:00 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the minimum acquisition bandwidth, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains the the minimum acquisition bandwidth, in Hz, when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetBandwidth() function in C.</remarks>
<lastupdated>7/3/2015 3:51:21 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the minimum acquisition bandwidth, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies the minimum acquisition bandwidth, in hertz (Hz), when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetBandwidthAuto(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetBandwidth() function in C.</remarks>
<lastupdated>9/11/2015 11:26:59 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.GetDeleteRecordOnFetch(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetDeleteRecordOnFetch" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch" nireturnvaluetype="System.Int32">
      <summary>
Gets whether the measurement deletes the fetched record.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Upon return, contains  whether the measurement deletes the fetched record.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQGetDeleteRecordOnFetch() function in C.</remarks>
<lastupdated>7/3/2015 3:47:16 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.SetDeleteRecordOnFetch(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetDeleteRecordOnFetch" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQDeleteRecordOnFetch" nireturnvaluetype="System.Int32">
      <summary>
Sets  whether the measurement deletes the fetched record.   
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">
Specifies  whether the measurement deletes the fetched record. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQSetDeleteRecordOnFetch() function in C.</remarks>
<lastupdated>7/3/2015 3:48:07 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.ConfigureAcquisition(System.String,System.Double,System.Int32,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAcquisition" nihasget="0" nihasset="0" niparameters="selectorString,sampleRate,numberOfRecords,acquisitionTime,pretriggerTime" niparametertypes="System.String,System.Double,System.Int32,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>Configures the acquisition settings for the I/Q measurement.
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="sampleRate">Specifies the acquisition sample rate, in samples per second (S/s). 
</param>
<param name="numberOfRecords">
Specifies the number of records to acquire.</param>
<param name="acquisitionTime">
Specifies the acquisition time, in seconds, for the I/Q measurement.  </param>
<param name="pretriggerTime">
Specifies the pretrigger time, in seconds, for the I/Q measurement.  </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQCfgAcquisition() function in C.</remarks>
<lastupdated>6/24/2015 10:30:36 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQConfiguration.ConfigureBandwidth(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthAuto,bandwidth" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the bandwidth, in hertz (Hz), for the I/Q measurement. 
</summary>
<param name="selectorString">
Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="bandwidthAuto">
Specifies whether the measurement computes the minimum acquisition bandwidth.  </param>
<param name="bandwidth">
Specifies the minimum acquisition bandwidth, in hertz (Hz), when you set the <format type="italics">bandwidthAuto</format> parameter to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIQBandwidthAuto.False" />. </param>
<returns>
Returns the status code of this method. The status code either indicates success or describes an error or warning condition.
</returns>
<remarks>This method maps to the RFmxSpecAn_IQCfgBandwidth() function in C.</remarks>
<lastupdated>9/11/2015 11:25:28 AM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdReferenceWaveformIdleDurationPresent" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdReferenceWaveformIdleDurationPresent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the reference waveform contains an idle duration.
</summary>
<lastupdated>12/12/2014 4:12:02 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdReferenceWaveformIdleDurationPresent.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform contains an idle duration.
</summary>
<lastupdated>12/12/2014 4:12:09 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdReferenceWaveformIdleDurationPresent.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The reference waveform does not contain an idle duration.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXDpdApplyDpdConfigurationInput" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to use the configuration used by the DPD measurement for applying DPD.
</summary>
<lastupdated>12/12/2014 3:41:15 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.Measurement" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Measurement" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The configuration parameters for applying DPD are obtained from the DPD measurement configuration.
</summary>
<lastupdated>12/12/2014 3:41:32 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXDpdApplyDpdConfigurationInput.User" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="User" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The DPD measurement configures the parameters which you specify.
</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the method used to perform the IM measurement.        
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The IM measurement acquires the spectrum using the same signal analyzer settings across frequency bands. Use this method when the fundamental tone separation is not large. Supported devices: NI 5644R/5645R/5646R, NI 5663/5665, NI 5668R.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="DynamicRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The IM measurement acquires a segmented spectrum using the signal analyzer specific optimizations for different frequency bands. The spectrum is acquired in segments, one per tone or intermod frequency to be measured. The span of each acquired spectral segment is equal to the frequency separation between the two input tones, or 1 MHz, whichever is smaller.Use this method to configure the IM measurement and the signal analyzer for maximum dynamic range instead of measurement speed.Supported devices: NI 5665, NI 5668R. </summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.Segmented" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Segmented" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Similar to the Dynamic Range method, this method also acquires a segmented spectrum, except that signal analyzer is not explicitly configured to provide maximum dynamic range. Use this method when the frequency separation of the two input tones is large and the measurement accuracy can be traded off for measurement speed.Supported devices: NI 5644R/5645R/5646R, NI 5663/5665, NI 5668R.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the measurement computes an IF output power level offset for the intermods to maximize the dynamic range of the signal analyzer. This method is used only if you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.       
</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement sets the IF output power level offset using the values of the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetNearIFOutputPowerOffset(System.String,System.Double)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMConfiguration.SetFarIFOutputPowerOffset(System.String,System.Double)" crefType="FullyQualified" /> properties.</summary>
</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMIFOutputPowerOffsetAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement computes an IF output power level offset for the intermods to improve the dynamic range of the IM measurement.</summary>
</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSemAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSemAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXObwAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXObwAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXIMAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXIMAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An Individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXChpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the amplitude of the frequency bins, used in the measurement, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the _RFmxInstrCfgExternalAttenuationTable function to configure the external attenuation table.        
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXChpAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.      
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify video bandwidth in terms of the VBW to RBW ratio. The value of the video bandwidth is then computed by using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" crefType="FullyQualified" /> method and the Spectrum RBW method. The value of the Spectrum VBW method is disregarded in this mode.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumVbwFilterAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify the video bandwidth in the Spectrum VBW method. The <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" crefType="FullyQualified" /> method is disregarded in this mode.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXTxpVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify video bandwidth in terms of the VBW to RBW ratio. The value of the video bandwidth is then computed by using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" crefType="FullyQualified" /> method and the TXP RBW method. The value of the TXP VBW  method is disregarded in this mode.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpVbwFilterAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify the video bandwidth in the TXP VBW  method. The <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXTxpConfiguration.SetVbwFilterVbwToRbwRatio(System.String,System.Double)" crefType="FullyQualified" /> method is disregarded in this mode. </summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether the video bandwidth (VBW) is expressed directly or computed based on the VBW to RBW ratio.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify video bandwidth in terms of the VBW to RBW ratio. The value of the video bandwidth is then computed by using the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurConfiguration.SetRangeVbwFilterVbwToRbwRatio(System.String,System.Double)" crefType="FullyQualified" /> method and the Spur Range RBW method. The value of the Spur Range VBW method is disregarded in this mode.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeVbwFilterAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify the video bandwidth in the  Spur Range VBW  method. The Spur VBW to RBW Ratio method is disregarded in this mode.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpurRangeDetectorType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the type of detector to be used.        Use "range(n)" as the selector string to configure or read this method.      
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The detector is disabled.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.Sample" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Sample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The middle sample in the bucket is detected.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum value of the samples within the bucket is detected if the signal only rises or if the signal only falls. If the signal, within a bucket, both rises and falls, then the maximum and minimum values of the samples are detected in alternate buckets.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.Peak" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Peak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum value of the samples in the bucket is detected.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.NegativePeak" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NegativePeak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The minimum value of the samples in the bucket is detected.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.AverageRms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageRms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average RMS of all the samples in the bucket is detected.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.AverageVoltage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageVoltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average voltage of all the samples in the bucket is detected. 
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpurRangeDetectorType.AverageLog" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageLog" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average log of all the samples in the bucket is detected.
</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXSpectrumDetectorType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the type of detector to be used.      
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The detector is disabled.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.Sample" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Sample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The central point in the bucket is detected.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum and minimum values of the samples are detected in alternate buckets.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.Peak" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Peak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum value of the samples in the bucket is detected.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.NegativePeak" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="NegativePeak" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The minimum value of the samples in the bucket is detected.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.AverageRms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageRms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average RMS of all the samples in the bucket is detected.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.AverageVoltage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageVoltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average voltage of all the samples in the bucket is detected. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXSpectrumDetectorType.AverageLog" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="AverageLog" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The average log of all the samples in the bucket is detected.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseSmoothingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the smoothing type used to smoothen the log plot trace.      
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Smoothing is disabled.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.Linear" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Linear" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Performs linear moving average filtering on the measured phase noise log plot trace.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.Logarithmic" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Logarithmic" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Performs logarithmic moving average filtering on the measured phase noise log plot trace.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.Median" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Median" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Performs moving median filtering on the measured phase noise log plot trace.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to fetch and read the PhaseNoise measurement results.
</summary>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetCarrierPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the measured carrier power.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the measured carrier power.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsCarrierPower" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetCarrierFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCarrierFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the measured carrier frequency.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the measured carrier frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsCarrierFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetSpotPhaseNoise(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpotPhaseNoise" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the phase noise corresponding to the PhaseNoise Spot Noise Frequency List method  by using the smoothed log plot trace.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the phase noise corresponding to the PhaseNoise Spot Noise Frequency List method  by using the smoothed log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsSpotPhaseNoise" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetIntegratedPhaseNoise(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntegratedPhaseNoise" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the integrated phase noise.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the integrated phase noise.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsIntegratedPhaseNoise" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetResidualPMInRadian(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetResidualPMInRadian" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the residual PM in radians.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the residual PM in radians.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualPMInRadian" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetResidualPMInDegree(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetResidualPMInDegree" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the residual PM in degrees.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the residual PM in degrees.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualPMInDegree" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetResidualFM(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetResidualFM" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the residual FM in Hz.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the residual FM in Hz.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsResidualFM" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.GetJitter(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetJitter" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets the jitter in seconds.      
</summary>
<param name="selectorString">Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.</param>
<param name="value">Upon return, contains the jitter in seconds.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseResultsJitter" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.FetchSpotNoise(System.String,System.Double,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSpotNoise" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spotPhaseNoise" niparametertypes="System.String,System.Double,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the spot noise. <br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="spotPhaseNoise">Upon return, contains  the phase noise corresponding to the value of the PhaseNoise Spot Noise Freq List method, by using the smoothed log plot trace.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.FetchIntegratedNoise(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchIntegratedNoise" nihasget="0" nihasset="0" niparameters="selectorString,timeout,integratedPhaseNoise,residualPMInRadian,residualPMInDegree,residualFM,jitter" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the integrated noise measurement. <br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="integratedPhaseNoise">Upon return, contains  the integrated phase noise. This value is expressed in dBc. <br /></param>
<param name="residualPMInRadian">Returns the residual PM in radians.</param>
<param name="residualPMInDegree">Returns the residual PM in degrees.</param>
<param name="residualFM">Upon return, contains  the residual FM. This value is expressed in Hz. <br /></param>
<param name="jitter">Upon return, contains  the jitter. This value is expressed in seconds. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.FetchMeasuredLogPlotTrace(System.String,System.Double,System.Single[]@,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasuredLogPlotTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequency,measuredPhaseNoise" niparametertypes="System.String,System.Double,ref System.Single[],ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the log plot trace.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="frequency">Upon return, contains  an array of the frequency offsets where phase noise has been measured.<br /></param>
<param name="measuredPhaseNoise">Upon return, contains  an array of measured phase noise at the frequency offset. This value is expressed in dBc/Hz. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.FetchSmoothedLogPlotTrace(System.String,System.Double,System.Single[]@,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchSmoothedLogPlotTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequency,smoothedPhaseNoise" niparametertypes="System.String,System.Double,ref System.Single[],ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Fetches the smoothened log plot trace.<br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="frequency">Upon return, contains  an array of the frequency offsets where phase noise has been measured.<br /></param>
<param name="smoothedPhaseNoise">Upon return, contains  an array of smoothed phase noise at the frequency offset. This value is expressed in dBc/Hz.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults.FetchCarrierMeasurement(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FetchCarrierMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,carrierFrequency,carrierPower" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Fetches the carrier measurement. <br /></summary>
<param name="selectorString">Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name.   If you do not specify the result name, the default result instance is used. 
			Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
			You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br /></param>
<param name="timeout">Specifies the timeout, in seconds, for fetching the specified measurement. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
<param name="carrierFrequency">Upon return, contains  the measured carrier power. This value is expressed in Hz. <br /></param>
<param name="carrierPower">Upon return, contains  the measured carrier frequency. This value is expressed in dBm. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the frequency range for integrated noise measurements.      
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Integrated noise measurement is not computed.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition.Measurement" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Measurement" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The complete log plot frequency range, considered as a single range, is used for computing integrated measurements.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition.Custom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The measurement range(s) specified by  PhaseNoise Integrated Noise Start Freq method and the PhaseNoise Integrated Noise Stop Freq method is used for computing integrated measurements.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoise" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoise" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Represents the PhaseNoise measurement.
</summary>

</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoise.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the PhaseNoise measurement
</summary>

</member>
    <member name="P:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoise.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults">
      <summary>
Gets the <see cref="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the PhaseNoise measurement results.
</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies how the measurement computes offset subranges.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measurement computes offset sub-ranges by dividing the user configured offset range into multiple decade sub-ranges. The range is specified by the PhaseNoise Start Freq and the PhaseNoise Stop Freq properties.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specify the offset sub-ranges used for the measurement. Use the PhaseNoise Range Start Freq method and the PhaseNoise Range Stop Freq method to configure single or multiple range start and range stop frequencies.  </summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to remove spurs from the log plot trace.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disables spur removal on the log plot trace.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enables spur removal on the log plot trace.</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the FFT window to use.       
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes transients for which duration is shorter than the window length. You can also use this window type to separate two tones with frequencies close to each other but with almost equal amplitudes. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measures single-tone amplitudes accurately.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes transients for which duration is longer than the window length. You can also use this window type to provide better frequency resolution for noise measurements.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes closely-spaced sine waves.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides a good balance of spectral leakage, frequency resolution, and amplitude attenuation. Hence, this windowing is useful for time-frequency analysis.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analyzes single tone because it has a low maximum side lobe level and a high side lobe roll-off rate. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Useful as a good general purpose window, having side lobe rejection greater than 90 dB and having a moderately wide main lobe. </summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Separates two tones with frequencies close to each other but with widely-differing amplitudes. 
</summary>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides methods to configure the PhaseNoise measurement
</summary>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the phase noise measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable the phase noise measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the phase noise measurement.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable the phase noise measurement.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets how the measurement computes offset subranges.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains how the measurement computes offset subranges.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Auto" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets how the measurement computes offset subranges.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies how the measurement computes offset subranges.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Auto" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start offset frequency.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the start offset frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetStartFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the start offset frequency.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the start offset frequency.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop offset frequency.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the start offset frequency for the specified subrange when you set the PhaseNoise Range Definition method to Auto.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1E+06.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetStopFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the stop offset frequency.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the stop frequency of the offset frequency range when you set the Phase Noise Range Definition method to Auto.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1E+06.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRbwPercentage(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRbwPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the RBW as a percentage of the start frequency of each subrange when you set the Phase Noise Range Definition property to Auto.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the RBW as a percentage of the start frequency of each subrange when you set the PhaseNoise Range Definition method to Auto.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRbwPercentage" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRbwPercentage(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRbwPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the RBW as a percentage of the PhaseNoise Range Start Freq method of the specified subrange when you set the PhaseNoise Range Definition method to Manual.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the RBW as a percentage of the start frequency of each subrange when you set the PhaseNoise Range Definition method to Auto.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRbwPercentage" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetAveragingMultiplier(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingMultiplier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the factor by which you increase the averaging count for each range. This setting applies to both Auto and Manual range definitions.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the factor by which you increase the averaging count for each range.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAveragingMultiplier" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetAveragingMultiplier(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingMultiplier" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the factor by which you increase the averaging count for each range. This setting applies to both Auto and Manual range definitions.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the factor by which you increase the averaging count for each range.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAveragingMultiplier" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Gets the FFT window to use.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the FFT window to use.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Hamming" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow" nireturnvaluetype="System.Int32">
      <summary>
Sets the FFT window to use.       
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the FFT window to use.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseFftWindow.Hamming" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetNumberOfRanges(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of manual ranges.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of manual ranges.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseNumberOfRanges" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetNumberOfRanges(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of manual ranges.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of manual ranges.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseNumberOfRanges" crefType="PartiallyQualified" /> attribute.The default value is 1.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRangeStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the start offset frequency for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the start frequency for the specified subrange when you set the PhaseNoise Range Definition method to Manual.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeStartFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the start offset frequency for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the start frequency for the specified subrange when you set the PhaseNoise Range Definition method to Manual.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1000.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRangeStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the stop offset frequency for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the stop frequency of the offset frequency range when you set the PhaseNoise Range Definition method to Manual.        </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1E+06.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeStopFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the stop frequency for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the stop frequency for the specified subrange when you set the Phase Noise Range Definition method to Manual. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1E+06.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRangeRbwPercentage(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeRbwPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the RBW  as a percentage of the PhaseNoise Range Start Freq method of the specified subrange when you set the PhaseNoise Range Definition method to Manual.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the RBW as a percentage of the start offset of the specified range.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeRbwPercentage" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeRbwPercentage(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeRbwPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the RBW as a percentage of the PhaseNoise Range Start Freq method of the specified subrange when you set the PhaseNoise Range Definition method to Manual.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value"> Specifies the RBW as a percentage of the PhaseNoise Range Start Freq method of the specified subrange when you set the PhaseNoise Range Definition method to Manual.       </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeRbwPercentage" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetRangeAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetRangeAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Gets the averaging count for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Upon return, contains the averaging count for the specified range.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetRangeAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Sets the averaging count for the specified range.      
</summary>
<param name="selectorString">Specifies the phasenoiserange number.<br /> Example: "phasenoiserange0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX.BuildRangeString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.</param>
<param name="value">Specifies the averaging count for the specified range.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseRangeAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetSmoothingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSmoothingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType" nireturnvaluetype="System.Int32">
      <summary>
Gets the smoothing type used to smoothen the log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the smoothing type used to smoothen a log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.Logarithmic" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetSmoothingType(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSmoothingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType" nireturnvaluetype="System.Int32">
      <summary>
Sets the smoothing type used to smoothen a log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the smoothing type used to smoothen a log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType.Logarithmic" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetSmoothingPercentage(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSmoothingPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the number of trace points to use in the moving average filter as a percentage of total number of points in the log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the number of trace points to use in the moving average filter as a percentage of total number of points in the log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingPercentage" crefType="PartiallyQualified" /> attribute.The default value is 2.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetSmoothingPercentage(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSmoothingPercentage" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the number of trace points to use in the moving average filter as a percentage of total number of points in the log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the number of trace points to use in the moving average filter as a percentage of total number of points in the log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSmoothingPercentage" crefType="PartiallyQualified" /> attribute.The default value is 2.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetSpotNoiseFrequencyList(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpotNoiseFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpotNoiseFrequencyList" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetSpotNoiseFrequencyList(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpotNoiseFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpotNoiseFrequencyList" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetIntegratedNoiseRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntegratedNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition" nireturnvaluetype="System.Int32">
      <summary>
Gets the frequency range for integrated noise measurements.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the frequency range for integrated noise measurements.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseRangeDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition.Measurement" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetIntegratedNoiseRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntegratedNoiseRangeDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition" nireturnvaluetype="System.Int32">
      <summary>
Sets the frequency range for integrated noise measurements.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the frequency range for integrated noise measurements.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseRangeDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition.Measurement" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetIntegratedNoiseStartFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntegratedNoiseStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the start frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.     
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the start frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStartFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetIntegratedNoiseStartFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntegratedNoiseStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the start offset frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the start offset frequencies for integrated noise measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStartFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetIntegratedNoiseStopFrequency(System.String,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetIntegratedNoiseStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of the stop frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of the stop frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStopFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetIntegratedNoiseStopFrequency(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetIntegratedNoiseStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of the stop offset frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of the stop frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom.     </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseIntegratedNoiseStopFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable the traces to be stored and retrieved after performing the Phase Noise measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the Phase Noise measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable the traces to be stored and retrieved after performing the Phase Noise measurement.      
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the Phase Noise measurement.      </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeDefinition" nihasget="0" nihasset="0" niparameters="selectorString,rangeDefinition" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition" nireturnvaluetype="System.Int32">
      <summary>
Specifies how the measurement computes offset subranges.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="rangeDefinition">Specifies how the measurement computes offset subranges. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetSpurRemovalEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpurRemovalEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to remove spurs from the log plot trace.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to remove spurs from the log plot trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled.False" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetSpurRemovalEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpurRemovalEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to remove spurs from the log plot trace.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to remove spurs from the log plot trace.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled.False" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetSpurRemovalPeakExcursion(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpurRemovalPeakExcursion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the peak excursion to be used when spur detection is performed.     Refer to the Marker topic for more information on peak excursion. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, the peak excursion to be used when spur detection is performed. Refer to the Phase Noise topic for more information on spur removal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalPeakExcursion" crefType="PartiallyQualified" /> attribute.The default value is 0.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetSpurRemovalPeakExcursion(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetSpurRemovalPeakExcursion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the peak excursion to be used when spur detection is performed.      Refer to the Marker topic for more information on peak excursion. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the peak excursion to be used when spur detection is performed. Refer to the Phase Noise topic for more information on spur removal. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseSpurRemovalPeakExcursion" crefType="PartiallyQualified" /> attribute.The default value is 0.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetCancellationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCancellationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Gets whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled.False" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetCancellationEnabled(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCancellationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled" nireturnvaluetype="System.Int32">
      <summary>
Sets whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled.False" crefType="PartiallyQualified" />.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetCancellationThreshold(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCancellationThreshold" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">
      <summary>
Gets the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationThreshold" crefType="PartiallyQualified" /> attribute.The default value is 0.01.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetCancellationThreshold(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCancellationThreshold" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Sets the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. 
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. </param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationThreshold" crefType="PartiallyQualified" /> attribute.The default value is 0.01.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetCancellationFrequency(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCancellationFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of frequency offsets where the reference phase noise has been measured.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of frequencies where the reference phase noise has been measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetCancellationFrequency(System.String,System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCancellationFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of frequency offsets where the reference phase noise has been measured.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of frequencies where the reference phase noise has been measured.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationFrequency" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.GetCancellationReferencePhaseNoise(System.String,System.Single[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetCancellationReferencePhaseNoise" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,ref System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Gets an array of reference phase noise at the frequency offsets.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Upon return, contains an array of reference phase noise at the frequencies specified by the Phase Noise Cancellation Frequency method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method gets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationReferencePhaseNoise" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetCancellationReferencePhaseNoise(System.String,System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="SetCancellationReferencePhaseNoise" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Sets an array of reference phase noise at the frequency offsets.
</summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="value">Specifies an array of reference phase noise at the frequencies specified by the Phase Noise Cancellation Frequency method.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
<remarks>This method sets the value of <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPropertyId.PhaseNoiseCancellationReferencePhaseNoise" crefType="PartiallyQualified" /> attribute.</remarks>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureAutoRange(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAutoRange" nihasget="0" nihasset="0" niparameters="selectorString,startFrequency,stopFrequency,rbwPercentage" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the offset range and the RBW percentage when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Auto" crefType="PartiallyQualified" />. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="startFrequency">Specifies the start frequency for the specified subrange when you sest the Phase Noise Range Definition method to Manual. This value is expressed in Hz.</param>
<param name="stopFrequency">Specifies the stop frequency for the specified subrange when you sest the Phase Noise Range Definition method to Manual. This value is expressed in Hz.</param>
<param name="rbwPercentage">Specifies the RBW of the start offset of each sub-range. This value is expressed as a percentage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureAveragingMultiplier(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveragingMultiplier" nihasget="0" nihasset="0" niparameters="selectorString,averagingMultiplier" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the averaging multiplier.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="averagingMultiplier">Specifies the factor by which the averaging count for each sub-range to increase.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureNumberOfRanges(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfRanges" nihasget="0" nihasset="0" niparameters="selectorString,numberOfRanges" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">
      <summary>
Configures the number of offset ranges when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition)" crefType="FullyQualified" /> method to <em>Manual</em>.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="numberOfRanges">Specifies the number of manual ranges.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureRangeArray(System.String,System.Double[],System.Double[],System.Double[],System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRangeArray" nihasget="0" nihasset="0" niparameters="selectorString,rangeStartFrequency,rangeStopFrequency,rangeRbwPercentage,rangeAveragingCount" niparametertypes="System.String,System.Double[],System.Double[],System.Double[],System.Int32[]" nireturnvaluetype="System.Int32">
      <summary>
Configures an array of the offset range, RBW percentage and averaging count when you set the <see cref="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.SetRangeDefinition(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseRangeDefinition.Manual" crefType="PartiallyQualified" />.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="rangeStartFrequency">Specifies the start frequency for the specified subrange when you set the Phase Noise Range Definition method to Manual.</param>
<param name="rangeStopFrequency">Specifies the stop frequency for the specified subrange when you set the Phase Noise Range Definition method to Manual. This value is expressed in Hz.</param>
<param name="rangeRbwPercentage">Specifies the RBW of the start offset of each sub-range. This value is expressed as a percentage.</param>
<param name="rangeAveragingCount">Specifies the averaging count for the specified range.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureSmoothing(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSmoothing" nihasget="0" nihasset="0" niparameters="selectorString,smoothingType,smoothingPercentage" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSmoothingType,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures the smoothing type and smoothing percentage used to smoothen the measured log plot trace.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="smoothingType">Specifies the smoothing type used to smoothen a log plot trace.</param>
<param name="smoothingPercentage">Specifies the number of points to use in the moving average filter as a percentage of total number of points in the log plot trace. This value is expressed as a percentage.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureSpotNoiseFrequencyList(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSpotNoiseFrequencyList" nihasget="0" nihasset="0" niparameters="selectorString,frequencyList" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures a list of frequencies at which the phase noise values are to be read using the smoothed log plot trace.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="frequencyList">Specifies an array of offset frequencies at which the phase noise is measured using the smoothed log plot trace. This value is expressed in Hz.</param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureIntegratedNoise(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIntegratedNoise" nihasget="0" nihasset="0" niparameters="selectorString,integratedNoiseRangeDefinition,integratedNoiseStartFrequency,integratedNoiseStopFrequency" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseIntegratedNoiseRangeDefinition,System.Double[],System.Double[]" nireturnvaluetype="System.Int32">
      <summary>
Configures the integrated noise ranges. The smoothed log plot trace is used when computing integrated measurements.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="integratedNoiseRangeDefinition">Specifies whether to use the complete measurement range for computing integrated measurements, or to use the range that you specify. <br /></param>
<param name="integratedNoiseStartFrequency">Specifies an array of the start frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom. This value is expressed in Hz. <br /></param>
<param name="integratedNoiseStopFrequency">Specifies an array of the stop frequencies for integrated noise measurement when you set the PhaseNoise Integrated Noise Range Definition method to Custom. This value is expressed in Hz. <br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureSpurRemoval(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSpurRemoval" nihasget="0" nihasset="0" niparameters="selectorString,spurRemovalEnabled,peakExcursion" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseSpurRemovalEnabled,System.Double" nireturnvaluetype="System.Int32">
      <summary>
Configures enabling or disabling of the spur removal and the peak excursion to use when spur removal is enabled.<br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="spurRemovalEnabled">Specifies whether the spur removal is enabled or disabled.<br /></param>
<param name="peakExcursion">Specifies the peak excursion to be used when spur detection is performed.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="M:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseConfiguration.ConfigureCancellation(System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled,System.Double,System.Single[],System.Single[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="ConfigureCancellation" nihasget="0" nihasset="0" niparameters="selectorString,cancellationEnabled,cancellationThreshold,frequency,referencePhaseNoise" niparametertypes="System.String,NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled,System.Double,System.Single[],System.Single[]" nireturnvaluetype="System.Int32">
      <summary>
Configures phase noise cancellation for the measurement. <br /></summary>
<param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
<param name="cancellationEnabled">Specifies whether to enable or disable the phase noise cancellation.<br /></param>
<param name="cancellationThreshold">Specifies the minimum difference between the reference and pre-cancellation traces that must exist before cancellation is performed. <br /></param>
<param name="frequency">Specifies an array of frequency offsets where the reference phase noise has been measured. This value is expressed in Hz. <br /></param>
<param name="referencePhaseNoise">Specifies an array of the reference phase noise at the frequency offsets. This value is expressed in dBc/Hz.<br /></param>
<returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

</member>
    <member name="T:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXPhaseNoiseCancellationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies whether to enable or disable the phase noise cancellation.      Refer to the Phase Noise topic for more information on phase noise cancellation.
</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disables phase noise cancellation.</summary>

</member>
    <member name="F:NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMXPhaseNoiseCancellationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enables phase noise cancellation. </summary>

</member>
    <member name="T:NationalInstruments.RFmx.InstrMX.RFmxSpecAnMXExtension" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="RFmxSpecAnMXExtension" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Provides extension methods to create SpecAn signal configuration. These methods are added to RFmxInstrMX class.
</summary>
<threadsafety safety="safe" />
<remarks>For more information about NI-RFmx Instruments, refer to the NI-RFmx Instruments Help.</remarks>
<lastupdated>9/3/2014 10:24:48 AM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.InstrMX.RFmxSpecAnMXExtension.GetSpecAnSignalConfiguration(NationalInstruments.RFmx.InstrMX.RFmxInstrMX)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpecAnSignalConfiguration" nihasget="0" nihasset="0" niparameters="instrSession" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMX" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX">
      <summary>
Creates a new default SpecAn signal configuration if it doesn't exist; otherwise, it returns the 
existing default SpecAn signal configuration.
</summary>
<param name="instrSession">Specifies an instr session.</param>
<returns>Returns an object of type RFmxSpecAnMX.</returns>
<lastupdated>8/26/2014 12:00:15 PM</lastupdated>
<updatedby>NI</updatedby>
<approved>False</approved>
</member>
    <member name="M:NationalInstruments.RFmx.InstrMX.RFmxSpecAnMXExtension.GetSpecAnSignalConfiguration(NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="3/27/2017 11:32:45 PM" niupdatedby="Sebastius" nidisplayname="GetSpecAnSignalConfiguration" nihasget="0" nihasset="0" niparameters="instrSession,signalName" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String" nireturnvaluetype="NationalInstruments.RFmx.SpecAnMX.RFmxSpecAnMX">
      <summary>
Creates a SpecAn signal configuration for specified signal name. Existing SpecAn signal configuration is
returned if specified signal name exists.
</summary>
<param name="instrSession">Specifies an RFmxInstr session.</param>
<param name="signalName">Specifies the name of the signal. This parameter accepts the signal name with or without the "signal::" prefix. <para>
Example:<para>
"signal::sig1"
</para><para>
"sig1"
</para></para></param>
<returns>Returns an object of type RFmxSpecAnMX.</returns>
<remarks>This method maps to the RFmxSpecAn_CreateSignalConfiguration() function in C.</remarks>
<lastupdated>8/10/2015 4:41:43 PM</lastupdated>
<updatedby>ITAdmin</updatedby>
<approved>False</approved>
</member>
  </members>
</doc>